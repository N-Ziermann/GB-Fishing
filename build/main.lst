                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.6 #12439 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _randomRange
                                     13 	.globl _init
                                     14 	.globl _renderRod
                                     15 	.globl _moveFishTo
                                     16 	.globl _rand
                                     17 	.globl _initrand
                                     18 	.globl _puts
                                     19 	.globl _printf
                                     20 	.globl _color
                                     21 	.globl _line
                                     22 	.globl _set_sprite_data
                                     23 	.globl _wait_vbl_done
                                     24 	.globl _waitpad
                                     25 	.globl _joypad
                                     26 	.globl _i
                                     27 	.globl _seed
                                     28 	.globl _fishingRod
                                     29 	.globl _fish1
                                     30 	.globl _spriteSize
                                     31 	.globl _ROD
                                     32 	.globl _FISH
                                     33 ;--------------------------------------------------------
                                     34 ; special function registers
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area _DATA
      000000                         40 _fish1::
      000000                         41 	.ds 4
      000004                         42 _fishingRod::
      000004                         43 	.ds 2
      000006                         44 _seed::
      000006                         45 	.ds 2
                                     46 ;--------------------------------------------------------
                                     47 ; ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area _INITIALIZED
      000000                         50 _i::
      000000                         51 	.ds 1
                                     52 ;--------------------------------------------------------
                                     53 ; absolute external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area _DABS (ABS)
                                     56 ;--------------------------------------------------------
                                     57 ; global & static initialisations
                                     58 ;--------------------------------------------------------
                                     59 	.area _HOME
                                     60 	.area _GSINIT
                                     61 	.area _GSFINAL
                                     62 	.area _GSINIT
                                     63 ;--------------------------------------------------------
                                     64 ; Home
                                     65 ;--------------------------------------------------------
                                     66 	.area _HOME
                                     67 	.area _HOME
                                     68 ;--------------------------------------------------------
                                     69 ; code
                                     70 ;--------------------------------------------------------
                                     71 	.area _CODE
                                     72 ;main.c:29: void moveFishTo(Fish *f, UINT8 x, UINT8 y){
                                     73 ;	---------------------------------
                                     74 ; Function moveFishTo
                                     75 ; ---------------------------------
      000000                         76 _moveFishTo::
      000000 3B                      77 	dec	sp
      000001 3B                      78 	dec	sp
                                     79 ;main.c:30: f->x = x;
      000002 F8 04                   80 	ldhl	sp,	#4
      000004 2A                      81 	ld	a, (hl+)
      000005 5F                      82 	ld	e, a
      000006 2A                      83 	ld	a, (hl+)
      000007 57                      84 	ld	d, a
                                     85 ;main.c:31: f->y = y;
      000008 2A                      86 	ld	a, (hl+)
      000009 12                      87 	ld	(de), a
      00000A 4B                      88 	ld	c, e
      00000B 42                      89 	ld	b, d
      00000C 03                      90 	inc	bc
      00000D 7E                      91 	ld	a, (hl)
      00000E 02                      92 	ld	(bc), a
                                     93 ;main.c:32: move_sprite(f->sprites[0], x, y);
      00000F 7E                      94 	ld	a, (hl)
      000010 F8 00                   95 	ldhl	sp,	#0
      000012 77                      96 	ld	(hl), a
      000013 F8 06                   97 	ldhl	sp,	#6
      000015 7E                      98 	ld	a, (hl)
      000016 F8 01                   99 	ldhl	sp,	#1
      000018 77                     100 	ld	(hl), a
      000019 6B                     101 	ld	l, e
                                    102 ;	spillPairReg hl
                                    103 ;	spillPairReg hl
      00001A 62                     104 	ld	h, d
                                    105 ;	spillPairReg hl
                                    106 ;	spillPairReg hl
      00001B 23                     107 	inc	hl
      00001C 23                     108 	inc	hl
                                    109 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      00001D 6E                     110 	ld	l, (hl)
                                    111 ;	spillPairReg hl
                                    112 ;	spillPairReg hl
      00001E 26 00                  113 	ld	h, #0x00
                                    114 ;	spillPairReg hl
                                    115 ;	spillPairReg hl
      000020 29                     116 	add	hl, hl
      000021 29                     117 	add	hl, hl
      000022 01r00r00               118 	ld	bc, #_shadow_OAM
      000025 09                     119 	add	hl, bc
      000026 4D                     120 	ld	c, l
      000027 44                     121 	ld	b, h
                                    122 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      000028 F8 00                  123 	ldhl	sp,	#0
      00002A 2A                     124 	ld	a, (hl+)
      00002B 02                     125 	ld	(bc), a
      00002C 03                     126 	inc	bc
      00002D 7E                     127 	ld	a, (hl)
      00002E 02                     128 	ld	(bc), a
                                    129 ;main.c:33: move_sprite(f->sprites[1], x-spriteSize, y);
                                    130 ;setupPair	HL
      00002F 21r81r00               131 	ld	hl, #_spriteSize
      000032 4E                     132 	ld	c, (hl)
      000033 F8 01                  133 	ldhl	sp,	#1
      000035 7E                     134 	ld	a, (hl)
      000036 91                     135 	sub	a, c
      000037 4F                     136 	ld	c, a
      000038 13                     137 	inc	de
      000039 13                     138 	inc	de
      00003A 13                     139 	inc	de
      00003B 1A                     140 	ld	a, (de)
                                    141 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      00003C 6F                     142 	ld	l, a
      00003D 11r00r00               143 	ld	de, #_shadow_OAM+0
                                    144 ;	spillPairReg hl
                                    145 ;	spillPairReg hl
      000040 26 00                  146 	ld	h, #0x00
                                    147 ;	spillPairReg hl
                                    148 ;	spillPairReg hl
      000042 29                     149 	add	hl, hl
      000043 29                     150 	add	hl, hl
      000044 19                     151 	add	hl, de
      000045 5D                     152 	ld	e, l
      000046 54                     153 	ld	d, h
                                    154 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      000047 F8 00                  155 	ldhl	sp,	#0
      000049 7E                     156 	ld	a, (hl)
      00004A 12                     157 	ld	(de), a
      00004B 13                     158 	inc	de
      00004C 79                     159 	ld	a, c
      00004D 12                     160 	ld	(de), a
                                    161 ;main.c:33: move_sprite(f->sprites[1], x-spriteSize, y);
                                    162 ;main.c:34: }
      00004E 33                     163 	inc	sp
      00004F 33                     164 	inc	sp
      000050 C9                     165 	ret
      000051                        166 _FISH:
      000051 00                     167 	.db #0x00	; 0
      000052 F0                     168 	.db #0xf0	; 240
      000053 F0                     169 	.db #0xf0	; 240
      000054 0C                     170 	.db #0x0c	; 12
      000055 FC                     171 	.db #0xfc	; 252
      000056 02                     172 	.db #0x02	; 2
      000057 FE                     173 	.db #0xfe	; 254
      000058 05                     174 	.db #0x05	; 5
      000059 FE                     175 	.db #0xfe	; 254
      00005A 01                     176 	.db #0x01	; 1
      00005B FC                     177 	.db #0xfc	; 252
      00005C 02                     178 	.db #0x02	; 2
      00005D F0                     179 	.db #0xf0	; 240
      00005E 0C                     180 	.db #0x0c	; 12
      00005F 00                     181 	.db #0x00	; 0
      000060 F0                     182 	.db #0xf0	; 240
      000061 00                     183 	.db #0x00	; 0
      000062 08                     184 	.db #0x08	; 8
      000063 08                     185 	.db #0x08	; 8
      000064 15                     186 	.db #0x15	; 21
      000065 1D                     187 	.db #0x1d	; 29
      000066 22                     188 	.db #0x22	; 34
      000067 1F                     189 	.db #0x1f	; 31
      000068 20                     190 	.db #0x20	; 32
      000069 1F                     191 	.db #0x1f	; 31
      00006A 20                     192 	.db #0x20	; 32
      00006B 1D                     193 	.db #0x1d	; 29
      00006C 22                     194 	.db #0x22	; 34
      00006D 08                     195 	.db #0x08	; 8
      00006E 15                     196 	.db #0x15	; 21
      00006F 00                     197 	.db #0x00	; 0
      000070 08                     198 	.db #0x08	; 8
      000071                        199 _ROD:
      000071 00                     200 	.db #0x00	; 0
      000072 08                     201 	.db #0x08	; 8
      000073 00                     202 	.db #0x00	; 0
      000074 08                     203 	.db #0x08	; 8
      000075 00                     204 	.db #0x00	; 0
      000076 04                     205 	.db #0x04	; 4
      000077 00                     206 	.db #0x00	; 0
      000078 02                     207 	.db #0x02	; 2
      000079 00                     208 	.db #0x00	; 0
      00007A 02                     209 	.db #0x02	; 2
      00007B 00                     210 	.db #0x00	; 0
      00007C 02                     211 	.db #0x02	; 2
      00007D 00                     212 	.db #0x00	; 0
      00007E 24                     213 	.db #0x24	; 36
      00007F 00                     214 	.db #0x00	; 0
      000080 18                     215 	.db #0x18	; 24
      000081                        216 _spriteSize:
      000081 08                     217 	.db #0x08	; 8
                                    218 ;main.c:36: void renderRod(){
                                    219 ;	---------------------------------
                                    220 ; Function renderRod
                                    221 ; ---------------------------------
      000082                        222 _renderRod::
                                    223 ;main.c:38: }
      000082 C9                     224 	ret
                                    225 ;main.c:40: void init() {
                                    226 ;	---------------------------------
                                    227 ; Function init
                                    228 ; ---------------------------------
      000083                        229 _init::
                                    230 ;main.c:41: fish1.sprites[0] = 1;
      000083 21r02r00               231 	ld	hl, #(_fish1 + 2)
      000086 36 01                  232 	ld	(hl), #0x01
                                    233 ;main.c:42: fish1.sprites[1] = 2;
      000088 21r03r00               234 	ld	hl, #(_fish1 + 3)
      00008B 36 02                  235 	ld	(hl), #0x02
                                    236 ;main.c:43: moveFishTo(&fish1, 20, 30);
      00008D 21 14 1E               237 	ld	hl, #0x1e14
      000090 E5                     238 	push	hl
      000091 11r00r00               239 	ld	de, #_fish1
      000094 D5                     240 	push	de
      000095 CDr00r00               241 	call	_moveFishTo
      000098 E8 04                  242 	add	sp, #4
                                    243 ;main.c:44: set_sprite_data(1, 2, FISH);
      00009A 11r51r00               244 	ld	de, #_FISH
      00009D D5                     245 	push	de
      00009E 21 01 02               246 	ld	hl, #0x201
      0000A1 E5                     247 	push	hl
      0000A2 CDr00r00               248 	call	_set_sprite_data
      0000A5 E8 04                  249 	add	sp, #4
                                    250 ;main.c:45: set_sprite_tile(fish1.sprites[0], 1);
      0000A7 21r02r00               251 	ld	hl, #(_fish1 + 2)
      0000AA 4E                     252 	ld	c, (hl)
                                    253 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      0000AB 26 00                  254 	ld	h, #0x00
                                    255 ;	spillPairReg hl
                                    256 ;	spillPairReg hl
      0000AD 69                     257 	ld	l, c
      0000AE 29                     258 	add	hl, hl
      0000AF 29                     259 	add	hl, hl
      0000B0 11r00r00               260 	ld	de, #_shadow_OAM
      0000B3 19                     261 	add	hl, de
      0000B4 23                     262 	inc	hl
      0000B5 23                     263 	inc	hl
      0000B6 36 01                  264 	ld	(hl), #0x01
                                    265 ;main.c:46: set_sprite_tile(fish1.sprites[1], 2);
      0000B8 21r03r00               266 	ld	hl, #(_fish1 + 3)
      0000BB 4E                     267 	ld	c, (hl)
                                    268 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      0000BC 26 00                  269 	ld	h, #0x00
                                    270 ;	spillPairReg hl
                                    271 ;	spillPairReg hl
      0000BE 69                     272 	ld	l, c
      0000BF 29                     273 	add	hl, hl
      0000C0 29                     274 	add	hl, hl
      0000C1 11r00r00               275 	ld	de, #_shadow_OAM
      0000C4 19                     276 	add	hl, de
      0000C5 23                     277 	inc	hl
      0000C6 23                     278 	inc	hl
      0000C7 36 02                  279 	ld	(hl), #0x02
                                    280 ;main.c:47: fishingRod.yHook = 100;
      0000C9 21r04r00               281 	ld	hl, #_fishingRod
      0000CC 36 64                  282 	ld	(hl), #0x64
                                    283 ;main.c:48: fishingRod.hookSprite = 3;
      0000CE 01r05r00               284 	ld	bc, #_fishingRod+1
      0000D1 3E 03                  285 	ld	a, #0x03
      0000D3 02                     286 	ld	(bc), a
                                    287 ;main.c:49: set_sprite_data(3, 3, ROD);
      0000D4 11r71r00               288 	ld	de, #_ROD
      0000D7 D5                     289 	push	de
      0000D8 21 03 03               290 	ld	hl, #0x303
      0000DB E5                     291 	push	hl
      0000DC CDr00r00               292 	call	_set_sprite_data
      0000DF E8 04                  293 	add	sp, #4
                                    294 ;main.c:50: set_sprite_tile(fishingRod.hookSprite, 3);
      0000E1 0A                     295 	ld	a, (bc)
      0000E2 4F                     296 	ld	c, a
                                    297 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      0000E3 26 00                  298 	ld	h, #0x00
                                    299 ;	spillPairReg hl
                                    300 ;	spillPairReg hl
      0000E5 69                     301 	ld	l, c
      0000E6 29                     302 	add	hl, hl
      0000E7 29                     303 	add	hl, hl
      0000E8 11r00r00               304 	ld	de, #_shadow_OAM
      0000EB 19                     305 	add	hl, de
      0000EC 23                     306 	inc	hl
      0000ED 23                     307 	inc	hl
      0000EE 36 03                  308 	ld	(hl), #0x03
                                    309 ;main.c:51: DISPLAY_ON;
      0000F0 F0r00                  310 	ldh	a, (_LCDC_REG + 0)
      0000F2 F6 80                  311 	or	a, #0x80
      0000F4 E0r00                  312 	ldh	(_LCDC_REG + 0), a
                                    313 ;main.c:52: SHOW_SPRITES;
      0000F6 F0r00                  314 	ldh	a, (_LCDC_REG + 0)
      0000F8 F6 02                  315 	or	a, #0x02
      0000FA E0r00                  316 	ldh	(_LCDC_REG + 0), a
                                    317 ;main.c:53: }
      0000FC C9                     318 	ret
                                    319 ;main.c:55: UINT8 randomRange(UINT8 start, UINT8 end) {
                                    320 ;	---------------------------------
                                    321 ; Function randomRange
                                    322 ; ---------------------------------
      0000FD                        323 _randomRange::
                                    324 ;main.c:56: return start + ((UINT8)rand()) % (end - start + (UINT8)1);
      0000FD CDr00r00               325 	call	_rand
      000100 F8 03                  326 	ldhl	sp,	#3
      000102 3A                     327 	ld	a, (hl-)
      000103 16 00                  328 	ld	d, #0x00
      000105 4E                     329 	ld	c, (hl)
      000106 06 00                  330 	ld	b, #0x00
      000108 91                     331 	sub	a, c
      000109 4F                     332 	ld	c, a
      00010A 7A                     333 	ld	a, d
      00010B 98                     334 	sbc	a, b
      00010C 47                     335 	ld	b, a
      00010D 03                     336 	inc	bc
      00010E 16 00                  337 	ld	d, #0x00
      000110 C5                     338 	push	bc
      000111 D5                     339 	push	de
      000112 CDr00r00               340 	call	__modsint
      000115 E8 04                  341 	add	sp, #4
      000117 F8 02                  342 	ldhl	sp,	#2
      000119 7E                     343 	ld	a, (hl)
      00011A 83                     344 	add	a, e
      00011B 5F                     345 	ld	e, a
                                    346 ;main.c:57: }
      00011C C9                     347 	ret
                                    348 ;main.c:59: void main() {
                                    349 ;	---------------------------------
                                    350 ; Function main
                                    351 ; ---------------------------------
      00011D                        352 _main::
                                    353 ;main.c:60: init();
      00011D CDr83r00               354 	call	_init
                                    355 ;main.c:62: printf("PRESS START!");
      000120 11r05r02               356 	ld	de, #___str_0
      000123 D5                     357 	push	de
      000124 CDr00r00               358 	call	_printf
      000127 E1                     359 	pop	hl
                                    360 ;main.c:63: waitpad(J_START);
      000128 3E 80                  361 	ld	a, #0x80
      00012A F5                     362 	push	af
      00012B 33                     363 	inc	sp
      00012C CDr00r00               364 	call	_waitpad
      00012F 33                     365 	inc	sp
                                    366 ;main.c:64: seed = LY_REG;
      000130 F0r00                  367 	ldh	a, (_LY_REG + 0)
                                    368 ;setupPair	HL
      000132 21r06r00               369 	ld	hl, #_seed
                                    370 ;setupPair	HL
      000135 22                     371 	ld	(hl+), a
                                    372 ;main.c:65: seed |= (UINT16)DIV_REG << 8;
                                    373 ;setupPair	HL
      000136 AF                     374 	xor	a, a
      000137 32                     375 	ld	(hl-), a
      000138 F0r00                  376 	ldh	a, (_DIV_REG + 0)
      00013A 4F                     377 	ld	c, a
      00013B AF                     378 	xor	a, a
      00013C B6                     379 	or	a, (hl)
                                    380 ;setupPair	HL
                                    381 ;setupPair	HL
      00013D 22                     382 	ld	(hl+), a
      00013E 79                     383 	ld	a, c
      00013F B6                     384 	or	a, (hl)
                                    385 ;setupPair	HL
                                    386 ;main.c:66: initrand(seed);
                                    387 ;setupPair	HL
      000140 32                     388 	ld	(hl-), a
                                    389 ;setupPair	HL
      000141 2A                     390 	ld	a, (hl+)
      000142 4F                     391 	ld	c, a
      000143 46                     392 	ld	b, (hl)
      000144 C5                     393 	push	bc
      000145 CDr00r00               394 	call	_initrand
      000148 E1                     395 	pop	hl
                                    396 ;main.c:68: printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
      000149 11r12r02               397 	ld	de, #___str_2
      00014C D5                     398 	push	de
      00014D CDr00r00               399 	call	_puts
      000150 E1                     400 	pop	hl
                                    401 ;main.c:70: line(80,0,80,fishingRod.yHook-16);
      000151 FAr04r00               402 	ld	a, (#_fishingRod + 0)
      000154 C6 F0                  403 	add	a, #0xf0
      000156 67                     404 	ld	h, a
      000157 2E 50                  405 	ld	l, #0x50
      000159 E5                     406 	push	hl
      00015A 21 50 00               407 	ld	hl, #0x50
      00015D E5                     408 	push	hl
      00015E CDr00r00               409 	call	_line
      000161 E8 04                  410 	add	sp, #4
                                    411 ;main.c:72: while(1) {
      000163                        412 00109$:
                                    413 ;main.c:73: wait_vbl_done();
      000163 CDr00r00               414 	call	_wait_vbl_done
                                    415 ;main.c:74: moveFishTo(&fish1, fish1.x + 1, fish1.y);
      000166 01r00r00               416 	ld	bc, #_fish1+0
      000169 69                     417 	ld	l, c
                                    418 ;	spillPairReg hl
                                    419 ;	spillPairReg hl
      00016A 60                     420 	ld	h, b
                                    421 ;	spillPairReg hl
                                    422 ;	spillPairReg hl
      00016B 23                     423 	inc	hl
      00016C 5E                     424 	ld	e, (hl)
      00016D 0A                     425 	ld	a, (bc)
      00016E 3C                     426 	inc	a
      00016F 63                     427 	ld	h, e
                                    428 ;	spillPairReg hl
                                    429 ;	spillPairReg hl
      000170 E5                     430 	push	hl
      000171 33                     431 	inc	sp
      000172 F5                     432 	push	af
      000173 33                     433 	inc	sp
      000174 C5                     434 	push	bc
      000175 CDr00r00               435 	call	_moveFishTo
      000178 E8 04                  436 	add	sp, #4
                                    437 ;main.c:75: switch(joypad()) {
      00017A CDr00r00               438 	call	_joypad
      00017D 7B                     439 	ld	a, e
                                    440 ;main.c:70: line(80,0,80,fishingRod.yHook-16);
      00017E 21r04r00               441 	ld	hl, #_fishingRod
      000181 6E                     442 	ld	l, (hl)
                                    443 ;	spillPairReg hl
                                    444 ;main.c:78: fishingRod.yHook -= 1;
      000182 4D                     445 	ld	c, l
                                    446 ;main.c:75: switch(joypad()) {
      000183 FE 04                  447 	cp	a, #0x04
      000185 28 06                  448 	jr	Z, 00101$
      000187 D6 08                  449 	sub	a, #0x08
      000189 28 40                  450 	jr	Z, 00104$
      00018B 18 61                  451 	jr	00107$
                                    452 ;main.c:76: case J_UP:
      00018D                        453 00101$:
                                    454 ;main.c:77: if(fishingRod.yHook>20) {
      00018D 3E 14                  455 	ld	a, #0x14
      00018F 95                     456 	sub	a, l
      000190 30 5C                  457 	jr	NC, 00107$
                                    458 ;main.c:78: fishingRod.yHook -= 1;
      000192 0D                     459 	dec	c
      000193 21r04r00               460 	ld	hl, #_fishingRod
      000196 71                     461 	ld	(hl), c
                                    462 ;main.c:80: color(WHITE, WHITE, SOLID);
      000197 AF                     463 	xor	a, a
      000198 0F                     464 	rrca
      000199 F5                     465 	push	af
      00019A AF                     466 	xor	a, a
      00019B F5                     467 	push	af
      00019C 33                     468 	inc	sp
      00019D CDr00r00               469 	call	_color
      0001A0 E8 03                  470 	add	sp, #3
                                    471 ;main.c:70: line(80,0,80,fishingRod.yHook-16);
      0001A2 FAr04r00               472 	ld	a, (#_fishingRod + 0)
                                    473 ;main.c:78: fishingRod.yHook -= 1;
                                    474 ;main.c:81: line(80, fishingRod.yHook-16, 80, fishingRod.yHook-14);
      0001A5 4F                     475 	ld	c, a
      0001A6 C6 F2                  476 	add	a, #0xf2
      0001A8 47                     477 	ld	b, a
      0001A9 79                     478 	ld	a, c
      0001AA C6 F0                  479 	add	a, #0xf0
      0001AC C5                     480 	push	bc
      0001AD 33                     481 	inc	sp
      0001AE 26 50                  482 	ld	h, #0x50
                                    483 ;	spillPairReg hl
                                    484 ;	spillPairReg hl
      0001B0 E5                     485 	push	hl
      0001B1 33                     486 	inc	sp
      0001B2 67                     487 	ld	h, a
      0001B3 2E 50                  488 	ld	l, #0x50
      0001B5 E5                     489 	push	hl
      0001B6 CDr00r00               490 	call	_line
      0001B9 E8 04                  491 	add	sp, #4
                                    492 ;main.c:82: color(BLACK, BLACK, SOLID);
      0001BB AF                     493 	xor	a, a
      0001BC 67                     494 	ld	h, a
      0001BD 2E 03                  495 	ld	l, #0x03
      0001BF E5                     496 	push	hl
      0001C0 3E 03                  497 	ld	a, #0x03
      0001C2 F5                     498 	push	af
      0001C3 33                     499 	inc	sp
      0001C4 CDr00r00               500 	call	_color
      0001C7 E8 03                  501 	add	sp, #3
                                    502 ;main.c:84: break;
      0001C9 18 23                  503 	jr	00107$
                                    504 ;main.c:85: case J_DOWN:
      0001CB                        505 00104$:
                                    506 ;main.c:86: if(fishingRod.yHook<152) {
      0001CB 7D                     507 	ld	a, l
      0001CC D6 98                  508 	sub	a, #0x98
      0001CE 30 1E                  509 	jr	NC, 00107$
                                    510 ;main.c:87: fishingRod.yHook += 1;
      0001D0 0C                     511 	inc	c
      0001D1 21r04r00               512 	ld	hl, #_fishingRod
      0001D4 71                     513 	ld	(hl), c
                                    514 ;main.c:70: line(80,0,80,fishingRod.yHook-16);
      0001D5 FAr04r00               515 	ld	a, (#_fishingRod + 0)
                                    516 ;main.c:78: fishingRod.yHook -= 1;
                                    517 ;main.c:88: line(80, fishingRod.yHook-16, 80, fishingRod.yHook-17);
      0001D8 4F                     518 	ld	c, a
      0001D9 C6 EF                  519 	add	a, #0xef
      0001DB 47                     520 	ld	b, a
      0001DC 79                     521 	ld	a, c
      0001DD C6 F0                  522 	add	a, #0xf0
      0001DF C5                     523 	push	bc
      0001E0 33                     524 	inc	sp
      0001E1 26 50                  525 	ld	h, #0x50
                                    526 ;	spillPairReg hl
                                    527 ;	spillPairReg hl
      0001E3 E5                     528 	push	hl
      0001E4 33                     529 	inc	sp
      0001E5 67                     530 	ld	h, a
      0001E6 2E 50                  531 	ld	l, #0x50
      0001E8 E5                     532 	push	hl
      0001E9 CDr00r00               533 	call	_line
      0001EC E8 04                  534 	add	sp, #4
                                    535 ;main.c:91: }
      0001EE                        536 00107$:
                                    537 ;main.c:92: move_sprite(fishingRod.hookSprite, 84,fishingRod.yHook);
      0001EE 21r04r00               538 	ld	hl, #_fishingRod
      0001F1 4E                     539 	ld	c, (hl)
      0001F2 21r05r00               540 	ld	hl, #(_fishingRod + 1)
                                    541 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      0001F5 6E                     542 	ld	l, (hl)
                                    543 ;	spillPairReg hl
                                    544 ;	spillPairReg hl
      0001F6 26 00                  545 	ld	h, #0x00
                                    546 ;	spillPairReg hl
                                    547 ;	spillPairReg hl
      0001F8 29                     548 	add	hl, hl
      0001F9 29                     549 	add	hl, hl
      0001FA 11r00r00               550 	ld	de, #_shadow_OAM
      0001FD 19                     551 	add	hl, de
                                    552 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      0001FE 79                     553 	ld	a, c
      0001FF 22                     554 	ld	(hl+), a
      000200 36 54                  555 	ld	(hl), #0x54
                                    556 ;main.c:92: move_sprite(fishingRod.hookSprite, 84,fishingRod.yHook);
                                    557 ;main.c:94: }
      000202 C3r63r01               558 	jp	00109$
      000205                        559 ___str_0:
      000205 50 52 45 53 53 20 53   560 	.ascii "PRESS START!"
             54 41 52 54 21
      000211 00                     561 	.db 0x00
      000212                        562 ___str_2:
      000212 0A                     563 	.db 0x0a
      000213 0A                     564 	.db 0x0a
      000214 0A                     565 	.db 0x0a
      000215 0A                     566 	.db 0x0a
      000216 0A                     567 	.db 0x0a
      000217 0A                     568 	.db 0x0a
      000218 0A                     569 	.db 0x0a
      000219 0A                     570 	.db 0x0a
      00021A 0A                     571 	.db 0x0a
      00021B 0A                     572 	.db 0x0a
      00021C 0A                     573 	.db 0x0a
      00021D 0A                     574 	.db 0x0a
      00021E 0A                     575 	.db 0x0a
      00021F 0A                     576 	.db 0x0a
      000220 0A                     577 	.db 0x0a
      000221 0A                     578 	.db 0x0a
      000222 0A                     579 	.db 0x0a
      000223 00                     580 	.db 0x00
                                    581 	.area _CODE
                                    582 	.area _INITIALIZER
      000000                        583 __xinit__i:
      000000 00                     584 	.db #0x00	; 0
                                    585 	.area _CABS (ABS)
