                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.6 #12439 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _handleInput
                                     13 	.globl _collideWith
                                     14 	.globl _storeFish
                                     15 	.globl _onCatchFish
                                     16 	.globl _doesCollide
                                     17 	.globl _init
                                     18 	.globl _moveCanTo
                                     19 	.globl _moveFishTo
                                     20 	.globl _randomRange
                                     21 	.globl _rand
                                     22 	.globl _initrand
                                     23 	.globl _puts
                                     24 	.globl _color
                                     25 	.globl _line
                                     26 	.globl _set_sprite_data
                                     27 	.globl _wait_vbl_done
                                     28 	.globl _reset
                                     29 	.globl _waitpad
                                     30 	.globl _joypad
                                     31 	.globl _caughtFishIndex
                                     32 	.globl _score
                                     33 	.globl _seed
                                     34 	.globl _fishingRod
                                     35 	.globl _canArr
                                     36 	.globl _fishArr
                                     37 	.globl _spriteSize
                                     38 	.globl _hookX
                                     39 	.globl _scoreHigherDigit
                                     40 	.globl _scoreLowerDigit
                                     41 	.globl _NUMBERS
                                     42 	.globl _CAN
                                     43 	.globl _ROD
                                     44 	.globl _FISH
                                     45 ;--------------------------------------------------------
                                     46 ; special function registers
                                     47 ;--------------------------------------------------------
                                     48 ;--------------------------------------------------------
                                     49 ; ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area _DATA
      000000                         52 _fishArr::
      000000                         53 	.ds 5
      000005                         54 _canArr::
      000005                         55 	.ds 9
      00000E                         56 _fishingRod::
      00000E                         57 	.ds 4
      000012                         58 _seed::
      000012                         59 	.ds 2
                                     60 ;--------------------------------------------------------
                                     61 ; ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area _INITIALIZED
      000000                         64 _score::
      000000                         65 	.ds 1
      000001                         66 _caughtFishIndex::
      000001                         67 	.ds 1
                                     68 ;--------------------------------------------------------
                                     69 ; absolute external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area _DABS (ABS)
                                     72 ;--------------------------------------------------------
                                     73 ; global & static initialisations
                                     74 ;--------------------------------------------------------
                                     75 	.area _HOME
                                     76 	.area _GSINIT
                                     77 	.area _GSFINAL
                                     78 	.area _GSINIT
                                     79 ;--------------------------------------------------------
                                     80 ; Home
                                     81 ;--------------------------------------------------------
                                     82 	.area _HOME
                                     83 	.area _HOME
                                     84 ;--------------------------------------------------------
                                     85 ; code
                                     86 ;--------------------------------------------------------
                                     87 	.area _CODE
                                     88 ;main.c:51: UINT8 randomRange(UINT8 start, UINT8 end) {
                                     89 ;	---------------------------------
                                     90 ; Function randomRange
                                     91 ; ---------------------------------
      000000                         92 _randomRange::
                                     93 ;main.c:52: return start + ((UINT8)rand()) % (end - start + (UINT8)1);
      000000 CDr00r00                94 	call	_rand
      000003 F8 03                   95 	ldhl	sp,	#3
      000005 3A                      96 	ld	a, (hl-)
      000006 16 00                   97 	ld	d, #0x00
      000008 4E                      98 	ld	c, (hl)
      000009 06 00                   99 	ld	b, #0x00
      00000B 91                     100 	sub	a, c
      00000C 4F                     101 	ld	c, a
      00000D 7A                     102 	ld	a, d
      00000E 98                     103 	sbc	a, b
      00000F 47                     104 	ld	b, a
      000010 03                     105 	inc	bc
      000011 16 00                  106 	ld	d, #0x00
      000013 C5                     107 	push	bc
      000014 D5                     108 	push	de
      000015 CDr00r00               109 	call	__modsint
      000018 E8 04                  110 	add	sp, #4
      00001A F8 02                  111 	ldhl	sp,	#2
      00001C 7E                     112 	ld	a, (hl)
      00001D 83                     113 	add	a, e
      00001E 5F                     114 	ld	e, a
                                    115 ;main.c:53: }
      00001F C9                     116 	ret
      000020                        117 _FISH:
      000020 00                     118 	.db #0x00	; 0
      000021 F0                     119 	.db #0xf0	; 240
      000022 F0                     120 	.db #0xf0	; 240
      000023 0C                     121 	.db #0x0c	; 12
      000024 FC                     122 	.db #0xfc	; 252
      000025 02                     123 	.db #0x02	; 2
      000026 FE                     124 	.db #0xfe	; 254
      000027 05                     125 	.db #0x05	; 5
      000028 FE                     126 	.db #0xfe	; 254
      000029 01                     127 	.db #0x01	; 1
      00002A FC                     128 	.db #0xfc	; 252
      00002B 02                     129 	.db #0x02	; 2
      00002C F0                     130 	.db #0xf0	; 240
      00002D 0C                     131 	.db #0x0c	; 12
      00002E 00                     132 	.db #0x00	; 0
      00002F F0                     133 	.db #0xf0	; 240
      000030 00                     134 	.db #0x00	; 0
      000031 08                     135 	.db #0x08	; 8
      000032 08                     136 	.db #0x08	; 8
      000033 15                     137 	.db #0x15	; 21
      000034 1D                     138 	.db #0x1d	; 29
      000035 22                     139 	.db #0x22	; 34
      000036 1F                     140 	.db #0x1f	; 31
      000037 20                     141 	.db #0x20	; 32
      000038 1F                     142 	.db #0x1f	; 31
      000039 20                     143 	.db #0x20	; 32
      00003A 1D                     144 	.db #0x1d	; 29
      00003B 22                     145 	.db #0x22	; 34
      00003C 08                     146 	.db #0x08	; 8
      00003D 15                     147 	.db #0x15	; 21
      00003E 00                     148 	.db #0x00	; 0
      00003F 08                     149 	.db #0x08	; 8
      000040                        150 _ROD:
      000040 00                     151 	.db #0x00	; 0
      000041 08                     152 	.db #0x08	; 8
      000042 00                     153 	.db #0x00	; 0
      000043 08                     154 	.db #0x08	; 8
      000044 00                     155 	.db #0x00	; 0
      000045 04                     156 	.db #0x04	; 4
      000046 00                     157 	.db #0x00	; 0
      000047 02                     158 	.db #0x02	; 2
      000048 00                     159 	.db #0x00	; 0
      000049 02                     160 	.db #0x02	; 2
      00004A 00                     161 	.db #0x00	; 0
      00004B 02                     162 	.db #0x02	; 2
      00004C 00                     163 	.db #0x00	; 0
      00004D 24                     164 	.db #0x24	; 36
      00004E 00                     165 	.db #0x00	; 0
      00004F 18                     166 	.db #0x18	; 24
      000050 18                     167 	.db #0x18	; 24
      000051 00                     168 	.db #0x00	; 0
      000052 1C                     169 	.db #0x1c	; 28
      000053 08                     170 	.db #0x08	; 8
      000054 1E                     171 	.db #0x1e	; 30
      000055 00                     172 	.db #0x00	; 0
      000056 07                     173 	.db #0x07	; 7
      000057 00                     174 	.db #0x00	; 0
      000058 43                     175 	.db #0x43	; 67	'C'
      000059 00                     176 	.db #0x00	; 0
      00005A E7                     177 	.db #0xe7	; 231
      00005B 00                     178 	.db #0x00	; 0
      00005C 7E                     179 	.db #0x7e	; 126
      00005D 00                     180 	.db #0x00	; 0
      00005E 3C                     181 	.db #0x3c	; 60
      00005F 00                     182 	.db #0x00	; 0
      000060                        183 _CAN:
      000060 00                     184 	.db #0x00	; 0
      000061 01                     185 	.db #0x01	; 1
      000062 00                     186 	.db #0x00	; 0
      000063 02                     187 	.db #0x02	; 2
      000064 00                     188 	.db #0x00	; 0
      000065 12                     189 	.db #0x12	; 18
      000066 10                     190 	.db #0x10	; 16
      000067 2A                     191 	.db #0x2a	; 42
      000068 38                     192 	.db #0x38	; 56	'8'
      000069 44                     193 	.db #0x44	; 68	'D'
      00006A 70                     194 	.db #0x70	; 112	'p'
      00006B 88                     195 	.db #0x88	; 136
      00006C 20                     196 	.db #0x20	; 32
      00006D 50                     197 	.db #0x50	; 80	'P'
      00006E 00                     198 	.db #0x00	; 0
      00006F 20                     199 	.db #0x20	; 32
      000070                        200 _NUMBERS:
      000070 3C                     201 	.db #0x3c	; 60
      000071 3C                     202 	.db #0x3c	; 60
      000072 42                     203 	.db #0x42	; 66	'B'
      000073 42                     204 	.db #0x42	; 66	'B'
      000074 85                     205 	.db #0x85	; 133
      000075 85                     206 	.db #0x85	; 133
      000076 89                     207 	.db #0x89	; 137
      000077 89                     208 	.db #0x89	; 137
      000078 91                     209 	.db #0x91	; 145
      000079 91                     210 	.db #0x91	; 145
      00007A A1                     211 	.db #0xa1	; 161
      00007B A1                     212 	.db #0xa1	; 161
      00007C 42                     213 	.db #0x42	; 66	'B'
      00007D 42                     214 	.db #0x42	; 66	'B'
      00007E 3C                     215 	.db #0x3c	; 60
      00007F 3C                     216 	.db #0x3c	; 60
      000080 18                     217 	.db #0x18	; 24
      000081 18                     218 	.db #0x18	; 24
      000082 28                     219 	.db #0x28	; 40
      000083 28                     220 	.db #0x28	; 40
      000084 08                     221 	.db #0x08	; 8
      000085 08                     222 	.db #0x08	; 8
      000086 08                     223 	.db #0x08	; 8
      000087 08                     224 	.db #0x08	; 8
      000088 08                     225 	.db #0x08	; 8
      000089 08                     226 	.db #0x08	; 8
      00008A 08                     227 	.db #0x08	; 8
      00008B 08                     228 	.db #0x08	; 8
      00008C 08                     229 	.db #0x08	; 8
      00008D 08                     230 	.db #0x08	; 8
      00008E 3E                     231 	.db #0x3e	; 62
      00008F 3E                     232 	.db #0x3e	; 62
      000090 7E                     233 	.db #0x7e	; 126
      000091 7E                     234 	.db #0x7e	; 126
      000092 81                     235 	.db #0x81	; 129
      000093 81                     236 	.db #0x81	; 129
      000094 01                     237 	.db #0x01	; 1
      000095 01                     238 	.db #0x01	; 1
      000096 06                     239 	.db #0x06	; 6
      000097 06                     240 	.db #0x06	; 6
      000098 18                     241 	.db #0x18	; 24
      000099 18                     242 	.db #0x18	; 24
      00009A 60                     243 	.db #0x60	; 96
      00009B 60                     244 	.db #0x60	; 96
      00009C 81                     245 	.db #0x81	; 129
      00009D 81                     246 	.db #0x81	; 129
      00009E FF                     247 	.db #0xff	; 255
      00009F FF                     248 	.db #0xff	; 255
      0000A0 7E                     249 	.db #0x7e	; 126
      0000A1 7E                     250 	.db #0x7e	; 126
      0000A2 81                     251 	.db #0x81	; 129
      0000A3 81                     252 	.db #0x81	; 129
      0000A4 81                     253 	.db #0x81	; 129
      0000A5 81                     254 	.db #0x81	; 129
      0000A6 0E                     255 	.db #0x0e	; 14
      0000A7 0E                     256 	.db #0x0e	; 14
      0000A8 01                     257 	.db #0x01	; 1
      0000A9 01                     258 	.db #0x01	; 1
      0000AA 81                     259 	.db #0x81	; 129
      0000AB 81                     260 	.db #0x81	; 129
      0000AC 81                     261 	.db #0x81	; 129
      0000AD 81                     262 	.db #0x81	; 129
      0000AE 7E                     263 	.db #0x7e	; 126
      0000AF 7E                     264 	.db #0x7e	; 126
      0000B0 06                     265 	.db #0x06	; 6
      0000B1 06                     266 	.db #0x06	; 6
      0000B2 0A                     267 	.db #0x0a	; 10
      0000B3 0A                     268 	.db #0x0a	; 10
      0000B4 12                     269 	.db #0x12	; 18
      0000B5 12                     270 	.db #0x12	; 18
      0000B6 22                     271 	.db #0x22	; 34
      0000B7 22                     272 	.db #0x22	; 34
      0000B8 42                     273 	.db #0x42	; 66	'B'
      0000B9 42                     274 	.db #0x42	; 66	'B'
      0000BA FF                     275 	.db #0xff	; 255
      0000BB FF                     276 	.db #0xff	; 255
      0000BC 02                     277 	.db #0x02	; 2
      0000BD 02                     278 	.db #0x02	; 2
      0000BE 07                     279 	.db #0x07	; 7
      0000BF 07                     280 	.db #0x07	; 7
      0000C0 FF                     281 	.db #0xff	; 255
      0000C1 FF                     282 	.db #0xff	; 255
      0000C2 81                     283 	.db #0x81	; 129
      0000C3 81                     284 	.db #0x81	; 129
      0000C4 80                     285 	.db #0x80	; 128
      0000C5 80                     286 	.db #0x80	; 128
      0000C6 FE                     287 	.db #0xfe	; 254
      0000C7 FE                     288 	.db #0xfe	; 254
      0000C8 01                     289 	.db #0x01	; 1
      0000C9 01                     290 	.db #0x01	; 1
      0000CA 81                     291 	.db #0x81	; 129
      0000CB 81                     292 	.db #0x81	; 129
      0000CC 81                     293 	.db #0x81	; 129
      0000CD 81                     294 	.db #0x81	; 129
      0000CE 7E                     295 	.db #0x7e	; 126
      0000CF 7E                     296 	.db #0x7e	; 126
      0000D0 7E                     297 	.db #0x7e	; 126
      0000D1 7E                     298 	.db #0x7e	; 126
      0000D2 81                     299 	.db #0x81	; 129
      0000D3 81                     300 	.db #0x81	; 129
      0000D4 80                     301 	.db #0x80	; 128
      0000D5 80                     302 	.db #0x80	; 128
      0000D6 FE                     303 	.db #0xfe	; 254
      0000D7 FE                     304 	.db #0xfe	; 254
      0000D8 81                     305 	.db #0x81	; 129
      0000D9 81                     306 	.db #0x81	; 129
      0000DA 81                     307 	.db #0x81	; 129
      0000DB 81                     308 	.db #0x81	; 129
      0000DC 81                     309 	.db #0x81	; 129
      0000DD 81                     310 	.db #0x81	; 129
      0000DE 7E                     311 	.db #0x7e	; 126
      0000DF 7E                     312 	.db #0x7e	; 126
      0000E0 FF                     313 	.db #0xff	; 255
      0000E1 FF                     314 	.db #0xff	; 255
      0000E2 81                     315 	.db #0x81	; 129
      0000E3 81                     316 	.db #0x81	; 129
      0000E4 02                     317 	.db #0x02	; 2
      0000E5 02                     318 	.db #0x02	; 2
      0000E6 04                     319 	.db #0x04	; 4
      0000E7 04                     320 	.db #0x04	; 4
      0000E8 08                     321 	.db #0x08	; 8
      0000E9 08                     322 	.db #0x08	; 8
      0000EA 10                     323 	.db #0x10	; 16
      0000EB 10                     324 	.db #0x10	; 16
      0000EC 10                     325 	.db #0x10	; 16
      0000ED 10                     326 	.db #0x10	; 16
      0000EE 38                     327 	.db #0x38	; 56	'8'
      0000EF 38                     328 	.db #0x38	; 56	'8'
      0000F0 7E                     329 	.db #0x7e	; 126
      0000F1 7E                     330 	.db #0x7e	; 126
      0000F2 81                     331 	.db #0x81	; 129
      0000F3 81                     332 	.db #0x81	; 129
      0000F4 81                     333 	.db #0x81	; 129
      0000F5 81                     334 	.db #0x81	; 129
      0000F6 7E                     335 	.db #0x7e	; 126
      0000F7 7E                     336 	.db #0x7e	; 126
      0000F8 81                     337 	.db #0x81	; 129
      0000F9 81                     338 	.db #0x81	; 129
      0000FA 81                     339 	.db #0x81	; 129
      0000FB 81                     340 	.db #0x81	; 129
      0000FC 81                     341 	.db #0x81	; 129
      0000FD 81                     342 	.db #0x81	; 129
      0000FE 7E                     343 	.db #0x7e	; 126
      0000FF 7E                     344 	.db #0x7e	; 126
      000100 7E                     345 	.db #0x7e	; 126
      000101 7E                     346 	.db #0x7e	; 126
      000102 81                     347 	.db #0x81	; 129
      000103 81                     348 	.db #0x81	; 129
      000104 81                     349 	.db #0x81	; 129
      000105 81                     350 	.db #0x81	; 129
      000106 81                     351 	.db #0x81	; 129
      000107 81                     352 	.db #0x81	; 129
      000108 7F                     353 	.db #0x7f	; 127
      000109 7F                     354 	.db #0x7f	; 127
      00010A 01                     355 	.db #0x01	; 1
      00010B 01                     356 	.db #0x01	; 1
      00010C 81                     357 	.db #0x81	; 129
      00010D 81                     358 	.db #0x81	; 129
      00010E 7E                     359 	.db #0x7e	; 126
      00010F 7E                     360 	.db #0x7e	; 126
      000110                        361 _scoreLowerDigit:
      000110 0A                     362 	.db #0x0a	; 10
      000111                        363 _scoreHigherDigit:
      000111 0B                     364 	.db #0x0b	; 11
      000112                        365 _hookX:
      000112 54                     366 	.db #0x54	; 84	'T'
      000113                        367 _spriteSize:
      000113 08                     368 	.db #0x08	; 8
                                    369 ;main.c:56: void moveFishTo(Fish *f, UINT8 x, UINT8 y) {
                                    370 ;	---------------------------------
                                    371 ; Function moveFishTo
                                    372 ; ---------------------------------
      000114                        373 _moveFishTo::
      000114 E8 FC                  374 	add	sp, #-4
                                    375 ;main.c:57: if(f->index == caughtFishIndex) {
      000116 F8 06                  376 	ldhl	sp,	#6
      000118 2A                     377 	ld	a, (hl+)
      000119 4F                     378 	ld	c, a
      00011A 46                     379 	ld	b, (hl)
      00011B 21 04 00               380 	ld	hl, #0x0004
      00011E 09                     381 	add	hl, bc
      00011F 5E                     382 	ld	e, (hl)
      000120 16 00                  383 	ld	d, #0x00
                                    384 ;setupPair	HL
      000122 FAr01r00               385 	ld	a, (#_caughtFishIndex)
      000125 F8 02                  386 	ldhl	sp,	#2
      000127 22                     387 	ld	(hl+), a
      000128 07                     388 	rlca
      000129 9F                     389 	sbc	a, a
      00012A 77                     390 	ld	(hl), a
                                    391 ;main.c:59: f->y = randomRange(40, 150);
      00012B 69                     392 	ld	l, c
      00012C 60                     393 	ld	h, b
      00012D 23                     394 	inc	hl
      00012E 33                     395 	inc	sp
      00012F 33                     396 	inc	sp
      000130 E5                     397 	push	hl
                                    398 ;main.c:57: if(f->index == caughtFishIndex) {
      000131 F8 02                  399 	ldhl	sp,	#2
      000133 7E                     400 	ld	a, (hl)
      000134 93                     401 	sub	a, e
      000135 20 17                  402 	jr	NZ, 00104$
      000137 23                     403 	inc	hl
      000138 7E                     404 	ld	a, (hl)
      000139 92                     405 	sub	a, d
      00013A 20 12                  406 	jr	NZ, 00104$
                                    407 ;main.c:58: f->x = 0;
      00013C AF                     408 	xor	a, a
      00013D 02                     409 	ld	(bc), a
                                    410 ;main.c:59: f->y = randomRange(40, 150);
      00013E C5                     411 	push	bc
      00013F 21 28 96               412 	ld	hl, #0x9628
      000142 E5                     413 	push	hl
      000143 CDr00r00               414 	call	_randomRange
      000146 E1                     415 	pop	hl
      000147 7B                     416 	ld	a, e
      000148 C1                     417 	pop	bc
      000149 E1                     418 	pop	hl
      00014A E5                     419 	push	hl
      00014B 77                     420 	ld	(hl), a
      00014C 18 1D                  421 	jr	00105$
      00014E                        422 00104$:
                                    423 ;main.c:61: f->x = x;
      00014E F8 08                  424 	ldhl	sp,	#8
                                    425 ;main.c:62: f->y = y;
      000150 2A                     426 	ld	a, (hl+)
      000151 02                     427 	ld	(bc), a
      000152 D1                     428 	pop	de
      000153 D5                     429 	push	de
                                    430 ;main.c:63: if(f->x > 160) {
      000154 3A                     431 	ld	a, (hl-)
      000155 12                     432 	ld	(de), a
      000156 3E A0                  433 	ld	a, #0xa0
      000158 96                     434 	sub	a, (hl)
      000159 30 10                  435 	jr	NC, 00105$
                                    436 ;main.c:64: f->y = randomRange(40, 150);
      00015B C5                     437 	push	bc
      00015C 21 28 96               438 	ld	hl, #0x9628
      00015F E5                     439 	push	hl
      000160 CDr00r00               440 	call	_randomRange
      000163 E1                     441 	pop	hl
      000164 7B                     442 	ld	a, e
      000165 C1                     443 	pop	bc
      000166 E1                     444 	pop	hl
      000167 E5                     445 	push	hl
      000168 77                     446 	ld	(hl), a
                                    447 ;main.c:65: f->x = 0;
      000169 AF                     448 	xor	a, a
      00016A 02                     449 	ld	(bc), a
      00016B                        450 00105$:
                                    451 ;main.c:68: move_sprite(f->sprites[0], f->x, f->y);
      00016B D1                     452 	pop	de
      00016C D5                     453 	push	de
      00016D 1A                     454 	ld	a, (de)
      00016E F8 02                  455 	ldhl	sp,	#2
      000170 22                     456 	ld	(hl+), a
      000171 0A                     457 	ld	a, (bc)
      000172 77                     458 	ld	(hl), a
      000173 69                     459 	ld	l, c
                                    460 ;	spillPairReg hl
                                    461 ;	spillPairReg hl
      000174 60                     462 	ld	h, b
                                    463 ;	spillPairReg hl
                                    464 ;	spillPairReg hl
      000175 23                     465 	inc	hl
      000176 23                     466 	inc	hl
      000177 5E                     467 	ld	e, (hl)
                                    468 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      000178 26 00                  469 	ld	h, #0x00
                                    470 ;	spillPairReg hl
                                    471 ;	spillPairReg hl
      00017A 6B                     472 	ld	l, e
      00017B 29                     473 	add	hl, hl
      00017C 29                     474 	add	hl, hl
      00017D 11r00r00               475 	ld	de, #_shadow_OAM
      000180 19                     476 	add	hl, de
      000181 5D                     477 	ld	e, l
      000182 54                     478 	ld	d, h
                                    479 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      000183 F8 02                  480 	ldhl	sp,	#2
      000185 2A                     481 	ld	a, (hl+)
      000186 12                     482 	ld	(de), a
      000187 13                     483 	inc	de
      000188 7E                     484 	ld	a, (hl)
      000189 12                     485 	ld	(de), a
                                    486 ;main.c:69: move_sprite(f->sprites[1], f->x - spriteSize, f->y);
      00018A D1                     487 	pop	de
      00018B D5                     488 	push	de
      00018C 1A                     489 	ld	a, (de)
      00018D 77                     490 	ld	(hl), a
      00018E 0A                     491 	ld	a, (bc)
                                    492 ;setupPair	HL
      00018F 21r13r01               493 	ld	hl, #_spriteSize
      000192 5E                     494 	ld	e, (hl)
      000193 93                     495 	sub	a, e
      000194 5F                     496 	ld	e, a
      000195 03                     497 	inc	bc
      000196 03                     498 	inc	bc
      000197 03                     499 	inc	bc
      000198 0A                     500 	ld	a, (bc)
                                    501 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      000199 6F                     502 	ld	l, a
      00019A 01r00r00               503 	ld	bc, #_shadow_OAM+0
                                    504 ;	spillPairReg hl
                                    505 ;	spillPairReg hl
      00019D 26 00                  506 	ld	h, #0x00
                                    507 ;	spillPairReg hl
                                    508 ;	spillPairReg hl
      00019F 29                     509 	add	hl, hl
      0001A0 29                     510 	add	hl, hl
      0001A1 09                     511 	add	hl, bc
      0001A2 4D                     512 	ld	c, l
      0001A3 44                     513 	ld	b, h
                                    514 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      0001A4 F8 03                  515 	ldhl	sp,	#3
      0001A6 7E                     516 	ld	a, (hl)
      0001A7 02                     517 	ld	(bc), a
      0001A8 03                     518 	inc	bc
      0001A9 7B                     519 	ld	a, e
      0001AA 02                     520 	ld	(bc), a
                                    521 ;main.c:69: move_sprite(f->sprites[1], f->x - spriteSize, f->y);
                                    522 ;main.c:70: }
      0001AB E8 04                  523 	add	sp, #4
      0001AD C9                     524 	ret
                                    525 ;main.c:72: void moveCanTo(Can *c, UINT8 x, UINT8 y) {
                                    526 ;	---------------------------------
                                    527 ; Function moveCanTo
                                    528 ; ---------------------------------
      0001AE                        529 _moveCanTo::
      0001AE 3B                     530 	dec	sp
                                    531 ;main.c:73: c->x = x;
      0001AF F8 03                  532 	ldhl	sp,	#3
      0001B1 2A                     533 	ld	a, (hl+)
      0001B2 5F                     534 	ld	e, a
      0001B3 2A                     535 	ld	a, (hl+)
      0001B4 57                     536 	ld	d, a
                                    537 ;main.c:74: c->y = y;
      0001B5 2A                     538 	ld	a, (hl+)
      0001B6 12                     539 	ld	(de), a
      0001B7 4B                     540 	ld	c, e
      0001B8 42                     541 	ld	b, d
      0001B9 03                     542 	inc	bc
                                    543 ;main.c:75: if(c->x > 160) {
      0001BA 3A                     544 	ld	a, (hl-)
      0001BB 02                     545 	ld	(bc), a
      0001BC 3E A0                  546 	ld	a, #0xa0
      0001BE 96                     547 	sub	a, (hl)
      0001BF 30 10                  548 	jr	NC, 00102$
                                    549 ;main.c:76: c->y = randomRange(40, 150);
      0001C1 C5                     550 	push	bc
      0001C2 D5                     551 	push	de
      0001C3 21 28 96               552 	ld	hl, #0x9628
      0001C6 E5                     553 	push	hl
      0001C7 CDr00r00               554 	call	_randomRange
      0001CA E1                     555 	pop	hl
      0001CB 7B                     556 	ld	a, e
      0001CC D1                     557 	pop	de
      0001CD C1                     558 	pop	bc
      0001CE 02                     559 	ld	(bc), a
                                    560 ;main.c:77: c->x = 0;
      0001CF AF                     561 	xor	a, a
      0001D0 12                     562 	ld	(de), a
      0001D1                        563 00102$:
                                    564 ;main.c:79: move_sprite(c->sprite, c->x, c->y);
      0001D1 0A                     565 	ld	a, (bc)
      0001D2 4F                     566 	ld	c, a
      0001D3 1A                     567 	ld	a, (de)
      0001D4 F8 00                  568 	ldhl	sp,	#0
      0001D6 77                     569 	ld	(hl), a
      0001D7 13                     570 	inc	de
      0001D8 13                     571 	inc	de
      0001D9 1A                     572 	ld	a, (de)
                                    573 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      0001DA 6F                     574 	ld	l, a
                                    575 ;	spillPairReg hl
                                    576 ;	spillPairReg hl
      0001DB 26 00                  577 	ld	h, #0x00
                                    578 ;	spillPairReg hl
                                    579 ;	spillPairReg hl
      0001DD 29                     580 	add	hl, hl
      0001DE 29                     581 	add	hl, hl
      0001DF 11r00r00               582 	ld	de, #_shadow_OAM
      0001E2 19                     583 	add	hl, de
                                    584 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      0001E3 79                     585 	ld	a, c
      0001E4 22                     586 	ld	(hl+), a
      0001E5 4D                     587 	ld	c, l
      0001E6 44                     588 	ld	b, h
      0001E7 F8 00                  589 	ldhl	sp,	#0
      0001E9 7E                     590 	ld	a, (hl)
      0001EA 02                     591 	ld	(bc), a
                                    592 ;main.c:79: move_sprite(c->sprite, c->x, c->y);
                                    593 ;main.c:80: }
      0001EB 33                     594 	inc	sp
      0001EC C9                     595 	ret
                                    596 ;main.c:82: void init() {
                                    597 ;	---------------------------------
                                    598 ; Function init
                                    599 ; ---------------------------------
      0001ED                        600 _init::
                                    601 ;main.c:84: fishArr[0].sprites[0] = 1;
      0001ED 01r02r00               602 	ld	bc, #_fishArr + 2
      0001F0 3E 01                  603 	ld	a, #0x01
      0001F2 02                     604 	ld	(bc), a
                                    605 ;main.c:85: fishArr[0].sprites[1] = 2;
      0001F3 21r03r00               606 	ld	hl, #(_fishArr + 3)
      0001F6 36 02                  607 	ld	(hl), #0x02
                                    608 ;main.c:86: fishArr[0].index = 0;
      0001F8 21r04r00               609 	ld	hl, #(_fishArr + 4)
      0001FB 36 00                  610 	ld	(hl), #0x00
                                    611 ;main.c:87: set_sprite_data(1, 2, FISH);
      0001FD 11r20r00               612 	ld	de, #_FISH
      000200 D5                     613 	push	de
      000201 21 01 02               614 	ld	hl, #0x201
      000204 E5                     615 	push	hl
      000205 CDr00r00               616 	call	_set_sprite_data
      000208 E8 04                  617 	add	sp, #4
                                    618 ;main.c:88: set_sprite_tile(fishArr[0].sprites[0], 1);
      00020A 0A                     619 	ld	a, (bc)
      00020B 4F                     620 	ld	c, a
                                    621 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      00020C 26 00                  622 	ld	h, #0x00
                                    623 ;	spillPairReg hl
                                    624 ;	spillPairReg hl
      00020E 69                     625 	ld	l, c
      00020F 29                     626 	add	hl, hl
      000210 29                     627 	add	hl, hl
      000211 11r00r00               628 	ld	de, #_shadow_OAM
      000214 19                     629 	add	hl, de
      000215 23                     630 	inc	hl
      000216 23                     631 	inc	hl
      000217 36 01                  632 	ld	(hl), #0x01
                                    633 ;main.c:89: set_sprite_tile(fishArr[0].sprites[1], 2);
      000219 21r03r00               634 	ld	hl, #(_fishArr + 3)
      00021C 4E                     635 	ld	c, (hl)
                                    636 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      00021D 26 00                  637 	ld	h, #0x00
                                    638 ;	spillPairReg hl
                                    639 ;	spillPairReg hl
      00021F 69                     640 	ld	l, c
      000220 29                     641 	add	hl, hl
      000221 29                     642 	add	hl, hl
      000222 11r00r00               643 	ld	de, #_shadow_OAM
      000225 19                     644 	add	hl, de
      000226 23                     645 	inc	hl
      000227 23                     646 	inc	hl
      000228 36 02                  647 	ld	(hl), #0x02
                                    648 ;main.c:91: fishingRod.yHook = 20;
      00022A 21r0Er00               649 	ld	hl, #_fishingRod
      00022D 36 14                  650 	ld	(hl), #0x14
                                    651 ;main.c:92: fishingRod.hookSprite = 3;
      00022F 01r0Fr00               652 	ld	bc, #_fishingRod + 1
      000232 3E 03                  653 	ld	a, #0x03
      000234 02                     654 	ld	(bc), a
                                    655 ;main.c:93: fishingRod.hookSpriteFish = 4;
      000235 21r10r00               656 	ld	hl, #(_fishingRod + 2)
      000238 36 04                  657 	ld	(hl), #0x04
                                    658 ;main.c:94: fishingRod.spriteTile = 3;
      00023A 21r11r00               659 	ld	hl, #(_fishingRod + 3)
      00023D 36 03                  660 	ld	(hl), #0x03
                                    661 ;main.c:95: set_sprite_data(3, 4, ROD);
      00023F 11r40r00               662 	ld	de, #_ROD
      000242 D5                     663 	push	de
      000243 21 03 04               664 	ld	hl, #0x403
      000246 E5                     665 	push	hl
      000247 CDr00r00               666 	call	_set_sprite_data
      00024A E8 04                  667 	add	sp, #4
                                    668 ;main.c:96: set_sprite_tile(fishingRod.spriteTile, fishingRod.hookSprite);
      00024C 0A                     669 	ld	a, (bc)
      00024D 4F                     670 	ld	c, a
      00024E 21r11r00               671 	ld	hl, #(_fishingRod + 3)
                                    672 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      000251 6E                     673 	ld	l, (hl)
                                    674 ;	spillPairReg hl
                                    675 ;	spillPairReg hl
      000252 26 00                  676 	ld	h, #0x00
                                    677 ;	spillPairReg hl
                                    678 ;	spillPairReg hl
      000254 29                     679 	add	hl, hl
      000255 29                     680 	add	hl, hl
      000256 11r00r00               681 	ld	de, #_shadow_OAM
      000259 19                     682 	add	hl, de
      00025A 23                     683 	inc	hl
      00025B 23                     684 	inc	hl
      00025C 71                     685 	ld	(hl), c
                                    686 ;main.c:98: set_sprite_data(5, 5, CAN);
      00025D 11r60r00               687 	ld	de, #_CAN
      000260 D5                     688 	push	de
      000261 21 05 05               689 	ld	hl, #0x505
      000264 E5                     690 	push	hl
      000265 CDr00r00               691 	call	_set_sprite_data
      000268 E8 04                  692 	add	sp, #4
                                    693 ;main.c:99: canArr[0].sprite = 5;
      00026A 01r07r00               694 	ld	bc, #_canArr + 2
      00026D 3E 05                  695 	ld	a, #0x05
      00026F 02                     696 	ld	(bc), a
                                    697 ;main.c:100: canArr[0].x = 50;
      000270 21r05r00               698 	ld	hl, #_canArr
      000273 36 32                  699 	ld	(hl), #0x32
                                    700 ;main.c:101: canArr[0].y = 125;
      000275 21r06r00               701 	ld	hl, #(_canArr + 1)
      000278 36 7D                  702 	ld	(hl), #0x7d
                                    703 ;main.c:102: set_sprite_tile(canArr[0].sprite, 5);
      00027A 0A                     704 	ld	a, (bc)
      00027B 4F                     705 	ld	c, a
                                    706 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      00027C 26 00                  707 	ld	h, #0x00
                                    708 ;	spillPairReg hl
                                    709 ;	spillPairReg hl
      00027E 69                     710 	ld	l, c
      00027F 29                     711 	add	hl, hl
      000280 29                     712 	add	hl, hl
      000281 11r00r00               713 	ld	de, #_shadow_OAM
      000284 19                     714 	add	hl, de
      000285 23                     715 	inc	hl
      000286 23                     716 	inc	hl
      000287 36 05                  717 	ld	(hl), #0x05
                                    718 ;main.c:103: canArr[1].sprite = 7;
      000289 01r0Ar00               719 	ld	bc, #_canArr + 5
      00028C 3E 07                  720 	ld	a, #0x07
      00028E 02                     721 	ld	(bc), a
                                    722 ;main.c:104: canArr[1].x = 90;
      00028F 21r08r00               723 	ld	hl, #(_canArr + 3)
      000292 36 5A                  724 	ld	(hl), #0x5a
                                    725 ;main.c:105: canArr[1].y = 145;
      000294 21r09r00               726 	ld	hl, #(_canArr + 4)
      000297 36 91                  727 	ld	(hl), #0x91
                                    728 ;main.c:106: set_sprite_tile(canArr[1].sprite, 5);
      000299 0A                     729 	ld	a, (bc)
      00029A 4F                     730 	ld	c, a
                                    731 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      00029B 26 00                  732 	ld	h, #0x00
                                    733 ;	spillPairReg hl
                                    734 ;	spillPairReg hl
      00029D 69                     735 	ld	l, c
      00029E 29                     736 	add	hl, hl
      00029F 29                     737 	add	hl, hl
      0002A0 11r00r00               738 	ld	de, #_shadow_OAM
      0002A3 19                     739 	add	hl, de
      0002A4 23                     740 	inc	hl
      0002A5 23                     741 	inc	hl
      0002A6 36 05                  742 	ld	(hl), #0x05
                                    743 ;main.c:107: canArr[2].sprite = 8;
      0002A8 01r0Dr00               744 	ld	bc, #_canArr + 8
      0002AB 3E 08                  745 	ld	a, #0x08
      0002AD 02                     746 	ld	(bc), a
                                    747 ;main.c:108: canArr[2].x = 70;
      0002AE 21r0Br00               748 	ld	hl, #(_canArr + 6)
      0002B1 36 46                  749 	ld	(hl), #0x46
                                    750 ;main.c:109: canArr[2].y = 105;
      0002B3 21r0Cr00               751 	ld	hl, #(_canArr + 7)
      0002B6 36 69                  752 	ld	(hl), #0x69
                                    753 ;main.c:110: set_sprite_tile(canArr[2].sprite, 5);
      0002B8 0A                     754 	ld	a, (bc)
      0002B9 4F                     755 	ld	c, a
                                    756 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      0002BA 26 00                  757 	ld	h, #0x00
                                    758 ;	spillPairReg hl
                                    759 ;	spillPairReg hl
      0002BC 69                     760 	ld	l, c
      0002BD 29                     761 	add	hl, hl
      0002BE 29                     762 	add	hl, hl
      0002BF 11r00r00               763 	ld	de, #_shadow_OAM
      0002C2 19                     764 	add	hl, de
      0002C3 23                     765 	inc	hl
      0002C4 23                     766 	inc	hl
      0002C5 36 05                  767 	ld	(hl), #0x05
                                    768 ;main.c:112: set_sprite_data(6, 15, NUMBERS);
      0002C7 11r70r00               769 	ld	de, #_NUMBERS
      0002CA D5                     770 	push	de
      0002CB 21 06 0F               771 	ld	hl, #0xf06
      0002CE E5                     772 	push	hl
      0002CF CDr00r00               773 	call	_set_sprite_data
      0002D2 E8 04                  774 	add	sp, #4
                                    775 ;main.c:113: set_sprite_tile(scoreLowerDigit, 6);
                                    776 ;setupPair	HL
      0002D4 21r10r01               777 	ld	hl, #_scoreLowerDigit
      0002D7 4E                     778 	ld	c, (hl)
                                    779 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      0002D8 26 00                  780 	ld	h, #0x00
                                    781 ;	spillPairReg hl
                                    782 ;	spillPairReg hl
      0002DA 69                     783 	ld	l, c
      0002DB 29                     784 	add	hl, hl
      0002DC 29                     785 	add	hl, hl
      0002DD 11r00r00               786 	ld	de, #_shadow_OAM
      0002E0 19                     787 	add	hl, de
      0002E1 23                     788 	inc	hl
      0002E2 23                     789 	inc	hl
      0002E3 36 06                  790 	ld	(hl), #0x06
                                    791 ;main.c:114: set_sprite_tile(scoreHigherDigit, 6);
                                    792 ;setupPair	HL
      0002E5 21r11r01               793 	ld	hl, #_scoreHigherDigit
      0002E8 4E                     794 	ld	c, (hl)
                                    795 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      0002E9 26 00                  796 	ld	h, #0x00
                                    797 ;	spillPairReg hl
                                    798 ;	spillPairReg hl
      0002EB 69                     799 	ld	l, c
      0002EC 29                     800 	add	hl, hl
      0002ED 29                     801 	add	hl, hl
      0002EE 11r00r00               802 	ld	de, #_shadow_OAM
      0002F1 19                     803 	add	hl, de
      0002F2 23                     804 	inc	hl
      0002F3 23                     805 	inc	hl
      0002F4 36 06                  806 	ld	(hl), #0x06
                                    807 ;main.c:116: DISPLAY_ON;
      0002F6 F0r00                  808 	ldh	a, (_LCDC_REG + 0)
      0002F8 F6 80                  809 	or	a, #0x80
      0002FA E0r00                  810 	ldh	(_LCDC_REG + 0), a
                                    811 ;main.c:117: SHOW_SPRITES;
      0002FC F0r00                  812 	ldh	a, (_LCDC_REG + 0)
      0002FE F6 02                  813 	or	a, #0x02
      000300 E0r00                  814 	ldh	(_LCDC_REG + 0), a
                                    815 ;main.c:118: }
      000302 C9                     816 	ret
                                    817 ;main.c:120: bool doesCollide(UINT8 x1, UINT8 y1, UINT8 x2, UINT8 y2) {
                                    818 ;	---------------------------------
                                    819 ; Function doesCollide
                                    820 ; ---------------------------------
      000303                        821 _doesCollide::
      000303 E8 FA                  822 	add	sp, #-6
                                    823 ;main.c:121: if (x1 < x2 + spriteSize &&
      000305 F8 0A                  824 	ldhl	sp,	#10
      000307 7E                     825 	ld	a, (hl)
      000308 F8 02                  826 	ldhl	sp,	#2
      00030A 22                     827 	ld	(hl+), a
      00030B 36 00                  828 	ld	(hl), #0x00
                                    829 ;setupPair	HL
      00030D FAr13r01               830 	ld	a, (#_spriteSize)
      000310 F8 00                  831 	ldhl	sp,	#0
      000312 22                     832 	ld	(hl+), a
      000313 AF                     833 	xor	a, a
      000314 22                     834 	ld	(hl+), a
      000315 D1                     835 	pop	de
      000316 D5                     836 	push	de
      000317 2A                     837 	ld	a,	(hl+)
      000318 66                     838 	ld	h, (hl)
      000319 6F                     839 	ld	l, a
      00031A 19                     840 	add	hl, de
      00031B E5                     841 	push	hl
      00031C 7D                     842 	ld	a, l
      00031D F8 06                  843 	ldhl	sp,	#6
      00031F 77                     844 	ld	(hl), a
      000320 E1                     845 	pop	hl
      000321 7C                     846 	ld	a, h
      000322 F8 05                  847 	ldhl	sp,	#5
      000324 77                     848 	ld	(hl), a
      000325 F8 08                  849 	ldhl	sp,	#8
      000327 4E                     850 	ld	c, (hl)
      000328 06 00                  851 	ld	b, #0x00
      00032A F8 04                  852 	ldhl	sp,	#4
      00032C 79                     853 	ld	a, c
      00032D 96                     854 	sub	a, (hl)
      00032E 23                     855 	inc	hl
      00032F 78                     856 	ld	a, b
      000330 9E                     857 	sbc	a, (hl)
      000331 78                     858 	ld	a, b
      000332 57                     859 	ld	d, a
      000333 CB 7E                  860 	bit	7, (hl)
      000335 28 07                  861 	jr	Z, 00128$
      000337 CB 7A                  862 	bit	7, d
      000339 20 08                  863 	jr	NZ, 00129$
      00033B BF                     864 	cp	a, a
      00033C 18 05                  865 	jr	00129$
      00033E                        866 00128$:
      00033E CB 7A                  867 	bit	7, d
      000340 28 01                  868 	jr	Z, 00129$
      000342 37                     869 	scf
      000343                        870 00129$:
      000343 30 7A                  871 	jr	NC, 00102$
                                    872 ;main.c:122: x1 + spriteSize > x2 &&
      000345 E1                     873 	pop	hl
      000346 E5                     874 	push	hl
      000347 09                     875 	add	hl, bc
      000348 4D                     876 	ld	c, l
      000349 44                     877 	ld	b, h
      00034A F8 02                  878 	ldhl	sp,	#2
      00034C 2A                     879 	ld	a, (hl+)
      00034D 91                     880 	sub	a, c
      00034E 7E                     881 	ld	a, (hl)
      00034F 98                     882 	sbc	a, b
      000350 56                     883 	ld	d, (hl)
      000351 78                     884 	ld	a, b
      000352 CB 7F                  885 	bit	7,a
      000354 28 07                  886 	jr	Z, 00130$
      000356 CB 7A                  887 	bit	7, d
      000358 20 08                  888 	jr	NZ, 00131$
      00035A BF                     889 	cp	a, a
      00035B 18 05                  890 	jr	00131$
      00035D                        891 00130$:
      00035D CB 7A                  892 	bit	7, d
      00035F 28 01                  893 	jr	Z, 00131$
      000361 37                     894 	scf
      000362                        895 00131$:
      000362 30 5B                  896 	jr	NC, 00102$
                                    897 ;main.c:123: y1 < y2 + spriteSize &&
      000364 F8 0B                  898 	ldhl	sp,	#11
      000366 7E                     899 	ld	a, (hl)
      000367 F8 02                  900 	ldhl	sp,	#2
      000369 22                     901 	ld	(hl+), a
      00036A AF                     902 	xor	a, a
      00036B 32                     903 	ld	(hl-), a
      00036C 2A                     904 	ld	a, (hl+)
      00036D 5F                     905 	ld	e, a
      00036E 56                     906 	ld	d, (hl)
      00036F E1                     907 	pop	hl
      000370 E5                     908 	push	hl
      000371 19                     909 	add	hl, de
      000372 E5                     910 	push	hl
      000373 7D                     911 	ld	a, l
      000374 F8 06                  912 	ldhl	sp,	#6
      000376 77                     913 	ld	(hl), a
      000377 E1                     914 	pop	hl
      000378 7C                     915 	ld	a, h
      000379 F8 05                  916 	ldhl	sp,	#5
      00037B 77                     917 	ld	(hl), a
      00037C F8 09                  918 	ldhl	sp,	#9
      00037E 4E                     919 	ld	c, (hl)
      00037F 06 00                  920 	ld	b, #0x00
      000381 F8 04                  921 	ldhl	sp,	#4
      000383 79                     922 	ld	a, c
      000384 96                     923 	sub	a, (hl)
      000385 23                     924 	inc	hl
      000386 78                     925 	ld	a, b
      000387 9E                     926 	sbc	a, (hl)
      000388 78                     927 	ld	a, b
      000389 57                     928 	ld	d, a
      00038A CB 7E                  929 	bit	7, (hl)
      00038C 28 07                  930 	jr	Z, 00132$
      00038E CB 7A                  931 	bit	7, d
      000390 20 08                  932 	jr	NZ, 00133$
      000392 BF                     933 	cp	a, a
      000393 18 05                  934 	jr	00133$
      000395                        935 00132$:
      000395 CB 7A                  936 	bit	7, d
      000397 28 01                  937 	jr	Z, 00133$
      000399 37                     938 	scf
      00039A                        939 00133$:
      00039A 30 23                  940 	jr	NC, 00102$
                                    941 ;main.c:124: y1 + spriteSize > y2) {
      00039C E1                     942 	pop	hl
      00039D E5                     943 	push	hl
      00039E 09                     944 	add	hl, bc
      00039F 4D                     945 	ld	c, l
      0003A0 44                     946 	ld	b, h
      0003A1 F8 02                  947 	ldhl	sp,	#2
      0003A3 2A                     948 	ld	a, (hl+)
      0003A4 91                     949 	sub	a, c
      0003A5 7E                     950 	ld	a, (hl)
      0003A6 98                     951 	sbc	a, b
      0003A7 56                     952 	ld	d, (hl)
      0003A8 78                     953 	ld	a, b
      0003A9 CB 7F                  954 	bit	7,a
      0003AB 28 07                  955 	jr	Z, 00134$
      0003AD CB 7A                  956 	bit	7, d
      0003AF 20 08                  957 	jr	NZ, 00135$
      0003B1 BF                     958 	cp	a, a
      0003B2 18 05                  959 	jr	00135$
      0003B4                        960 00134$:
      0003B4 CB 7A                  961 	bit	7, d
      0003B6 28 01                  962 	jr	Z, 00135$
      0003B8 37                     963 	scf
      0003B9                        964 00135$:
      0003B9 30 04                  965 	jr	NC, 00102$
                                    966 ;main.c:125: return true;
      0003BB 1E 01                  967 	ld	e, #0x01
      0003BD 18 02                  968 	jr	00106$
      0003BF                        969 00102$:
                                    970 ;main.c:127: return false;
      0003BF 1E 00                  971 	ld	e, #0x00
      0003C1                        972 00106$:
                                    973 ;main.c:128: }
      0003C1 E8 06                  974 	add	sp, #6
      0003C3 C9                     975 	ret
                                    976 ;main.c:131: void onCatchFish(){
                                    977 ;	---------------------------------
                                    978 ; Function onCatchFish
                                    979 ; ---------------------------------
      0003C4                        980 _onCatchFish::
                                    981 ;main.c:132: set_sprite_tile(fishingRod.spriteTile, fishingRod.hookSpriteFish);
      0003C4 21r10r00               982 	ld	hl, #_fishingRod + 2
      0003C7 4E                     983 	ld	c, (hl)
      0003C8 21r11r00               984 	ld	hl, #_fishingRod + 3
                                    985 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      0003CB 6E                     986 	ld	l, (hl)
      0003CC 11r00r00               987 	ld	de, #_shadow_OAM+0
                                    988 ;	spillPairReg hl
                                    989 ;	spillPairReg hl
      0003CF 26 00                  990 	ld	h, #0x00
                                    991 ;	spillPairReg hl
                                    992 ;	spillPairReg hl
      0003D1 29                     993 	add	hl, hl
      0003D2 29                     994 	add	hl, hl
      0003D3 19                     995 	add	hl, de
      0003D4 23                     996 	inc	hl
      0003D5 23                     997 	inc	hl
      0003D6 71                     998 	ld	(hl), c
                                    999 ;main.c:132: set_sprite_tile(fishingRod.spriteTile, fishingRod.hookSpriteFish);
                                   1000 ;main.c:133: }
      0003D7 C9                    1001 	ret
                                   1002 ;main.c:135: void storeFish(){
                                   1003 ;	---------------------------------
                                   1004 ; Function storeFish
                                   1005 ; ---------------------------------
      0003D8                       1006 _storeFish::
                                   1007 ;main.c:137: if(caughtFishIndex != -1) {
                                   1008 ;setupPair	HL
      0003D8 FAr01r00              1009 	ld	a, (#_caughtFishIndex)
      0003DB 3C                    1010 	inc	a
      0003DC C8                    1011 	ret	Z
                                   1012 ;main.c:138: set_sprite_tile(fishingRod.spriteTile, fishingRod.hookSprite);
      0003DD 21r0Fr00              1013 	ld	hl, #(_fishingRod + 1)
      0003E0 4E                    1014 	ld	c, (hl)
      0003E1 21r11r00              1015 	ld	hl, #(_fishingRod + 3)
                                   1016 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      0003E4 6E                    1017 	ld	l, (hl)
                                   1018 ;	spillPairReg hl
                                   1019 ;	spillPairReg hl
      0003E5 26 00                 1020 	ld	h, #0x00
                                   1021 ;	spillPairReg hl
                                   1022 ;	spillPairReg hl
      0003E7 29                    1023 	add	hl, hl
      0003E8 29                    1024 	add	hl, hl
      0003E9 11r00r00              1025 	ld	de, #_shadow_OAM
      0003EC 19                    1026 	add	hl, de
      0003ED 23                    1027 	inc	hl
      0003EE 23                    1028 	inc	hl
      0003EF 71                    1029 	ld	(hl), c
                                   1030 ;main.c:139: caughtFishIndex = -1;
                                   1031 ;setupPair	HL
      0003F0 21r01r00              1032 	ld	hl, #_caughtFishIndex
      0003F3 36 FF                 1033 	ld	(hl), #0xff
                                   1034 ;main.c:140: score++;
                                   1035 ;setupPair	HL
      0003F5 21r00r00              1036 	ld	hl, #_score
      0003F8 34                    1037 	inc	(hl)
                                   1038 ;main.c:142: }
      0003F9 C9                    1039 	ret
                                   1040 ;main.c:144: void collideWith() {
                                   1041 ;	---------------------------------
                                   1042 ; Function collideWith
                                   1043 ; ---------------------------------
      0003FA                       1044 _collideWith::
      0003FA 3B                    1045 	dec	sp
                                   1046 ;main.c:146: for(UINT8 i = 0; i < numFish; i++) {
      0003FB 06 00                 1047 	ld	b, #0x00
      0003FD                       1048 00110$:
      0003FD 78                    1049 	ld	a, b
      0003FE D6 01                 1050 	sub	a, #0x01
      000400 30 40                 1051 	jr	NC, 00103$
                                   1052 ;main.c:147: if( doesCollide(hookX + 1, fishingRod.yHook, fishArr[i].x, fishArr[i].y) ) {
      000402 58                    1053 	ld	e, b
      000403 16 00                 1054 	ld	d, #0x00
      000405 6B                    1055 	ld	l, e
      000406 62                    1056 	ld	h, d
      000407 29                    1057 	add	hl, hl
      000408 29                    1058 	add	hl, hl
      000409 19                    1059 	add	hl, de
      00040A 11r00r00              1060 	ld	de, #_fishArr
      00040D 19                    1061 	add	hl, de
      00040E 5D                    1062 	ld	e, l
      00040F 54                    1063 	ld	d, h
      000410 13                    1064 	inc	de
      000411 1A                    1065 	ld	a, (de)
      000412 4F                    1066 	ld	c, a
      000413 7E                    1067 	ld	a, (hl)
      000414 F8 00                 1068 	ldhl	sp,	#0
      000416 77                    1069 	ld	(hl), a
      000417 FAr0Er00              1070 	ld	a, (#_fishingRod + 0)
                                   1071 ;setupPair	HL
      00041A 21r12r01              1072 	ld	hl, #_hookX
      00041D 56                    1073 	ld	d, (hl)
      00041E 14                    1074 	inc	d
      00041F C5                    1075 	push	bc
      000420 61                    1076 	ld	h, c
                                   1077 ;	spillPairReg hl
                                   1078 ;	spillPairReg hl
      000421 E5                    1079 	push	hl
      000422 33                    1080 	inc	sp
      000423 F8 03                 1081 	ldhl	sp,	#3
      000425 66                    1082 	ld	h, (hl)
                                   1083 ;	spillPairReg hl
                                   1084 ;	spillPairReg hl
      000426 E5                    1085 	push	hl
      000427 33                    1086 	inc	sp
      000428 F5                    1087 	push	af
      000429 33                    1088 	inc	sp
      00042A D5                    1089 	push	de
      00042B 33                    1090 	inc	sp
      00042C CDr03r03              1091 	call	_doesCollide
      00042F E8 04                 1092 	add	sp, #4
      000431 7B                    1093 	ld	a, e
      000432 C1                    1094 	pop	bc
      000433 B7                    1095 	or	a, a
      000434 28 09                 1096 	jr	Z, 00111$
                                   1097 ;main.c:148: onCatchFish();
      000436 C5                    1098 	push	bc
      000437 CDrC4r03              1099 	call	_onCatchFish
      00043A C1                    1100 	pop	bc
                                   1101 ;main.c:149: caughtFishIndex = i;
                                   1102 ;setupPair	HL
      00043B 21r01r00              1103 	ld	hl, #_caughtFishIndex
      00043E 70                    1104 	ld	(hl), b
      00043F                       1105 00111$:
                                   1106 ;main.c:146: for(UINT8 i = 0; i < numFish; i++) {
      00043F 04                    1107 	inc	b
      000440 18 BB                 1108 	jr	00110$
      000442                       1109 00103$:
                                   1110 ;main.c:152: for(UINT8 i=0; i < numCans; i++) {
      000442 0E 00                 1111 	ld	c, #0x00
      000444                       1112 00113$:
      000444 79                    1113 	ld	a, c
      000445 D6 03                 1114 	sub	a, #0x03
      000447 30 3E                 1115 	jr	NC, 00115$
                                   1116 ;main.c:153: if(canArr[i].x != NULL) {
      000449 06 00                 1117 	ld	b, #0x00
      00044B 69                    1118 	ld	l, c
      00044C 60                    1119 	ld	h, b
      00044D 29                    1120 	add	hl, hl
      00044E 09                    1121 	add	hl, bc
      00044F 11r05r00              1122 	ld	de, #_canArr
      000452 19                    1123 	add	hl, de
      000453 46                    1124 	ld	b, (hl)
      000454 78                    1125 	ld	a, b
      000455 B7                    1126 	or	a, a
      000456 28 2C                 1127 	jr	Z, 00114$
                                   1128 ;main.c:154: if( doesCollide(hookX + 1, fishingRod.yHook, canArr[i].x, canArr[i].y) ) {
      000458 23                    1129 	inc	hl
      000459 7E                    1130 	ld	a, (hl)
      00045A F8 00                 1131 	ldhl	sp,	#0
      00045C 77                    1132 	ld	(hl), a
      00045D FAr0Er00              1133 	ld	a, (#_fishingRod + 0)
                                   1134 ;setupPair	HL
      000460 21r12r01              1135 	ld	hl, #_hookX
      000463 5E                    1136 	ld	e, (hl)
      000464 1C                    1137 	inc	e
      000465 C5                    1138 	push	bc
      000466 F8 02                 1139 	ldhl	sp,	#2
      000468 66                    1140 	ld	h, (hl)
                                   1141 ;	spillPairReg hl
                                   1142 ;	spillPairReg hl
      000469 68                    1143 	ld	l, b
      00046A E5                    1144 	push	hl
      00046B 57                    1145 	ld	d,a
      00046C D5                    1146 	push	de
      00046D CDr03r03              1147 	call	_doesCollide
      000470 E8 04                 1148 	add	sp, #4
      000472 7B                    1149 	ld	a, e
      000473 C1                    1150 	pop	bc
      000474 B7                    1151 	or	a, a
      000475 28 0D                 1152 	jr	Z, 00114$
                                   1153 ;main.c:155: waitpad(J_START);
      000477 3E 80                 1154 	ld	a, #0x80
      000479 F5                    1155 	push	af
      00047A 33                    1156 	inc	sp
      00047B CDr00r00              1157 	call	_waitpad
      00047E 33                    1158 	inc	sp
                                   1159 ;main.c:156: reset();
      00047F C5                    1160 	push	bc
      000480 CDr00r00              1161 	call	_reset
      000483 C1                    1162 	pop	bc
      000484                       1163 00114$:
                                   1164 ;main.c:152: for(UINT8 i=0; i < numCans; i++) {
      000484 0C                    1165 	inc	c
      000485 18 BD                 1166 	jr	00113$
      000487                       1167 00115$:
                                   1168 ;main.c:160: }
      000487 33                    1169 	inc	sp
      000488 C9                    1170 	ret
                                   1171 ;main.c:162: void handleInput(){
                                   1172 ;	---------------------------------
                                   1173 ; Function handleInput
                                   1174 ; ---------------------------------
      000489                       1175 _handleInput::
                                   1176 ;main.c:163: switch(joypad()) {
      000489 CDr00r00              1177 	call	_joypad
      00048C 7B                    1178 	ld	a, e
      00048D FE 04                 1179 	cp	a, #0x04
      00048F 28 12                 1180 	jr	Z, 00104$
      000491 FE 08                 1181 	cp	a, #0x08
      000493 28 3F                 1182 	jr	Z, 00107$
      000495 D6 10                 1183 	sub	a, #0x10
      000497 C0                    1184 	ret	NZ
                                   1185 ;main.c:166: if(fishingRod.yHook<=30) {
      000498 21r0Er00              1186 	ld	hl, #_fishingRod
      00049B 4E                    1187 	ld	c, (hl)
      00049C 3E 1E                 1188 	ld	a, #0x1e
      00049E 91                    1189 	sub	a, c
      00049F D8                    1190 	ret	C
                                   1191 ;main.c:167: storeFish();
                                   1192 ;main.c:169: break;
      0004A0 C3rD8r03              1193 	jp	_storeFish
                                   1194 ;main.c:171: case J_UP:
      0004A3                       1195 00104$:
                                   1196 ;main.c:172: if(fishingRod.yHook > 20) {
      0004A3 01r0Er00              1197 	ld	bc, #_fishingRod+0
      0004A6 0A                    1198 	ld	a, (bc)
      0004A7 5F                    1199 	ld	e, a
      0004A8 3E 14                 1200 	ld	a, #0x14
      0004AA 93                    1201 	sub	a, e
      0004AB D0                    1202 	ret	NC
                                   1203 ;main.c:173: fishingRod.yHook -= 1;
      0004AC 7B                    1204 	ld	a, e
      0004AD 3D                    1205 	dec	a
      0004AE 02                    1206 	ld	(bc), a
                                   1207 ;main.c:175: color(WHITE, WHITE, SOLID);
      0004AF C5                    1208 	push	bc
      0004B0 AF                    1209 	xor	a, a
      0004B1 0F                    1210 	rrca
      0004B2 F5                    1211 	push	af
      0004B3 AF                    1212 	xor	a, a
      0004B4 F5                    1213 	push	af
      0004B5 33                    1214 	inc	sp
      0004B6 CDr00r00              1215 	call	_color
      0004B9 E8 03                 1216 	add	sp, #3
      0004BB C1                    1217 	pop	bc
                                   1218 ;main.c:172: if(fishingRod.yHook > 20) {
      0004BC 0A                    1219 	ld	a, (bc)
                                   1220 ;main.c:176: line(80, fishingRod.yHook - 16, 80, fishingRod.yHook - 14);
      0004BD 4F                    1221 	ld	c, a
      0004BE C6 F2                 1222 	add	a, #0xf2
      0004C0 47                    1223 	ld	b, a
      0004C1 79                    1224 	ld	a, c
      0004C2 C6 F0                 1225 	add	a, #0xf0
      0004C4 C5                    1226 	push	bc
      0004C5 33                    1227 	inc	sp
      0004C6 26 50                 1228 	ld	h, #0x50
                                   1229 ;	spillPairReg hl
                                   1230 ;	spillPairReg hl
      0004C8 E5                    1231 	push	hl
      0004C9 33                    1232 	inc	sp
      0004CA 67                    1233 	ld	h, a
      0004CB 2E 50                 1234 	ld	l, #0x50
      0004CD E5                    1235 	push	hl
      0004CE CDr00r00              1236 	call	_line
      0004D1 E8 04                 1237 	add	sp, #4
                                   1238 ;main.c:178: break;
      0004D3 C9                    1239 	ret
                                   1240 ;main.c:180: case J_DOWN:
      0004D4                       1241 00107$:
                                   1242 ;main.c:181: if(fishingRod.yHook<152) {
      0004D4 FAr0Er00              1243 	ld	a, (#_fishingRod + 0)
      0004D7 FE 98                 1244 	cp	a, #0x98
      0004D9 D0                    1245 	ret	NC
                                   1246 ;main.c:182: fishingRod.yHook += 1;
      0004DA 3C                    1247 	inc	a
      0004DB EAr0Er00              1248 	ld	(#_fishingRod),a
                                   1249 ;main.c:183: color(BLACK, BLACK, SOLID);
      0004DE AF                    1250 	xor	a, a
      0004DF 67                    1251 	ld	h, a
      0004E0 2E 03                 1252 	ld	l, #0x03
      0004E2 E5                    1253 	push	hl
      0004E3 3E 03                 1254 	ld	a, #0x03
      0004E5 F5                    1255 	push	af
      0004E6 33                    1256 	inc	sp
      0004E7 CDr00r00              1257 	call	_color
      0004EA E8 03                 1258 	add	sp, #3
                                   1259 ;main.c:181: if(fishingRod.yHook<152) {
      0004EC FAr0Er00              1260 	ld	a, (#_fishingRod + 0)
                                   1261 ;main.c:184: line(80, fishingRod.yHook - 16, 80, fishingRod.yHook - 17);
      0004EF 4F                    1262 	ld	c, a
      0004F0 C6 EF                 1263 	add	a, #0xef
      0004F2 47                    1264 	ld	b, a
      0004F3 79                    1265 	ld	a, c
      0004F4 C6 F0                 1266 	add	a, #0xf0
      0004F6 C5                    1267 	push	bc
      0004F7 33                    1268 	inc	sp
      0004F8 26 50                 1269 	ld	h, #0x50
                                   1270 ;	spillPairReg hl
                                   1271 ;	spillPairReg hl
      0004FA E5                    1272 	push	hl
      0004FB 33                    1273 	inc	sp
      0004FC 67                    1274 	ld	h, a
      0004FD 2E 50                 1275 	ld	l, #0x50
      0004FF E5                    1276 	push	hl
      000500 CDr00r00              1277 	call	_line
      000503 E8 04                 1278 	add	sp, #4
                                   1279 ;main.c:187: }
                                   1280 ;main.c:188: }
      000505 C9                    1281 	ret
                                   1282 ;main.c:190: void main() {
                                   1283 ;	---------------------------------
                                   1284 ; Function main
                                   1285 ; ---------------------------------
      000506                       1286 _main::
                                   1287 ;main.c:191: init();
      000506 CDrEDr01              1288 	call	_init
                                   1289 ;main.c:193: printf(" \n\n\n\n\n\n\n\n    PRESS START!\n");
      000509 11r62r06              1290 	ld	de, #___str_1
      00050C D5                    1291 	push	de
      00050D CDr00r00              1292 	call	_puts
      000510 E1                    1293 	pop	hl
                                   1294 ;main.c:194: waitpad(J_START);
      000511 3E 80                 1295 	ld	a, #0x80
      000513 F5                    1296 	push	af
      000514 33                    1297 	inc	sp
      000515 CDr00r00              1298 	call	_waitpad
      000518 33                    1299 	inc	sp
                                   1300 ;main.c:195: seed = LY_REG;
      000519 F0r00                 1301 	ldh	a, (_LY_REG + 0)
                                   1302 ;setupPair	HL
      00051B 21r12r00              1303 	ld	hl, #_seed
                                   1304 ;setupPair	HL
      00051E 22                    1305 	ld	(hl+), a
                                   1306 ;main.c:196: seed |= (UINT16)DIV_REG << 8;
                                   1307 ;setupPair	HL
      00051F AF                    1308 	xor	a, a
      000520 32                    1309 	ld	(hl-), a
      000521 F0r00                 1310 	ldh	a, (_DIV_REG + 0)
      000523 4F                    1311 	ld	c, a
      000524 AF                    1312 	xor	a, a
      000525 B6                    1313 	or	a, (hl)
                                   1314 ;setupPair	HL
                                   1315 ;setupPair	HL
      000526 22                    1316 	ld	(hl+), a
      000527 79                    1317 	ld	a, c
      000528 B6                    1318 	or	a, (hl)
                                   1319 ;setupPair	HL
                                   1320 ;main.c:197: initrand(seed);
                                   1321 ;setupPair	HL
      000529 32                    1322 	ld	(hl-), a
                                   1323 ;setupPair	HL
      00052A 2A                    1324 	ld	a, (hl+)
      00052B 4F                    1325 	ld	c, a
      00052C 46                    1326 	ld	b, (hl)
      00052D C5                    1327 	push	bc
      00052E CDr00r00              1328 	call	_initrand
      000531 E1                    1329 	pop	hl
                                   1330 ;main.c:199: printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
      000532 11r7Cr06              1331 	ld	de, #___str_3
      000535 D5                    1332 	push	de
      000536 CDr00r00              1333 	call	_puts
      000539 E1                    1334 	pop	hl
                                   1335 ;main.c:201: line(80, 0, 80, fishingRod.yHook - 16);
      00053A FAr0Er00              1336 	ld	a, (#_fishingRod + 0)
      00053D C6 F0                 1337 	add	a, #0xf0
      00053F 67                    1338 	ld	h, a
      000540 2E 50                 1339 	ld	l, #0x50
      000542 E5                    1340 	push	hl
      000543 21 50 00              1341 	ld	hl, #0x50
      000546 E5                    1342 	push	hl
      000547 CDr00r00              1343 	call	_line
      00054A E8 04                 1344 	add	sp, #4
                                   1345 ;main.c:203: color(LTGREY, LTGREY, SOLID);
      00054C AF                    1346 	xor	a, a
      00054D 67                    1347 	ld	h, a
      00054E 2E 01                 1348 	ld	l, #0x01
      000550 E5                    1349 	push	hl
      000551 3E 01                 1350 	ld	a, #0x01
      000553 F5                    1351 	push	af
      000554 33                    1352 	inc	sp
      000555 CDr00r00              1353 	call	_color
      000558 E8 03                 1354 	add	sp, #3
                                   1355 ;main.c:204: line(0, 20, 70, 20);
      00055A 21 46 14              1356 	ld	hl, #0x1446
      00055D E5                    1357 	push	hl
      00055E 21 00 14              1358 	ld	hl, #0x1400
      000561 E5                    1359 	push	hl
      000562 CDr00r00              1360 	call	_line
      000565 E8 04                 1361 	add	sp, #4
                                   1362 ;main.c:205: line(90, 20, 159, 20);
      000567 21 9F 14              1363 	ld	hl, #0x149f
      00056A E5                    1364 	push	hl
      00056B 21 5A 14              1365 	ld	hl, #0x145a
      00056E E5                    1366 	push	hl
      00056F CDr00r00              1367 	call	_line
      000572 E8 04                 1368 	add	sp, #4
                                   1369 ;main.c:207: moveFishTo(&fishArr[0], 40, 40);
      000574 21 28 28              1370 	ld	hl, #0x2828
      000577 E5                    1371 	push	hl
      000578 11r00r00              1372 	ld	de, #_fishArr
      00057B D5                    1373 	push	de
      00057C CDr14r01              1374 	call	_moveFishTo
      00057F E8 04                 1375 	add	sp, #4
                                   1376 ;main.c:209: while(1) {
      000581                       1377 00102$:
                                   1378 ;main.c:210: UINT8 joydata = joypad();
      000581 CDr00r00              1379 	call	_joypad
                                   1380 ;main.c:211: handleInput();
      000584 CDr89r04              1381 	call	_handleInput
                                   1382 ;main.c:212: moveFishTo(&fishArr[0], fishArr[0].x + 1, fishArr[0].y);
      000587 21r01r00              1383 	ld	hl, #_fishArr + 1
      00058A 46                    1384 	ld	b, (hl)
      00058B FAr00r00              1385 	ld	a, (#_fishArr + 0)
      00058E 3C                    1386 	inc	a
      00058F C5                    1387 	push	bc
      000590 33                    1388 	inc	sp
      000591 F5                    1389 	push	af
      000592 33                    1390 	inc	sp
      000593 11r00r00              1391 	ld	de, #_fishArr
      000596 D5                    1392 	push	de
      000597 CDr14r01              1393 	call	_moveFishTo
      00059A E8 04                 1394 	add	sp, #4
                                   1395 ;main.c:213: move_sprite(fishingRod.spriteTile, hookX, fishingRod.yHook);
      00059C 21r0Er00              1396 	ld	hl, #_fishingRod
      00059F 46                    1397 	ld	b, (hl)
                                   1398 ;setupPair	HL
      0005A0 21r12r01              1399 	ld	hl, #_hookX
      0005A3 4E                    1400 	ld	c, (hl)
      0005A4 11r11r00              1401 	ld	de, #_fishingRod+3
      0005A7 1A                    1402 	ld	a, (de)
                                   1403 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      0005A8 6F                    1404 	ld	l, a
                                   1405 ;	spillPairReg hl
                                   1406 ;	spillPairReg hl
      0005A9 26 00                 1407 	ld	h, #0x00
                                   1408 ;	spillPairReg hl
                                   1409 ;	spillPairReg hl
      0005AB 29                    1410 	add	hl, hl
      0005AC 29                    1411 	add	hl, hl
      0005AD 11r00r00              1412 	ld	de, #_shadow_OAM
      0005B0 19                    1413 	add	hl, de
                                   1414 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      0005B1 78                    1415 	ld	a, b
      0005B2 22                    1416 	ld	(hl+), a
      0005B3 71                    1417 	ld	(hl), c
                                   1418 ;main.c:221: moveCanTo(&canArr[0], canArr[0].x + 1, canArr[0].y);
      0005B4 21r06r00              1419 	ld	hl, #_canArr + 1
      0005B7 46                    1420 	ld	b, (hl)
      0005B8 FAr05r00              1421 	ld	a, (#_canArr + 0)
      0005BB 3C                    1422 	inc	a
      0005BC C5                    1423 	push	bc
      0005BD 33                    1424 	inc	sp
      0005BE F5                    1425 	push	af
      0005BF 33                    1426 	inc	sp
      0005C0 11r05r00              1427 	ld	de, #_canArr
      0005C3 D5                    1428 	push	de
      0005C4 CDrAEr01              1429 	call	_moveCanTo
      0005C7 E8 04                 1430 	add	sp, #4
                                   1431 ;main.c:222: moveCanTo(&canArr[1], canArr[1].x + 1, canArr[1].y);
      0005C9 01r08r00              1432 	ld	bc, #_canArr + 3
      0005CC 21r09r00              1433 	ld	hl, #_canArr + 4
      0005CF 5E                    1434 	ld	e, (hl)
      0005D0 0A                    1435 	ld	a, (bc)
      0005D1 3C                    1436 	inc	a
      0005D2 63                    1437 	ld	h, e
                                   1438 ;	spillPairReg hl
                                   1439 ;	spillPairReg hl
      0005D3 E5                    1440 	push	hl
      0005D4 33                    1441 	inc	sp
      0005D5 F5                    1442 	push	af
      0005D6 33                    1443 	inc	sp
      0005D7 C5                    1444 	push	bc
      0005D8 CDrAEr01              1445 	call	_moveCanTo
      0005DB E8 04                 1446 	add	sp, #4
                                   1447 ;main.c:223: moveCanTo(&canArr[2], canArr[2].x + 1, canArr[2].y);
      0005DD 01r0Br00              1448 	ld	bc, #_canArr + 6
      0005E0 21r0Cr00              1449 	ld	hl, #_canArr + 7
      0005E3 5E                    1450 	ld	e, (hl)
      0005E4 0A                    1451 	ld	a, (bc)
      0005E5 3C                    1452 	inc	a
      0005E6 63                    1453 	ld	h, e
                                   1454 ;	spillPairReg hl
                                   1455 ;	spillPairReg hl
      0005E7 E5                    1456 	push	hl
      0005E8 33                    1457 	inc	sp
      0005E9 F5                    1458 	push	af
      0005EA 33                    1459 	inc	sp
      0005EB C5                    1460 	push	bc
      0005EC CDrAEr01              1461 	call	_moveCanTo
      0005EF E8 04                 1462 	add	sp, #4
                                   1463 ;main.c:225: set_sprite_tile(scoreLowerDigit, 6 + (score % 10));
                                   1464 ;setupPair	HL
      0005F1 21r00r00              1465 	ld	hl, #_score
      0005F4 4E                    1466 	ld	c, (hl)
      0005F5 06 00                 1467 	ld	b, #0x00
      0005F7 11 0A 00              1468 	ld	de, #0x000a
      0005FA D5                    1469 	push	de
      0005FB C5                    1470 	push	bc
      0005FC CDr00r00              1471 	call	__modsint
      0005FF E8 04                 1472 	add	sp, #4
      000601 7B                    1473 	ld	a, e
      000602 C6 06                 1474 	add	a, #0x06
      000604 47                    1475 	ld	b, a
                                   1476 ;setupPair	HL
      000605 21r10r01              1477 	ld	hl, #_scoreLowerDigit
      000608 4E                    1478 	ld	c, (hl)
                                   1479 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      000609 69                    1480 	ld	l, c
                                   1481 ;	spillPairReg hl
                                   1482 ;	spillPairReg hl
      00060A 26 00                 1483 	ld	h, #0x00
                                   1484 ;	spillPairReg hl
                                   1485 ;	spillPairReg hl
      00060C 29                    1486 	add	hl, hl
      00060D 29                    1487 	add	hl, hl
      00060E 11r00r00              1488 	ld	de, #_shadow_OAM
      000611 19                    1489 	add	hl, de
      000612 23                    1490 	inc	hl
      000613 23                    1491 	inc	hl
      000614 70                    1492 	ld	(hl), b
                                   1493 ;main.c:226: set_sprite_tile(scoreHigherDigit, 6 + (score / 10));
                                   1494 ;setupPair	HL
      000615 21r00r00              1495 	ld	hl, #_score
      000618 5E                    1496 	ld	e, (hl)
      000619 16 00                 1497 	ld	d, #0x00
      00061B C5                    1498 	push	bc
      00061C 21 0A 00              1499 	ld	hl, #0x000a
      00061F E5                    1500 	push	hl
      000620 D5                    1501 	push	de
      000621 CDr00r00              1502 	call	__divsint
      000624 E8 04                 1503 	add	sp, #4
      000626 C1                    1504 	pop	bc
      000627 7B                    1505 	ld	a, e
      000628 C6 06                 1506 	add	a, #0x06
      00062A 47                    1507 	ld	b, a
                                   1508 ;setupPair	HL
      00062B 21r11r01              1509 	ld	hl, #_scoreHigherDigit
                                   1510 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      00062E 6E                    1511 	ld	l, (hl)
                                   1512 ;	spillPairReg hl
                                   1513 ;	spillPairReg hl
      00062F 26 00                 1514 	ld	h, #0x00
                                   1515 ;	spillPairReg hl
                                   1516 ;	spillPairReg hl
      000631 29                    1517 	add	hl, hl
      000632 29                    1518 	add	hl, hl
      000633 11r00r00              1519 	ld	de, #_shadow_OAM
      000636 19                    1520 	add	hl, de
      000637 23                    1521 	inc	hl
      000638 23                    1522 	inc	hl
      000639 70                    1523 	ld	(hl), b
                                   1524 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      00063A 11r00r00              1525 	ld	de, #_shadow_OAM+0
      00063D 69                    1526 	ld	l, c
                                   1527 ;	spillPairReg hl
                                   1528 ;	spillPairReg hl
      00063E 26 00                 1529 	ld	h, #0x00
                                   1530 ;	spillPairReg hl
                                   1531 ;	spillPairReg hl
      000640 29                    1532 	add	hl, hl
      000641 29                    1533 	add	hl, hl
      000642 19                    1534 	add	hl, de
                                   1535 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      000643 3E 14                 1536 	ld	a, #0x14
      000645 22                    1537 	ld	(hl+), a
      000646 36 9F                 1538 	ld	(hl), #0x9f
                                   1539 ;main.c:228: move_sprite(scoreHigherDigit, 150, 20);
                                   1540 ;setupPair	HL
      000648 21r11r01              1541 	ld	hl, #_scoreHigherDigit
                                   1542 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      00064B 6E                    1543 	ld	l, (hl)
      00064C 01r00r00              1544 	ld	bc, #_shadow_OAM+0
                                   1545 ;	spillPairReg hl
                                   1546 ;	spillPairReg hl
      00064F 26 00                 1547 	ld	h, #0x00
                                   1548 ;	spillPairReg hl
                                   1549 ;	spillPairReg hl
      000651 29                    1550 	add	hl, hl
      000652 29                    1551 	add	hl, hl
      000653 09                    1552 	add	hl, bc
                                   1553 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      000654 3E 14                 1554 	ld	a, #0x14
      000656 22                    1555 	ld	(hl+), a
      000657 36 96                 1556 	ld	(hl), #0x96
                                   1557 ;main.c:229: collideWith();
      000659 CDrFAr03              1558 	call	_collideWith
                                   1559 ;main.c:230: wait_vbl_done();
      00065C CDr00r00              1560 	call	_wait_vbl_done
                                   1561 ;main.c:232: }
      00065F C3r81r05              1562 	jp	00102$
      000662                       1563 ___str_1:
      000662 20                    1564 	.ascii " "
      000663 0A                    1565 	.db 0x0a
      000664 0A                    1566 	.db 0x0a
      000665 0A                    1567 	.db 0x0a
      000666 0A                    1568 	.db 0x0a
      000667 0A                    1569 	.db 0x0a
      000668 0A                    1570 	.db 0x0a
      000669 0A                    1571 	.db 0x0a
      00066A 0A                    1572 	.db 0x0a
      00066B 20 20 20 20 50 52 45  1573 	.ascii "    PRESS START!"
             53 53 20 53 54 41 52
             54 21
      00067B 00                    1574 	.db 0x00
      00067C                       1575 ___str_3:
      00067C 0A                    1576 	.db 0x0a
      00067D 0A                    1577 	.db 0x0a
      00067E 0A                    1578 	.db 0x0a
      00067F 0A                    1579 	.db 0x0a
      000680 0A                    1580 	.db 0x0a
      000681 0A                    1581 	.db 0x0a
      000682 0A                    1582 	.db 0x0a
      000683 0A                    1583 	.db 0x0a
      000684 0A                    1584 	.db 0x0a
      000685 0A                    1585 	.db 0x0a
      000686 0A                    1586 	.db 0x0a
      000687 0A                    1587 	.db 0x0a
      000688 0A                    1588 	.db 0x0a
      000689 0A                    1589 	.db 0x0a
      00068A 0A                    1590 	.db 0x0a
      00068B 0A                    1591 	.db 0x0a
      00068C 0A                    1592 	.db 0x0a
      00068D 00                    1593 	.db 0x00
                                   1594 	.area _CODE
                                   1595 	.area _INITIALIZER
      000000                       1596 __xinit__score:
      000000 00                    1597 	.db #0x00	; 0
      000001                       1598 __xinit__caughtFishIndex:
      000001 FF                    1599 	.db #0xff	; -1
                                   1600 	.area _CABS (ABS)
