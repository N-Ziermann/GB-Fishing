                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.6 #12439 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _handleInput
                                     13 	.globl _collideWith
                                     14 	.globl _storeFish
                                     15 	.globl _onCatchFish
                                     16 	.globl _doesCollide
                                     17 	.globl _init
                                     18 	.globl _moveCanTo
                                     19 	.globl _moveFishTo
                                     20 	.globl _randomRange
                                     21 	.globl _rand
                                     22 	.globl _initrand
                                     23 	.globl _puts
                                     24 	.globl _color
                                     25 	.globl _line
                                     26 	.globl _set_sprite_data
                                     27 	.globl _wait_vbl_done
                                     28 	.globl _reset
                                     29 	.globl _waitpad
                                     30 	.globl _joypad
                                     31 	.globl _caughtFishIndex
                                     32 	.globl _score
                                     33 	.globl _framecounter
                                     34 	.globl _seed
                                     35 	.globl _fishingRod
                                     36 	.globl _canArr
                                     37 	.globl _fishArr
                                     38 	.globl _spriteSize
                                     39 	.globl _hookX
                                     40 	.globl _scoreHigherDigit
                                     41 	.globl _scoreLowerDigit
                                     42 	.globl _NUMBERS
                                     43 	.globl _CAN
                                     44 	.globl _ROD
                                     45 	.globl _FISH
                                     46 ;--------------------------------------------------------
                                     47 ; special function registers
                                     48 ;--------------------------------------------------------
                                     49 ;--------------------------------------------------------
                                     50 ; ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area _DATA
      000000                         53 _fishArr::
      000000                         54 	.ds 5
      000005                         55 _canArr::
      000005                         56 	.ds 12
      000011                         57 _fishingRod::
      000011                         58 	.ds 4
      000015                         59 _seed::
      000015                         60 	.ds 2
                                     61 ;--------------------------------------------------------
                                     62 ; ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area _INITIALIZED
      000000                         65 _framecounter::
      000000                         66 	.ds 2
      000002                         67 _score::
      000002                         68 	.ds 1
      000003                         69 _caughtFishIndex::
      000003                         70 	.ds 1
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area _DABS (ABS)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area _HOME
                                     79 	.area _GSINIT
                                     80 	.area _GSFINAL
                                     81 	.area _GSINIT
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area _HOME
                                     86 	.area _HOME
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area _CODE
                                     91 ;main.c:53: UINT8 randomRange(UINT8 start, UINT8 end) {
                                     92 ;	---------------------------------
                                     93 ; Function randomRange
                                     94 ; ---------------------------------
      000000                         95 _randomRange::
                                     96 ;main.c:54: return start + ((UINT8)rand()) % (end - start + (UINT8)1);
      000000 CDr00r00                97 	call	_rand
      000003 F8 03                   98 	ldhl	sp,	#3
      000005 3A                      99 	ld	a, (hl-)
      000006 16 00                  100 	ld	d, #0x00
      000008 4E                     101 	ld	c, (hl)
      000009 06 00                  102 	ld	b, #0x00
      00000B 91                     103 	sub	a, c
      00000C 4F                     104 	ld	c, a
      00000D 7A                     105 	ld	a, d
      00000E 98                     106 	sbc	a, b
      00000F 47                     107 	ld	b, a
      000010 03                     108 	inc	bc
      000011 16 00                  109 	ld	d, #0x00
      000013 C5                     110 	push	bc
      000014 D5                     111 	push	de
      000015 CDr00r00               112 	call	__modsint
      000018 E8 04                  113 	add	sp, #4
      00001A F8 02                  114 	ldhl	sp,	#2
      00001C 7E                     115 	ld	a, (hl)
      00001D 83                     116 	add	a, e
      00001E 5F                     117 	ld	e, a
                                    118 ;main.c:55: }
      00001F C9                     119 	ret
      000020                        120 _FISH:
      000020 00                     121 	.db #0x00	; 0
      000021 F0                     122 	.db #0xf0	; 240
      000022 F0                     123 	.db #0xf0	; 240
      000023 0C                     124 	.db #0x0c	; 12
      000024 FC                     125 	.db #0xfc	; 252
      000025 02                     126 	.db #0x02	; 2
      000026 FE                     127 	.db #0xfe	; 254
      000027 05                     128 	.db #0x05	; 5
      000028 FE                     129 	.db #0xfe	; 254
      000029 01                     130 	.db #0x01	; 1
      00002A FC                     131 	.db #0xfc	; 252
      00002B 02                     132 	.db #0x02	; 2
      00002C F0                     133 	.db #0xf0	; 240
      00002D 0C                     134 	.db #0x0c	; 12
      00002E 00                     135 	.db #0x00	; 0
      00002F F0                     136 	.db #0xf0	; 240
      000030 00                     137 	.db #0x00	; 0
      000031 08                     138 	.db #0x08	; 8
      000032 08                     139 	.db #0x08	; 8
      000033 15                     140 	.db #0x15	; 21
      000034 1D                     141 	.db #0x1d	; 29
      000035 22                     142 	.db #0x22	; 34
      000036 1F                     143 	.db #0x1f	; 31
      000037 20                     144 	.db #0x20	; 32
      000038 1F                     145 	.db #0x1f	; 31
      000039 20                     146 	.db #0x20	; 32
      00003A 1D                     147 	.db #0x1d	; 29
      00003B 22                     148 	.db #0x22	; 34
      00003C 08                     149 	.db #0x08	; 8
      00003D 15                     150 	.db #0x15	; 21
      00003E 00                     151 	.db #0x00	; 0
      00003F 08                     152 	.db #0x08	; 8
      000040                        153 _ROD:
      000040 00                     154 	.db #0x00	; 0
      000041 08                     155 	.db #0x08	; 8
      000042 00                     156 	.db #0x00	; 0
      000043 08                     157 	.db #0x08	; 8
      000044 00                     158 	.db #0x00	; 0
      000045 04                     159 	.db #0x04	; 4
      000046 00                     160 	.db #0x00	; 0
      000047 02                     161 	.db #0x02	; 2
      000048 00                     162 	.db #0x00	; 0
      000049 02                     163 	.db #0x02	; 2
      00004A 00                     164 	.db #0x00	; 0
      00004B 02                     165 	.db #0x02	; 2
      00004C 00                     166 	.db #0x00	; 0
      00004D 24                     167 	.db #0x24	; 36
      00004E 00                     168 	.db #0x00	; 0
      00004F 18                     169 	.db #0x18	; 24
      000050 18                     170 	.db #0x18	; 24
      000051 00                     171 	.db #0x00	; 0
      000052 1C                     172 	.db #0x1c	; 28
      000053 08                     173 	.db #0x08	; 8
      000054 1E                     174 	.db #0x1e	; 30
      000055 00                     175 	.db #0x00	; 0
      000056 07                     176 	.db #0x07	; 7
      000057 00                     177 	.db #0x00	; 0
      000058 43                     178 	.db #0x43	; 67	'C'
      000059 00                     179 	.db #0x00	; 0
      00005A E7                     180 	.db #0xe7	; 231
      00005B 00                     181 	.db #0x00	; 0
      00005C 7E                     182 	.db #0x7e	; 126
      00005D 00                     183 	.db #0x00	; 0
      00005E 3C                     184 	.db #0x3c	; 60
      00005F 00                     185 	.db #0x00	; 0
      000060                        186 _CAN:
      000060 00                     187 	.db #0x00	; 0
      000061 01                     188 	.db #0x01	; 1
      000062 00                     189 	.db #0x00	; 0
      000063 02                     190 	.db #0x02	; 2
      000064 00                     191 	.db #0x00	; 0
      000065 12                     192 	.db #0x12	; 18
      000066 10                     193 	.db #0x10	; 16
      000067 2A                     194 	.db #0x2a	; 42
      000068 38                     195 	.db #0x38	; 56	'8'
      000069 44                     196 	.db #0x44	; 68	'D'
      00006A 70                     197 	.db #0x70	; 112	'p'
      00006B 88                     198 	.db #0x88	; 136
      00006C 20                     199 	.db #0x20	; 32
      00006D 50                     200 	.db #0x50	; 80	'P'
      00006E 00                     201 	.db #0x00	; 0
      00006F 20                     202 	.db #0x20	; 32
      000070                        203 _NUMBERS:
      000070 3C                     204 	.db #0x3c	; 60
      000071 3C                     205 	.db #0x3c	; 60
      000072 42                     206 	.db #0x42	; 66	'B'
      000073 42                     207 	.db #0x42	; 66	'B'
      000074 85                     208 	.db #0x85	; 133
      000075 85                     209 	.db #0x85	; 133
      000076 89                     210 	.db #0x89	; 137
      000077 89                     211 	.db #0x89	; 137
      000078 91                     212 	.db #0x91	; 145
      000079 91                     213 	.db #0x91	; 145
      00007A A1                     214 	.db #0xa1	; 161
      00007B A1                     215 	.db #0xa1	; 161
      00007C 42                     216 	.db #0x42	; 66	'B'
      00007D 42                     217 	.db #0x42	; 66	'B'
      00007E 3C                     218 	.db #0x3c	; 60
      00007F 3C                     219 	.db #0x3c	; 60
      000080 18                     220 	.db #0x18	; 24
      000081 18                     221 	.db #0x18	; 24
      000082 28                     222 	.db #0x28	; 40
      000083 28                     223 	.db #0x28	; 40
      000084 08                     224 	.db #0x08	; 8
      000085 08                     225 	.db #0x08	; 8
      000086 08                     226 	.db #0x08	; 8
      000087 08                     227 	.db #0x08	; 8
      000088 08                     228 	.db #0x08	; 8
      000089 08                     229 	.db #0x08	; 8
      00008A 08                     230 	.db #0x08	; 8
      00008B 08                     231 	.db #0x08	; 8
      00008C 08                     232 	.db #0x08	; 8
      00008D 08                     233 	.db #0x08	; 8
      00008E 3E                     234 	.db #0x3e	; 62
      00008F 3E                     235 	.db #0x3e	; 62
      000090 7E                     236 	.db #0x7e	; 126
      000091 7E                     237 	.db #0x7e	; 126
      000092 81                     238 	.db #0x81	; 129
      000093 81                     239 	.db #0x81	; 129
      000094 01                     240 	.db #0x01	; 1
      000095 01                     241 	.db #0x01	; 1
      000096 06                     242 	.db #0x06	; 6
      000097 06                     243 	.db #0x06	; 6
      000098 18                     244 	.db #0x18	; 24
      000099 18                     245 	.db #0x18	; 24
      00009A 60                     246 	.db #0x60	; 96
      00009B 60                     247 	.db #0x60	; 96
      00009C 81                     248 	.db #0x81	; 129
      00009D 81                     249 	.db #0x81	; 129
      00009E FF                     250 	.db #0xff	; 255
      00009F FF                     251 	.db #0xff	; 255
      0000A0 7E                     252 	.db #0x7e	; 126
      0000A1 7E                     253 	.db #0x7e	; 126
      0000A2 81                     254 	.db #0x81	; 129
      0000A3 81                     255 	.db #0x81	; 129
      0000A4 81                     256 	.db #0x81	; 129
      0000A5 81                     257 	.db #0x81	; 129
      0000A6 0E                     258 	.db #0x0e	; 14
      0000A7 0E                     259 	.db #0x0e	; 14
      0000A8 01                     260 	.db #0x01	; 1
      0000A9 01                     261 	.db #0x01	; 1
      0000AA 81                     262 	.db #0x81	; 129
      0000AB 81                     263 	.db #0x81	; 129
      0000AC 81                     264 	.db #0x81	; 129
      0000AD 81                     265 	.db #0x81	; 129
      0000AE 7E                     266 	.db #0x7e	; 126
      0000AF 7E                     267 	.db #0x7e	; 126
      0000B0 06                     268 	.db #0x06	; 6
      0000B1 06                     269 	.db #0x06	; 6
      0000B2 0A                     270 	.db #0x0a	; 10
      0000B3 0A                     271 	.db #0x0a	; 10
      0000B4 12                     272 	.db #0x12	; 18
      0000B5 12                     273 	.db #0x12	; 18
      0000B6 22                     274 	.db #0x22	; 34
      0000B7 22                     275 	.db #0x22	; 34
      0000B8 42                     276 	.db #0x42	; 66	'B'
      0000B9 42                     277 	.db #0x42	; 66	'B'
      0000BA FF                     278 	.db #0xff	; 255
      0000BB FF                     279 	.db #0xff	; 255
      0000BC 02                     280 	.db #0x02	; 2
      0000BD 02                     281 	.db #0x02	; 2
      0000BE 07                     282 	.db #0x07	; 7
      0000BF 07                     283 	.db #0x07	; 7
      0000C0 FF                     284 	.db #0xff	; 255
      0000C1 FF                     285 	.db #0xff	; 255
      0000C2 81                     286 	.db #0x81	; 129
      0000C3 81                     287 	.db #0x81	; 129
      0000C4 80                     288 	.db #0x80	; 128
      0000C5 80                     289 	.db #0x80	; 128
      0000C6 FE                     290 	.db #0xfe	; 254
      0000C7 FE                     291 	.db #0xfe	; 254
      0000C8 01                     292 	.db #0x01	; 1
      0000C9 01                     293 	.db #0x01	; 1
      0000CA 81                     294 	.db #0x81	; 129
      0000CB 81                     295 	.db #0x81	; 129
      0000CC 81                     296 	.db #0x81	; 129
      0000CD 81                     297 	.db #0x81	; 129
      0000CE 7E                     298 	.db #0x7e	; 126
      0000CF 7E                     299 	.db #0x7e	; 126
      0000D0 7E                     300 	.db #0x7e	; 126
      0000D1 7E                     301 	.db #0x7e	; 126
      0000D2 81                     302 	.db #0x81	; 129
      0000D3 81                     303 	.db #0x81	; 129
      0000D4 80                     304 	.db #0x80	; 128
      0000D5 80                     305 	.db #0x80	; 128
      0000D6 FE                     306 	.db #0xfe	; 254
      0000D7 FE                     307 	.db #0xfe	; 254
      0000D8 81                     308 	.db #0x81	; 129
      0000D9 81                     309 	.db #0x81	; 129
      0000DA 81                     310 	.db #0x81	; 129
      0000DB 81                     311 	.db #0x81	; 129
      0000DC 81                     312 	.db #0x81	; 129
      0000DD 81                     313 	.db #0x81	; 129
      0000DE 7E                     314 	.db #0x7e	; 126
      0000DF 7E                     315 	.db #0x7e	; 126
      0000E0 FF                     316 	.db #0xff	; 255
      0000E1 FF                     317 	.db #0xff	; 255
      0000E2 81                     318 	.db #0x81	; 129
      0000E3 81                     319 	.db #0x81	; 129
      0000E4 02                     320 	.db #0x02	; 2
      0000E5 02                     321 	.db #0x02	; 2
      0000E6 04                     322 	.db #0x04	; 4
      0000E7 04                     323 	.db #0x04	; 4
      0000E8 08                     324 	.db #0x08	; 8
      0000E9 08                     325 	.db #0x08	; 8
      0000EA 10                     326 	.db #0x10	; 16
      0000EB 10                     327 	.db #0x10	; 16
      0000EC 10                     328 	.db #0x10	; 16
      0000ED 10                     329 	.db #0x10	; 16
      0000EE 38                     330 	.db #0x38	; 56	'8'
      0000EF 38                     331 	.db #0x38	; 56	'8'
      0000F0 7E                     332 	.db #0x7e	; 126
      0000F1 7E                     333 	.db #0x7e	; 126
      0000F2 81                     334 	.db #0x81	; 129
      0000F3 81                     335 	.db #0x81	; 129
      0000F4 81                     336 	.db #0x81	; 129
      0000F5 81                     337 	.db #0x81	; 129
      0000F6 7E                     338 	.db #0x7e	; 126
      0000F7 7E                     339 	.db #0x7e	; 126
      0000F8 81                     340 	.db #0x81	; 129
      0000F9 81                     341 	.db #0x81	; 129
      0000FA 81                     342 	.db #0x81	; 129
      0000FB 81                     343 	.db #0x81	; 129
      0000FC 81                     344 	.db #0x81	; 129
      0000FD 81                     345 	.db #0x81	; 129
      0000FE 7E                     346 	.db #0x7e	; 126
      0000FF 7E                     347 	.db #0x7e	; 126
      000100 7E                     348 	.db #0x7e	; 126
      000101 7E                     349 	.db #0x7e	; 126
      000102 81                     350 	.db #0x81	; 129
      000103 81                     351 	.db #0x81	; 129
      000104 81                     352 	.db #0x81	; 129
      000105 81                     353 	.db #0x81	; 129
      000106 81                     354 	.db #0x81	; 129
      000107 81                     355 	.db #0x81	; 129
      000108 7F                     356 	.db #0x7f	; 127
      000109 7F                     357 	.db #0x7f	; 127
      00010A 01                     358 	.db #0x01	; 1
      00010B 01                     359 	.db #0x01	; 1
      00010C 81                     360 	.db #0x81	; 129
      00010D 81                     361 	.db #0x81	; 129
      00010E 7E                     362 	.db #0x7e	; 126
      00010F 7E                     363 	.db #0x7e	; 126
      000110                        364 _scoreLowerDigit:
      000110 0A                     365 	.db #0x0a	; 10
      000111                        366 _scoreHigherDigit:
      000111 0B                     367 	.db #0x0b	; 11
      000112                        368 _hookX:
      000112 54                     369 	.db #0x54	; 84	'T'
      000113                        370 _spriteSize:
      000113 08                     371 	.db #0x08	; 8
                                    372 ;main.c:57: void moveFishTo(Fish *f, UINT8 x, UINT8 y) {
                                    373 ;	---------------------------------
                                    374 ; Function moveFishTo
                                    375 ; ---------------------------------
      000114                        376 _moveFishTo::
      000114 E8 FC                  377 	add	sp, #-4
                                    378 ;main.c:58: if(f->index == caughtFishIndex) {
      000116 F8 06                  379 	ldhl	sp,	#6
      000118 2A                     380 	ld	a, (hl+)
      000119 4F                     381 	ld	c, a
      00011A 46                     382 	ld	b, (hl)
      00011B 21 04 00               383 	ld	hl, #0x0004
      00011E 09                     384 	add	hl, bc
      00011F 5E                     385 	ld	e, (hl)
      000120 16 00                  386 	ld	d, #0x00
                                    387 ;setupPair	HL
      000122 FAr03r00               388 	ld	a, (#_caughtFishIndex)
      000125 F8 02                  389 	ldhl	sp,	#2
      000127 22                     390 	ld	(hl+), a
      000128 07                     391 	rlca
      000129 9F                     392 	sbc	a, a
      00012A 77                     393 	ld	(hl), a
                                    394 ;main.c:60: f->y = randomRange(40, 150);
      00012B 69                     395 	ld	l, c
      00012C 60                     396 	ld	h, b
      00012D 23                     397 	inc	hl
      00012E 33                     398 	inc	sp
      00012F 33                     399 	inc	sp
      000130 E5                     400 	push	hl
                                    401 ;main.c:58: if(f->index == caughtFishIndex) {
      000131 F8 02                  402 	ldhl	sp,	#2
      000133 7E                     403 	ld	a, (hl)
      000134 93                     404 	sub	a, e
      000135 20 17                  405 	jr	NZ, 00104$
      000137 23                     406 	inc	hl
      000138 7E                     407 	ld	a, (hl)
      000139 92                     408 	sub	a, d
      00013A 20 12                  409 	jr	NZ, 00104$
                                    410 ;main.c:59: f->x = 0;
      00013C AF                     411 	xor	a, a
      00013D 02                     412 	ld	(bc), a
                                    413 ;main.c:60: f->y = randomRange(40, 150);
      00013E C5                     414 	push	bc
      00013F 21 28 96               415 	ld	hl, #0x9628
      000142 E5                     416 	push	hl
      000143 CDr00r00               417 	call	_randomRange
      000146 E1                     418 	pop	hl
      000147 7B                     419 	ld	a, e
      000148 C1                     420 	pop	bc
      000149 E1                     421 	pop	hl
      00014A E5                     422 	push	hl
      00014B 77                     423 	ld	(hl), a
      00014C 18 1D                  424 	jr	00105$
      00014E                        425 00104$:
                                    426 ;main.c:62: f->x = x;
      00014E F8 08                  427 	ldhl	sp,	#8
                                    428 ;main.c:63: f->y = y;
      000150 2A                     429 	ld	a, (hl+)
      000151 02                     430 	ld	(bc), a
      000152 D1                     431 	pop	de
      000153 D5                     432 	push	de
                                    433 ;main.c:64: if(f->x > 160) {
      000154 3A                     434 	ld	a, (hl-)
      000155 12                     435 	ld	(de), a
      000156 3E A0                  436 	ld	a, #0xa0
      000158 96                     437 	sub	a, (hl)
      000159 30 10                  438 	jr	NC, 00105$
                                    439 ;main.c:65: f->y = randomRange(40, 150);
      00015B C5                     440 	push	bc
      00015C 21 28 96               441 	ld	hl, #0x9628
      00015F E5                     442 	push	hl
      000160 CDr00r00               443 	call	_randomRange
      000163 E1                     444 	pop	hl
      000164 7B                     445 	ld	a, e
      000165 C1                     446 	pop	bc
      000166 E1                     447 	pop	hl
      000167 E5                     448 	push	hl
      000168 77                     449 	ld	(hl), a
                                    450 ;main.c:66: f->x = 0;
      000169 AF                     451 	xor	a, a
      00016A 02                     452 	ld	(bc), a
      00016B                        453 00105$:
                                    454 ;main.c:69: move_sprite(f->sprites[0], f->x, f->y);
      00016B D1                     455 	pop	de
      00016C D5                     456 	push	de
      00016D 1A                     457 	ld	a, (de)
      00016E F8 02                  458 	ldhl	sp,	#2
      000170 22                     459 	ld	(hl+), a
      000171 0A                     460 	ld	a, (bc)
      000172 77                     461 	ld	(hl), a
      000173 69                     462 	ld	l, c
                                    463 ;	spillPairReg hl
                                    464 ;	spillPairReg hl
      000174 60                     465 	ld	h, b
                                    466 ;	spillPairReg hl
                                    467 ;	spillPairReg hl
      000175 23                     468 	inc	hl
      000176 23                     469 	inc	hl
      000177 5E                     470 	ld	e, (hl)
                                    471 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      000178 26 00                  472 	ld	h, #0x00
                                    473 ;	spillPairReg hl
                                    474 ;	spillPairReg hl
      00017A 6B                     475 	ld	l, e
      00017B 29                     476 	add	hl, hl
      00017C 29                     477 	add	hl, hl
      00017D 11r00r00               478 	ld	de, #_shadow_OAM
      000180 19                     479 	add	hl, de
      000181 5D                     480 	ld	e, l
      000182 54                     481 	ld	d, h
                                    482 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      000183 F8 02                  483 	ldhl	sp,	#2
      000185 2A                     484 	ld	a, (hl+)
      000186 12                     485 	ld	(de), a
      000187 13                     486 	inc	de
      000188 7E                     487 	ld	a, (hl)
      000189 12                     488 	ld	(de), a
                                    489 ;main.c:70: move_sprite(f->sprites[1], f->x - spriteSize, f->y);
      00018A D1                     490 	pop	de
      00018B D5                     491 	push	de
      00018C 1A                     492 	ld	a, (de)
      00018D 77                     493 	ld	(hl), a
      00018E 0A                     494 	ld	a, (bc)
                                    495 ;setupPair	HL
      00018F 21r13r01               496 	ld	hl, #_spriteSize
      000192 5E                     497 	ld	e, (hl)
      000193 93                     498 	sub	a, e
      000194 5F                     499 	ld	e, a
      000195 03                     500 	inc	bc
      000196 03                     501 	inc	bc
      000197 03                     502 	inc	bc
      000198 0A                     503 	ld	a, (bc)
                                    504 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      000199 6F                     505 	ld	l, a
      00019A 01r00r00               506 	ld	bc, #_shadow_OAM+0
                                    507 ;	spillPairReg hl
                                    508 ;	spillPairReg hl
      00019D 26 00                  509 	ld	h, #0x00
                                    510 ;	spillPairReg hl
                                    511 ;	spillPairReg hl
      00019F 29                     512 	add	hl, hl
      0001A0 29                     513 	add	hl, hl
      0001A1 09                     514 	add	hl, bc
      0001A2 4D                     515 	ld	c, l
      0001A3 44                     516 	ld	b, h
                                    517 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      0001A4 F8 03                  518 	ldhl	sp,	#3
      0001A6 7E                     519 	ld	a, (hl)
      0001A7 02                     520 	ld	(bc), a
      0001A8 03                     521 	inc	bc
      0001A9 7B                     522 	ld	a, e
      0001AA 02                     523 	ld	(bc), a
                                    524 ;main.c:70: move_sprite(f->sprites[1], f->x - spriteSize, f->y);
                                    525 ;main.c:71: }
      0001AB E8 04                  526 	add	sp, #4
      0001AD C9                     527 	ret
                                    528 ;main.c:73: void moveCanTo(Can *c, UINT8 x, UINT8 y) {
                                    529 ;	---------------------------------
                                    530 ; Function moveCanTo
                                    531 ; ---------------------------------
      0001AE                        532 _moveCanTo::
      0001AE 3B                     533 	dec	sp
                                    534 ;main.c:74: if(framecounter % c->moveEveryXFrames == 0) {
      0001AF F8 03                  535 	ldhl	sp,	#3
      0001B1 2A                     536 	ld	a, (hl+)
      0001B2 4F                     537 	ld	c, a
      0001B3 46                     538 	ld	b, (hl)
      0001B4 69                     539 	ld	l, c
                                    540 ;	spillPairReg hl
                                    541 ;	spillPairReg hl
      0001B5 60                     542 	ld	h, b
                                    543 ;	spillPairReg hl
                                    544 ;	spillPairReg hl
      0001B6 23                     545 	inc	hl
      0001B7 23                     546 	inc	hl
      0001B8 23                     547 	inc	hl
      0001B9 5E                     548 	ld	e, (hl)
      0001BA 16 00                  549 	ld	d, #0x00
      0001BC C5                     550 	push	bc
      0001BD D5                     551 	push	de
                                    552 ;setupPair	HL
      0001BE 21r00r00               553 	ld	hl, #_framecounter
                                    554 ;setupPair	HL
      0001C1 2A                     555 	ld	a, (hl+)
      0001C2 5F                     556 	ld	e, a
      0001C3 56                     557 	ld	d, (hl)
      0001C4 D5                     558 	push	de
      0001C5 CDr00r00               559 	call	__moduint
      0001C8 E8 04                  560 	add	sp, #4
      0001CA C1                     561 	pop	bc
      0001CB 7A                     562 	ld	a, d
      0001CC B3                     563 	or	a, e
      0001CD 20 38                  564 	jr	NZ, 00106$
                                    565 ;main.c:75: c->x = x;
      0001CF F8 05                  566 	ldhl	sp,	#5
                                    567 ;main.c:76: c->y = y;
      0001D1 2A                     568 	ld	a, (hl+)
      0001D2 02                     569 	ld	(bc), a
      0001D3 59                     570 	ld	e, c
      0001D4 50                     571 	ld	d, b
      0001D5 13                     572 	inc	de
                                    573 ;main.c:77: if(c->x > 160) {
      0001D6 3A                     574 	ld	a, (hl-)
      0001D7 12                     575 	ld	(de), a
      0001D8 3E A0                  576 	ld	a, #0xa0
      0001DA 96                     577 	sub	a, (hl)
      0001DB 30 10                  578 	jr	NC, 00102$
                                    579 ;main.c:78: c->y = randomRange(40, 150);
      0001DD C5                     580 	push	bc
      0001DE D5                     581 	push	de
      0001DF 21 28 96               582 	ld	hl, #0x9628
      0001E2 E5                     583 	push	hl
      0001E3 CDr00r00               584 	call	_randomRange
      0001E6 E1                     585 	pop	hl
      0001E7 7B                     586 	ld	a, e
      0001E8 D1                     587 	pop	de
      0001E9 C1                     588 	pop	bc
      0001EA 12                     589 	ld	(de), a
                                    590 ;main.c:79: c->x = 0;
      0001EB AF                     591 	xor	a, a
      0001EC 02                     592 	ld	(bc), a
      0001ED                        593 00102$:
                                    594 ;main.c:81: move_sprite(c->sprite, c->x, c->y);
      0001ED 1A                     595 	ld	a, (de)
      0001EE 5F                     596 	ld	e, a
      0001EF 0A                     597 	ld	a, (bc)
      0001F0 F8 00                  598 	ldhl	sp,	#0
      0001F2 77                     599 	ld	(hl), a
      0001F3 03                     600 	inc	bc
      0001F4 03                     601 	inc	bc
      0001F5 0A                     602 	ld	a, (bc)
                                    603 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      0001F6 6F                     604 	ld	l, a
                                    605 ;	spillPairReg hl
                                    606 ;	spillPairReg hl
      0001F7 26 00                  607 	ld	h, #0x00
                                    608 ;	spillPairReg hl
                                    609 ;	spillPairReg hl
      0001F9 29                     610 	add	hl, hl
      0001FA 29                     611 	add	hl, hl
      0001FB 01r00r00               612 	ld	bc, #_shadow_OAM
      0001FE 09                     613 	add	hl, bc
                                    614 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      0001FF 7B                     615 	ld	a, e
      000200 22                     616 	ld	(hl+), a
      000201 4D                     617 	ld	c, l
      000202 44                     618 	ld	b, h
      000203 F8 00                  619 	ldhl	sp,	#0
      000205 7E                     620 	ld	a, (hl)
      000206 02                     621 	ld	(bc), a
                                    622 ;main.c:81: move_sprite(c->sprite, c->x, c->y);
      000207                        623 00106$:
                                    624 ;main.c:83: }
      000207 33                     625 	inc	sp
      000208 C9                     626 	ret
                                    627 ;main.c:85: void init() {
                                    628 ;	---------------------------------
                                    629 ; Function init
                                    630 ; ---------------------------------
      000209                        631 _init::
                                    632 ;main.c:87: fishArr[0].sprites[0] = 1;
      000209 01r02r00               633 	ld	bc, #_fishArr + 2
      00020C 3E 01                  634 	ld	a, #0x01
      00020E 02                     635 	ld	(bc), a
                                    636 ;main.c:88: fishArr[0].sprites[1] = 2;
      00020F 21r03r00               637 	ld	hl, #(_fishArr + 3)
      000212 36 02                  638 	ld	(hl), #0x02
                                    639 ;main.c:89: fishArr[0].index = 0;
      000214 21r04r00               640 	ld	hl, #(_fishArr + 4)
      000217 36 00                  641 	ld	(hl), #0x00
                                    642 ;main.c:90: set_sprite_data(1, 2, FISH);
      000219 11r20r00               643 	ld	de, #_FISH
      00021C D5                     644 	push	de
      00021D 21 01 02               645 	ld	hl, #0x201
      000220 E5                     646 	push	hl
      000221 CDr00r00               647 	call	_set_sprite_data
      000224 E8 04                  648 	add	sp, #4
                                    649 ;main.c:91: set_sprite_tile(fishArr[0].sprites[0], 1);
      000226 0A                     650 	ld	a, (bc)
      000227 4F                     651 	ld	c, a
                                    652 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      000228 26 00                  653 	ld	h, #0x00
                                    654 ;	spillPairReg hl
                                    655 ;	spillPairReg hl
      00022A 69                     656 	ld	l, c
      00022B 29                     657 	add	hl, hl
      00022C 29                     658 	add	hl, hl
      00022D 11r00r00               659 	ld	de, #_shadow_OAM
      000230 19                     660 	add	hl, de
      000231 23                     661 	inc	hl
      000232 23                     662 	inc	hl
      000233 36 01                  663 	ld	(hl), #0x01
                                    664 ;main.c:92: set_sprite_tile(fishArr[0].sprites[1], 2);
      000235 21r03r00               665 	ld	hl, #(_fishArr + 3)
      000238 4E                     666 	ld	c, (hl)
                                    667 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      000239 26 00                  668 	ld	h, #0x00
                                    669 ;	spillPairReg hl
                                    670 ;	spillPairReg hl
      00023B 69                     671 	ld	l, c
      00023C 29                     672 	add	hl, hl
      00023D 29                     673 	add	hl, hl
      00023E 11r00r00               674 	ld	de, #_shadow_OAM
      000241 19                     675 	add	hl, de
      000242 23                     676 	inc	hl
      000243 23                     677 	inc	hl
      000244 36 02                  678 	ld	(hl), #0x02
                                    679 ;main.c:94: fishingRod.yHook = 20;
      000246 21r11r00               680 	ld	hl, #_fishingRod
      000249 36 14                  681 	ld	(hl), #0x14
                                    682 ;main.c:95: fishingRod.hookSprite = 3;
      00024B 01r12r00               683 	ld	bc, #_fishingRod + 1
      00024E 3E 03                  684 	ld	a, #0x03
      000250 02                     685 	ld	(bc), a
                                    686 ;main.c:96: fishingRod.hookSpriteFish = 4;
      000251 21r13r00               687 	ld	hl, #(_fishingRod + 2)
      000254 36 04                  688 	ld	(hl), #0x04
                                    689 ;main.c:97: fishingRod.spriteTile = 3;
      000256 21r14r00               690 	ld	hl, #(_fishingRod + 3)
      000259 36 03                  691 	ld	(hl), #0x03
                                    692 ;main.c:98: set_sprite_data(3, 4, ROD);
      00025B 11r40r00               693 	ld	de, #_ROD
      00025E D5                     694 	push	de
      00025F 21 03 04               695 	ld	hl, #0x403
      000262 E5                     696 	push	hl
      000263 CDr00r00               697 	call	_set_sprite_data
      000266 E8 04                  698 	add	sp, #4
                                    699 ;main.c:99: set_sprite_tile(fishingRod.spriteTile, fishingRod.hookSprite);
      000268 0A                     700 	ld	a, (bc)
      000269 4F                     701 	ld	c, a
      00026A 21r14r00               702 	ld	hl, #(_fishingRod + 3)
                                    703 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      00026D 6E                     704 	ld	l, (hl)
                                    705 ;	spillPairReg hl
                                    706 ;	spillPairReg hl
      00026E 26 00                  707 	ld	h, #0x00
                                    708 ;	spillPairReg hl
                                    709 ;	spillPairReg hl
      000270 29                     710 	add	hl, hl
      000271 29                     711 	add	hl, hl
      000272 11r00r00               712 	ld	de, #_shadow_OAM
      000275 19                     713 	add	hl, de
      000276 23                     714 	inc	hl
      000277 23                     715 	inc	hl
      000278 71                     716 	ld	(hl), c
                                    717 ;main.c:101: set_sprite_data(5, 5, CAN);
      000279 11r60r00               718 	ld	de, #_CAN
      00027C D5                     719 	push	de
      00027D 21 05 05               720 	ld	hl, #0x505
      000280 E5                     721 	push	hl
      000281 CDr00r00               722 	call	_set_sprite_data
      000284 E8 04                  723 	add	sp, #4
                                    724 ;main.c:102: canArr[0].sprite = 5;
      000286 01r07r00               725 	ld	bc, #_canArr + 2
      000289 3E 05                  726 	ld	a, #0x05
      00028B 02                     727 	ld	(bc), a
                                    728 ;main.c:103: canArr[0].x = 50;
      00028C 21r05r00               729 	ld	hl, #_canArr
      00028F 36 32                  730 	ld	(hl), #0x32
                                    731 ;main.c:104: canArr[0].y = 125;
      000291 21r06r00               732 	ld	hl, #(_canArr + 1)
      000294 36 7D                  733 	ld	(hl), #0x7d
                                    734 ;main.c:105: canArr[0].moveEveryXFrames = 1;
      000296 21r08r00               735 	ld	hl, #(_canArr + 3)
      000299 36 01                  736 	ld	(hl), #0x01
                                    737 ;main.c:106: set_sprite_tile(canArr[0].sprite, 5);
      00029B 0A                     738 	ld	a, (bc)
      00029C 4F                     739 	ld	c, a
                                    740 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      00029D 26 00                  741 	ld	h, #0x00
                                    742 ;	spillPairReg hl
                                    743 ;	spillPairReg hl
      00029F 69                     744 	ld	l, c
      0002A0 29                     745 	add	hl, hl
      0002A1 29                     746 	add	hl, hl
      0002A2 11r00r00               747 	ld	de, #_shadow_OAM
      0002A5 19                     748 	add	hl, de
      0002A6 23                     749 	inc	hl
      0002A7 23                     750 	inc	hl
      0002A8 36 05                  751 	ld	(hl), #0x05
                                    752 ;main.c:107: canArr[1].sprite = 7;
      0002AA 01r0Br00               753 	ld	bc, #_canArr + 6
      0002AD 3E 07                  754 	ld	a, #0x07
      0002AF 02                     755 	ld	(bc), a
                                    756 ;main.c:108: canArr[1].x = 90;
      0002B0 21r09r00               757 	ld	hl, #(_canArr + 4)
      0002B3 36 5A                  758 	ld	(hl), #0x5a
                                    759 ;main.c:109: canArr[1].y = 145;
      0002B5 21r0Ar00               760 	ld	hl, #(_canArr + 5)
      0002B8 36 91                  761 	ld	(hl), #0x91
                                    762 ;main.c:110: canArr[1].moveEveryXFrames = 2;
      0002BA 21r0Cr00               763 	ld	hl, #(_canArr + 7)
      0002BD 36 02                  764 	ld	(hl), #0x02
                                    765 ;main.c:111: set_sprite_tile(canArr[1].sprite, 5);
      0002BF 0A                     766 	ld	a, (bc)
      0002C0 4F                     767 	ld	c, a
                                    768 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      0002C1 26 00                  769 	ld	h, #0x00
                                    770 ;	spillPairReg hl
                                    771 ;	spillPairReg hl
      0002C3 69                     772 	ld	l, c
      0002C4 29                     773 	add	hl, hl
      0002C5 29                     774 	add	hl, hl
      0002C6 11r00r00               775 	ld	de, #_shadow_OAM
      0002C9 19                     776 	add	hl, de
      0002CA 23                     777 	inc	hl
      0002CB 23                     778 	inc	hl
      0002CC 36 05                  779 	ld	(hl), #0x05
                                    780 ;main.c:112: canArr[2].sprite = 8;
      0002CE 01r0Fr00               781 	ld	bc, #_canArr + 10
      0002D1 3E 08                  782 	ld	a, #0x08
      0002D3 02                     783 	ld	(bc), a
                                    784 ;main.c:113: canArr[2].x = 70;
      0002D4 21r0Dr00               785 	ld	hl, #(_canArr + 8)
      0002D7 36 46                  786 	ld	(hl), #0x46
                                    787 ;main.c:114: canArr[2].y = 105;
      0002D9 21r0Er00               788 	ld	hl, #(_canArr + 9)
      0002DC 36 69                  789 	ld	(hl), #0x69
                                    790 ;main.c:115: canArr[2].moveEveryXFrames = 3;
      0002DE 21r10r00               791 	ld	hl, #(_canArr + 11)
      0002E1 36 03                  792 	ld	(hl), #0x03
                                    793 ;main.c:116: set_sprite_tile(canArr[2].sprite, 5);
      0002E3 0A                     794 	ld	a, (bc)
      0002E4 4F                     795 	ld	c, a
                                    796 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      0002E5 26 00                  797 	ld	h, #0x00
                                    798 ;	spillPairReg hl
                                    799 ;	spillPairReg hl
      0002E7 69                     800 	ld	l, c
      0002E8 29                     801 	add	hl, hl
      0002E9 29                     802 	add	hl, hl
      0002EA 11r00r00               803 	ld	de, #_shadow_OAM
      0002ED 19                     804 	add	hl, de
      0002EE 23                     805 	inc	hl
      0002EF 23                     806 	inc	hl
      0002F0 36 05                  807 	ld	(hl), #0x05
                                    808 ;main.c:118: set_sprite_data(6, 15, NUMBERS);
      0002F2 11r70r00               809 	ld	de, #_NUMBERS
      0002F5 D5                     810 	push	de
      0002F6 21 06 0F               811 	ld	hl, #0xf06
      0002F9 E5                     812 	push	hl
      0002FA CDr00r00               813 	call	_set_sprite_data
      0002FD E8 04                  814 	add	sp, #4
                                    815 ;main.c:119: set_sprite_tile(scoreLowerDigit, 6);
                                    816 ;setupPair	HL
      0002FF 21r10r01               817 	ld	hl, #_scoreLowerDigit
      000302 4E                     818 	ld	c, (hl)
                                    819 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      000303 26 00                  820 	ld	h, #0x00
                                    821 ;	spillPairReg hl
                                    822 ;	spillPairReg hl
      000305 69                     823 	ld	l, c
      000306 29                     824 	add	hl, hl
      000307 29                     825 	add	hl, hl
      000308 11r00r00               826 	ld	de, #_shadow_OAM
      00030B 19                     827 	add	hl, de
      00030C 23                     828 	inc	hl
      00030D 23                     829 	inc	hl
      00030E 36 06                  830 	ld	(hl), #0x06
                                    831 ;main.c:120: set_sprite_tile(scoreHigherDigit, 6);
                                    832 ;setupPair	HL
      000310 21r11r01               833 	ld	hl, #_scoreHigherDigit
      000313 4E                     834 	ld	c, (hl)
                                    835 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      000314 26 00                  836 	ld	h, #0x00
                                    837 ;	spillPairReg hl
                                    838 ;	spillPairReg hl
      000316 69                     839 	ld	l, c
      000317 29                     840 	add	hl, hl
      000318 29                     841 	add	hl, hl
      000319 11r00r00               842 	ld	de, #_shadow_OAM
      00031C 19                     843 	add	hl, de
      00031D 23                     844 	inc	hl
      00031E 23                     845 	inc	hl
      00031F 36 06                  846 	ld	(hl), #0x06
                                    847 ;main.c:122: DISPLAY_ON;
      000321 F0r00                  848 	ldh	a, (_LCDC_REG + 0)
      000323 F6 80                  849 	or	a, #0x80
      000325 E0r00                  850 	ldh	(_LCDC_REG + 0), a
                                    851 ;main.c:123: SHOW_SPRITES;
      000327 F0r00                  852 	ldh	a, (_LCDC_REG + 0)
      000329 F6 02                  853 	or	a, #0x02
      00032B E0r00                  854 	ldh	(_LCDC_REG + 0), a
                                    855 ;main.c:124: }
      00032D C9                     856 	ret
                                    857 ;main.c:126: bool doesCollide(UINT8 x1, UINT8 y1, UINT8 x2, UINT8 y2) {
                                    858 ;	---------------------------------
                                    859 ; Function doesCollide
                                    860 ; ---------------------------------
      00032E                        861 _doesCollide::
      00032E E8 FA                  862 	add	sp, #-6
                                    863 ;main.c:127: if (x1 < x2 + spriteSize &&
      000330 F8 0A                  864 	ldhl	sp,	#10
      000332 7E                     865 	ld	a, (hl)
      000333 F8 02                  866 	ldhl	sp,	#2
      000335 22                     867 	ld	(hl+), a
      000336 36 00                  868 	ld	(hl), #0x00
                                    869 ;setupPair	HL
      000338 FAr13r01               870 	ld	a, (#_spriteSize)
      00033B F8 00                  871 	ldhl	sp,	#0
      00033D 22                     872 	ld	(hl+), a
      00033E AF                     873 	xor	a, a
      00033F 22                     874 	ld	(hl+), a
      000340 D1                     875 	pop	de
      000341 D5                     876 	push	de
      000342 2A                     877 	ld	a,	(hl+)
      000343 66                     878 	ld	h, (hl)
      000344 6F                     879 	ld	l, a
      000345 19                     880 	add	hl, de
      000346 E5                     881 	push	hl
      000347 7D                     882 	ld	a, l
      000348 F8 06                  883 	ldhl	sp,	#6
      00034A 77                     884 	ld	(hl), a
      00034B E1                     885 	pop	hl
      00034C 7C                     886 	ld	a, h
      00034D F8 05                  887 	ldhl	sp,	#5
      00034F 77                     888 	ld	(hl), a
      000350 F8 08                  889 	ldhl	sp,	#8
      000352 4E                     890 	ld	c, (hl)
      000353 06 00                  891 	ld	b, #0x00
      000355 F8 04                  892 	ldhl	sp,	#4
      000357 79                     893 	ld	a, c
      000358 96                     894 	sub	a, (hl)
      000359 23                     895 	inc	hl
      00035A 78                     896 	ld	a, b
      00035B 9E                     897 	sbc	a, (hl)
      00035C 78                     898 	ld	a, b
      00035D 57                     899 	ld	d, a
      00035E CB 7E                  900 	bit	7, (hl)
      000360 28 07                  901 	jr	Z, 00128$
      000362 CB 7A                  902 	bit	7, d
      000364 20 08                  903 	jr	NZ, 00129$
      000366 BF                     904 	cp	a, a
      000367 18 05                  905 	jr	00129$
      000369                        906 00128$:
      000369 CB 7A                  907 	bit	7, d
      00036B 28 01                  908 	jr	Z, 00129$
      00036D 37                     909 	scf
      00036E                        910 00129$:
      00036E 30 7A                  911 	jr	NC, 00102$
                                    912 ;main.c:128: x1 + spriteSize > x2 &&
      000370 E1                     913 	pop	hl
      000371 E5                     914 	push	hl
      000372 09                     915 	add	hl, bc
      000373 4D                     916 	ld	c, l
      000374 44                     917 	ld	b, h
      000375 F8 02                  918 	ldhl	sp,	#2
      000377 2A                     919 	ld	a, (hl+)
      000378 91                     920 	sub	a, c
      000379 7E                     921 	ld	a, (hl)
      00037A 98                     922 	sbc	a, b
      00037B 56                     923 	ld	d, (hl)
      00037C 78                     924 	ld	a, b
      00037D CB 7F                  925 	bit	7,a
      00037F 28 07                  926 	jr	Z, 00130$
      000381 CB 7A                  927 	bit	7, d
      000383 20 08                  928 	jr	NZ, 00131$
      000385 BF                     929 	cp	a, a
      000386 18 05                  930 	jr	00131$
      000388                        931 00130$:
      000388 CB 7A                  932 	bit	7, d
      00038A 28 01                  933 	jr	Z, 00131$
      00038C 37                     934 	scf
      00038D                        935 00131$:
      00038D 30 5B                  936 	jr	NC, 00102$
                                    937 ;main.c:129: y1 < y2 + spriteSize &&
      00038F F8 0B                  938 	ldhl	sp,	#11
      000391 7E                     939 	ld	a, (hl)
      000392 F8 02                  940 	ldhl	sp,	#2
      000394 22                     941 	ld	(hl+), a
      000395 AF                     942 	xor	a, a
      000396 32                     943 	ld	(hl-), a
      000397 2A                     944 	ld	a, (hl+)
      000398 5F                     945 	ld	e, a
      000399 56                     946 	ld	d, (hl)
      00039A E1                     947 	pop	hl
      00039B E5                     948 	push	hl
      00039C 19                     949 	add	hl, de
      00039D E5                     950 	push	hl
      00039E 7D                     951 	ld	a, l
      00039F F8 06                  952 	ldhl	sp,	#6
      0003A1 77                     953 	ld	(hl), a
      0003A2 E1                     954 	pop	hl
      0003A3 7C                     955 	ld	a, h
      0003A4 F8 05                  956 	ldhl	sp,	#5
      0003A6 77                     957 	ld	(hl), a
      0003A7 F8 09                  958 	ldhl	sp,	#9
      0003A9 4E                     959 	ld	c, (hl)
      0003AA 06 00                  960 	ld	b, #0x00
      0003AC F8 04                  961 	ldhl	sp,	#4
      0003AE 79                     962 	ld	a, c
      0003AF 96                     963 	sub	a, (hl)
      0003B0 23                     964 	inc	hl
      0003B1 78                     965 	ld	a, b
      0003B2 9E                     966 	sbc	a, (hl)
      0003B3 78                     967 	ld	a, b
      0003B4 57                     968 	ld	d, a
      0003B5 CB 7E                  969 	bit	7, (hl)
      0003B7 28 07                  970 	jr	Z, 00132$
      0003B9 CB 7A                  971 	bit	7, d
      0003BB 20 08                  972 	jr	NZ, 00133$
      0003BD BF                     973 	cp	a, a
      0003BE 18 05                  974 	jr	00133$
      0003C0                        975 00132$:
      0003C0 CB 7A                  976 	bit	7, d
      0003C2 28 01                  977 	jr	Z, 00133$
      0003C4 37                     978 	scf
      0003C5                        979 00133$:
      0003C5 30 23                  980 	jr	NC, 00102$
                                    981 ;main.c:130: y1 + spriteSize > y2) {
      0003C7 E1                     982 	pop	hl
      0003C8 E5                     983 	push	hl
      0003C9 09                     984 	add	hl, bc
      0003CA 4D                     985 	ld	c, l
      0003CB 44                     986 	ld	b, h
      0003CC F8 02                  987 	ldhl	sp,	#2
      0003CE 2A                     988 	ld	a, (hl+)
      0003CF 91                     989 	sub	a, c
      0003D0 7E                     990 	ld	a, (hl)
      0003D1 98                     991 	sbc	a, b
      0003D2 56                     992 	ld	d, (hl)
      0003D3 78                     993 	ld	a, b
      0003D4 CB 7F                  994 	bit	7,a
      0003D6 28 07                  995 	jr	Z, 00134$
      0003D8 CB 7A                  996 	bit	7, d
      0003DA 20 08                  997 	jr	NZ, 00135$
      0003DC BF                     998 	cp	a, a
      0003DD 18 05                  999 	jr	00135$
      0003DF                       1000 00134$:
      0003DF CB 7A                 1001 	bit	7, d
      0003E1 28 01                 1002 	jr	Z, 00135$
      0003E3 37                    1003 	scf
      0003E4                       1004 00135$:
      0003E4 30 04                 1005 	jr	NC, 00102$
                                   1006 ;main.c:131: return true;
      0003E6 1E 01                 1007 	ld	e, #0x01
      0003E8 18 02                 1008 	jr	00106$
      0003EA                       1009 00102$:
                                   1010 ;main.c:133: return false;
      0003EA 1E 00                 1011 	ld	e, #0x00
      0003EC                       1012 00106$:
                                   1013 ;main.c:134: }
      0003EC E8 06                 1014 	add	sp, #6
      0003EE C9                    1015 	ret
                                   1016 ;main.c:137: void onCatchFish(){
                                   1017 ;	---------------------------------
                                   1018 ; Function onCatchFish
                                   1019 ; ---------------------------------
      0003EF                       1020 _onCatchFish::
                                   1021 ;main.c:138: set_sprite_tile(fishingRod.spriteTile, fishingRod.hookSpriteFish);
      0003EF 21r13r00              1022 	ld	hl, #_fishingRod + 2
      0003F2 4E                    1023 	ld	c, (hl)
      0003F3 21r14r00              1024 	ld	hl, #_fishingRod + 3
                                   1025 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      0003F6 6E                    1026 	ld	l, (hl)
      0003F7 11r00r00              1027 	ld	de, #_shadow_OAM+0
                                   1028 ;	spillPairReg hl
                                   1029 ;	spillPairReg hl
      0003FA 26 00                 1030 	ld	h, #0x00
                                   1031 ;	spillPairReg hl
                                   1032 ;	spillPairReg hl
      0003FC 29                    1033 	add	hl, hl
      0003FD 29                    1034 	add	hl, hl
      0003FE 19                    1035 	add	hl, de
      0003FF 23                    1036 	inc	hl
      000400 23                    1037 	inc	hl
      000401 71                    1038 	ld	(hl), c
                                   1039 ;main.c:138: set_sprite_tile(fishingRod.spriteTile, fishingRod.hookSpriteFish);
                                   1040 ;main.c:139: }
      000402 C9                    1041 	ret
                                   1042 ;main.c:141: void storeFish(){
                                   1043 ;	---------------------------------
                                   1044 ; Function storeFish
                                   1045 ; ---------------------------------
      000403                       1046 _storeFish::
                                   1047 ;main.c:143: if(caughtFishIndex != -1) {
                                   1048 ;setupPair	HL
      000403 FAr03r00              1049 	ld	a, (#_caughtFishIndex)
      000406 3C                    1050 	inc	a
      000407 C8                    1051 	ret	Z
                                   1052 ;main.c:144: set_sprite_tile(fishingRod.spriteTile, fishingRod.hookSprite);
      000408 21r12r00              1053 	ld	hl, #(_fishingRod + 1)
      00040B 4E                    1054 	ld	c, (hl)
      00040C 21r14r00              1055 	ld	hl, #(_fishingRod + 3)
                                   1056 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      00040F 6E                    1057 	ld	l, (hl)
                                   1058 ;	spillPairReg hl
                                   1059 ;	spillPairReg hl
      000410 26 00                 1060 	ld	h, #0x00
                                   1061 ;	spillPairReg hl
                                   1062 ;	spillPairReg hl
      000412 29                    1063 	add	hl, hl
      000413 29                    1064 	add	hl, hl
      000414 11r00r00              1065 	ld	de, #_shadow_OAM
      000417 19                    1066 	add	hl, de
      000418 23                    1067 	inc	hl
      000419 23                    1068 	inc	hl
      00041A 71                    1069 	ld	(hl), c
                                   1070 ;main.c:145: caughtFishIndex = -1;
                                   1071 ;setupPair	HL
      00041B 21r03r00              1072 	ld	hl, #_caughtFishIndex
      00041E 36 FF                 1073 	ld	(hl), #0xff
                                   1074 ;main.c:146: score++;
                                   1075 ;setupPair	HL
      000420 21r02r00              1076 	ld	hl, #_score
      000423 34                    1077 	inc	(hl)
                                   1078 ;main.c:148: }
      000424 C9                    1079 	ret
                                   1080 ;main.c:150: void collideWith() {
                                   1081 ;	---------------------------------
                                   1082 ; Function collideWith
                                   1083 ; ---------------------------------
      000425                       1084 _collideWith::
      000425 3B                    1085 	dec	sp
      000426 3B                    1086 	dec	sp
                                   1087 ;main.c:152: for(UINT8 i = 0; i < numFish; i++) {
      000427 06 00                 1088 	ld	b, #0x00
      000429                       1089 00110$:
      000429 78                    1090 	ld	a, b
      00042A D6 01                 1091 	sub	a, #0x01
      00042C 30 40                 1092 	jr	NC, 00103$
                                   1093 ;main.c:153: if( doesCollide(hookX + 1, fishingRod.yHook, fishArr[i].x, fishArr[i].y) ) {
      00042E 58                    1094 	ld	e, b
      00042F 16 00                 1095 	ld	d, #0x00
      000431 6B                    1096 	ld	l, e
      000432 62                    1097 	ld	h, d
      000433 29                    1098 	add	hl, hl
      000434 29                    1099 	add	hl, hl
      000435 19                    1100 	add	hl, de
      000436 11r00r00              1101 	ld	de, #_fishArr
      000439 19                    1102 	add	hl, de
      00043A 5D                    1103 	ld	e, l
      00043B 54                    1104 	ld	d, h
      00043C 13                    1105 	inc	de
      00043D 1A                    1106 	ld	a, (de)
      00043E 4F                    1107 	ld	c, a
      00043F 7E                    1108 	ld	a, (hl)
      000440 F8 01                 1109 	ldhl	sp,	#1
      000442 77                    1110 	ld	(hl), a
      000443 FAr11r00              1111 	ld	a, (#_fishingRod + 0)
                                   1112 ;setupPair	HL
      000446 21r12r01              1113 	ld	hl, #_hookX
      000449 56                    1114 	ld	d, (hl)
      00044A 14                    1115 	inc	d
      00044B C5                    1116 	push	bc
      00044C 61                    1117 	ld	h, c
                                   1118 ;	spillPairReg hl
                                   1119 ;	spillPairReg hl
      00044D E5                    1120 	push	hl
      00044E 33                    1121 	inc	sp
      00044F F8 04                 1122 	ldhl	sp,	#4
      000451 66                    1123 	ld	h, (hl)
                                   1124 ;	spillPairReg hl
                                   1125 ;	spillPairReg hl
      000452 E5                    1126 	push	hl
      000453 33                    1127 	inc	sp
      000454 F5                    1128 	push	af
      000455 33                    1129 	inc	sp
      000456 D5                    1130 	push	de
      000457 33                    1131 	inc	sp
      000458 CDr2Er03              1132 	call	_doesCollide
      00045B E8 04                 1133 	add	sp, #4
      00045D 7B                    1134 	ld	a, e
      00045E C1                    1135 	pop	bc
      00045F B7                    1136 	or	a, a
      000460 28 09                 1137 	jr	Z, 00111$
                                   1138 ;main.c:154: onCatchFish();
      000462 C5                    1139 	push	bc
      000463 CDrEFr03              1140 	call	_onCatchFish
      000466 C1                    1141 	pop	bc
                                   1142 ;main.c:155: caughtFishIndex = i;
                                   1143 ;setupPair	HL
      000467 21r03r00              1144 	ld	hl, #_caughtFishIndex
      00046A 70                    1145 	ld	(hl), b
      00046B                       1146 00111$:
                                   1147 ;main.c:152: for(UINT8 i = 0; i < numFish; i++) {
      00046B 04                    1148 	inc	b
      00046C 18 BB                 1149 	jr	00110$
      00046E                       1150 00103$:
                                   1151 ;main.c:158: for(UINT8 i=0; i < numCans; i++) {
      00046E 0E 00                 1152 	ld	c, #0x00
      000470                       1153 00113$:
      000470 79                    1154 	ld	a, c
      000471 D6 03                 1155 	sub	a, #0x03
      000473 30 46                 1156 	jr	NC, 00115$
                                   1157 ;main.c:159: if(canArr[i].x != NULL) {
      000475 69                    1158 	ld	l, c
                                   1159 ;	spillPairReg hl
                                   1160 ;	spillPairReg hl
      000476 26 00                 1161 	ld	h, #0x00
                                   1162 ;	spillPairReg hl
                                   1163 ;	spillPairReg hl
      000478 29                    1164 	add	hl, hl
      000479 29                    1165 	add	hl, hl
      00047A 5D                    1166 	ld	e, l
      00047B 54                    1167 	ld	d, h
      00047C 21r05r00              1168 	ld	hl, #_canArr
      00047F 19                    1169 	add	hl, de
      000480 33                    1170 	inc	sp
      000481 33                    1171 	inc	sp
      000482 5D                    1172 	ld	e, l
      000483 54                    1173 	ld	d, h
      000484 D5                    1174 	push	de
      000485 1A                    1175 	ld	a, (de)
      000486 47                    1176 	ld	b, a
      000487 B7                    1177 	or	a, a
      000488 28 2E                 1178 	jr	Z, 00114$
                                   1179 ;main.c:160: if( doesCollide(hookX + 1, fishingRod.yHook, canArr[i].x, canArr[i].y) ) {
      00048A D1                    1180 	pop	de
      00048B D5                    1181 	push	de
      00048C 13                    1182 	inc	de
      00048D 1A                    1183 	ld	a, (de)
      00048E F8 01                 1184 	ldhl	sp,	#1
      000490 77                    1185 	ld	(hl), a
      000491 FAr11r00              1186 	ld	a, (#_fishingRod + 0)
                                   1187 ;setupPair	HL
      000494 21r12r01              1188 	ld	hl, #_hookX
      000497 5E                    1189 	ld	e, (hl)
      000498 1C                    1190 	inc	e
      000499 C5                    1191 	push	bc
      00049A F8 03                 1192 	ldhl	sp,	#3
      00049C 66                    1193 	ld	h, (hl)
                                   1194 ;	spillPairReg hl
                                   1195 ;	spillPairReg hl
      00049D 68                    1196 	ld	l, b
      00049E E5                    1197 	push	hl
      00049F 57                    1198 	ld	d,a
      0004A0 D5                    1199 	push	de
      0004A1 CDr2Er03              1200 	call	_doesCollide
      0004A4 E8 04                 1201 	add	sp, #4
      0004A6 7B                    1202 	ld	a, e
      0004A7 C1                    1203 	pop	bc
      0004A8 B7                    1204 	or	a, a
      0004A9 28 0D                 1205 	jr	Z, 00114$
                                   1206 ;main.c:161: waitpad(J_START);
      0004AB 3E 80                 1207 	ld	a, #0x80
      0004AD F5                    1208 	push	af
      0004AE 33                    1209 	inc	sp
      0004AF CDr00r00              1210 	call	_waitpad
      0004B2 33                    1211 	inc	sp
                                   1212 ;main.c:162: reset();
      0004B3 C5                    1213 	push	bc
      0004B4 CDr00r00              1214 	call	_reset
      0004B7 C1                    1215 	pop	bc
      0004B8                       1216 00114$:
                                   1217 ;main.c:158: for(UINT8 i=0; i < numCans; i++) {
      0004B8 0C                    1218 	inc	c
      0004B9 18 B5                 1219 	jr	00113$
      0004BB                       1220 00115$:
                                   1221 ;main.c:166: }
      0004BB 33                    1222 	inc	sp
      0004BC 33                    1223 	inc	sp
      0004BD C9                    1224 	ret
                                   1225 ;main.c:168: void handleInput(){
                                   1226 ;	---------------------------------
                                   1227 ; Function handleInput
                                   1228 ; ---------------------------------
      0004BE                       1229 _handleInput::
                                   1230 ;main.c:169: switch(joypad()) {
      0004BE CDr00r00              1231 	call	_joypad
      0004C1 7B                    1232 	ld	a, e
      0004C2 FE 04                 1233 	cp	a, #0x04
      0004C4 28 12                 1234 	jr	Z, 00104$
      0004C6 FE 08                 1235 	cp	a, #0x08
      0004C8 28 3F                 1236 	jr	Z, 00107$
      0004CA D6 10                 1237 	sub	a, #0x10
      0004CC C0                    1238 	ret	NZ
                                   1239 ;main.c:172: if(fishingRod.yHook<=30) {
      0004CD 21r11r00              1240 	ld	hl, #_fishingRod
      0004D0 4E                    1241 	ld	c, (hl)
      0004D1 3E 1E                 1242 	ld	a, #0x1e
      0004D3 91                    1243 	sub	a, c
      0004D4 D8                    1244 	ret	C
                                   1245 ;main.c:173: storeFish();
                                   1246 ;main.c:175: break;
      0004D5 C3r03r04              1247 	jp	_storeFish
                                   1248 ;main.c:177: case J_UP:
      0004D8                       1249 00104$:
                                   1250 ;main.c:178: if(fishingRod.yHook > 20) {
      0004D8 01r11r00              1251 	ld	bc, #_fishingRod+0
      0004DB 0A                    1252 	ld	a, (bc)
      0004DC 5F                    1253 	ld	e, a
      0004DD 3E 14                 1254 	ld	a, #0x14
      0004DF 93                    1255 	sub	a, e
      0004E0 D0                    1256 	ret	NC
                                   1257 ;main.c:179: fishingRod.yHook -= 1;
      0004E1 7B                    1258 	ld	a, e
      0004E2 3D                    1259 	dec	a
      0004E3 02                    1260 	ld	(bc), a
                                   1261 ;main.c:181: color(WHITE, WHITE, SOLID);
      0004E4 C5                    1262 	push	bc
      0004E5 AF                    1263 	xor	a, a
      0004E6 0F                    1264 	rrca
      0004E7 F5                    1265 	push	af
      0004E8 AF                    1266 	xor	a, a
      0004E9 F5                    1267 	push	af
      0004EA 33                    1268 	inc	sp
      0004EB CDr00r00              1269 	call	_color
      0004EE E8 03                 1270 	add	sp, #3
      0004F0 C1                    1271 	pop	bc
                                   1272 ;main.c:178: if(fishingRod.yHook > 20) {
      0004F1 0A                    1273 	ld	a, (bc)
                                   1274 ;main.c:182: line(80, fishingRod.yHook - 16, 80, fishingRod.yHook - 14);
      0004F2 4F                    1275 	ld	c, a
      0004F3 C6 F2                 1276 	add	a, #0xf2
      0004F5 47                    1277 	ld	b, a
      0004F6 79                    1278 	ld	a, c
      0004F7 C6 F0                 1279 	add	a, #0xf0
      0004F9 C5                    1280 	push	bc
      0004FA 33                    1281 	inc	sp
      0004FB 26 50                 1282 	ld	h, #0x50
                                   1283 ;	spillPairReg hl
                                   1284 ;	spillPairReg hl
      0004FD E5                    1285 	push	hl
      0004FE 33                    1286 	inc	sp
      0004FF 67                    1287 	ld	h, a
      000500 2E 50                 1288 	ld	l, #0x50
      000502 E5                    1289 	push	hl
      000503 CDr00r00              1290 	call	_line
      000506 E8 04                 1291 	add	sp, #4
                                   1292 ;main.c:184: break;
      000508 C9                    1293 	ret
                                   1294 ;main.c:186: case J_DOWN:
      000509                       1295 00107$:
                                   1296 ;main.c:187: if(fishingRod.yHook<152) {
      000509 FAr11r00              1297 	ld	a, (#_fishingRod + 0)
      00050C FE 98                 1298 	cp	a, #0x98
      00050E D0                    1299 	ret	NC
                                   1300 ;main.c:188: fishingRod.yHook += 1;
      00050F 3C                    1301 	inc	a
      000510 EAr11r00              1302 	ld	(#_fishingRod),a
                                   1303 ;main.c:189: color(BLACK, BLACK, SOLID);
      000513 AF                    1304 	xor	a, a
      000514 67                    1305 	ld	h, a
      000515 2E 03                 1306 	ld	l, #0x03
      000517 E5                    1307 	push	hl
      000518 3E 03                 1308 	ld	a, #0x03
      00051A F5                    1309 	push	af
      00051B 33                    1310 	inc	sp
      00051C CDr00r00              1311 	call	_color
      00051F E8 03                 1312 	add	sp, #3
                                   1313 ;main.c:187: if(fishingRod.yHook<152) {
      000521 FAr11r00              1314 	ld	a, (#_fishingRod + 0)
                                   1315 ;main.c:190: line(80, fishingRod.yHook - 16, 80, fishingRod.yHook - 17);
      000524 4F                    1316 	ld	c, a
      000525 C6 EF                 1317 	add	a, #0xef
      000527 47                    1318 	ld	b, a
      000528 79                    1319 	ld	a, c
      000529 C6 F0                 1320 	add	a, #0xf0
      00052B C5                    1321 	push	bc
      00052C 33                    1322 	inc	sp
      00052D 26 50                 1323 	ld	h, #0x50
                                   1324 ;	spillPairReg hl
                                   1325 ;	spillPairReg hl
      00052F E5                    1326 	push	hl
      000530 33                    1327 	inc	sp
      000531 67                    1328 	ld	h, a
      000532 2E 50                 1329 	ld	l, #0x50
      000534 E5                    1330 	push	hl
      000535 CDr00r00              1331 	call	_line
      000538 E8 04                 1332 	add	sp, #4
                                   1333 ;main.c:193: }
                                   1334 ;main.c:194: }
      00053A C9                    1335 	ret
                                   1336 ;main.c:196: void main() {
                                   1337 ;	---------------------------------
                                   1338 ; Function main
                                   1339 ; ---------------------------------
      00053B                       1340 _main::
                                   1341 ;main.c:197: init();
      00053B CDr09r02              1342 	call	_init
                                   1343 ;main.c:199: printf(" \n\n\n\n\n\n\n\n    PRESS START!\n");
      00053E 11r8Fr06              1344 	ld	de, #___str_1
      000541 D5                    1345 	push	de
      000542 CDr00r00              1346 	call	_puts
      000545 E1                    1347 	pop	hl
                                   1348 ;main.c:200: waitpad(J_START);
      000546 3E 80                 1349 	ld	a, #0x80
      000548 F5                    1350 	push	af
      000549 33                    1351 	inc	sp
      00054A CDr00r00              1352 	call	_waitpad
      00054D 33                    1353 	inc	sp
                                   1354 ;main.c:201: seed = LY_REG;
      00054E F0r00                 1355 	ldh	a, (_LY_REG + 0)
                                   1356 ;setupPair	HL
      000550 21r15r00              1357 	ld	hl, #_seed
                                   1358 ;setupPair	HL
      000553 22                    1359 	ld	(hl+), a
                                   1360 ;main.c:202: seed |= (UINT16)DIV_REG << 8;
                                   1361 ;setupPair	HL
      000554 AF                    1362 	xor	a, a
      000555 32                    1363 	ld	(hl-), a
      000556 F0r00                 1364 	ldh	a, (_DIV_REG + 0)
      000558 4F                    1365 	ld	c, a
      000559 AF                    1366 	xor	a, a
      00055A B6                    1367 	or	a, (hl)
                                   1368 ;setupPair	HL
                                   1369 ;setupPair	HL
      00055B 22                    1370 	ld	(hl+), a
      00055C 79                    1371 	ld	a, c
      00055D B6                    1372 	or	a, (hl)
                                   1373 ;setupPair	HL
                                   1374 ;main.c:203: initrand(seed);
                                   1375 ;setupPair	HL
      00055E 32                    1376 	ld	(hl-), a
                                   1377 ;setupPair	HL
      00055F 2A                    1378 	ld	a, (hl+)
      000560 4F                    1379 	ld	c, a
      000561 46                    1380 	ld	b, (hl)
      000562 C5                    1381 	push	bc
      000563 CDr00r00              1382 	call	_initrand
      000566 E1                    1383 	pop	hl
                                   1384 ;main.c:205: printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
      000567 11rA9r06              1385 	ld	de, #___str_3
      00056A D5                    1386 	push	de
      00056B CDr00r00              1387 	call	_puts
      00056E E1                    1388 	pop	hl
                                   1389 ;main.c:207: line(80, 0, 80, fishingRod.yHook - 16);
      00056F FAr11r00              1390 	ld	a, (#_fishingRod + 0)
      000572 C6 F0                 1391 	add	a, #0xf0
      000574 67                    1392 	ld	h, a
      000575 2E 50                 1393 	ld	l, #0x50
      000577 E5                    1394 	push	hl
      000578 21 50 00              1395 	ld	hl, #0x50
      00057B E5                    1396 	push	hl
      00057C CDr00r00              1397 	call	_line
      00057F E8 04                 1398 	add	sp, #4
                                   1399 ;main.c:209: color(LTGREY, LTGREY, SOLID);
      000581 AF                    1400 	xor	a, a
      000582 67                    1401 	ld	h, a
      000583 2E 01                 1402 	ld	l, #0x01
      000585 E5                    1403 	push	hl
      000586 3E 01                 1404 	ld	a, #0x01
      000588 F5                    1405 	push	af
      000589 33                    1406 	inc	sp
      00058A CDr00r00              1407 	call	_color
      00058D E8 03                 1408 	add	sp, #3
                                   1409 ;main.c:210: line(0, 20, 70, 20);
      00058F 21 46 14              1410 	ld	hl, #0x1446
      000592 E5                    1411 	push	hl
      000593 21 00 14              1412 	ld	hl, #0x1400
      000596 E5                    1413 	push	hl
      000597 CDr00r00              1414 	call	_line
      00059A E8 04                 1415 	add	sp, #4
                                   1416 ;main.c:211: line(90, 20, 159, 20);
      00059C 21 9F 14              1417 	ld	hl, #0x149f
      00059F E5                    1418 	push	hl
      0005A0 21 5A 14              1419 	ld	hl, #0x145a
      0005A3 E5                    1420 	push	hl
      0005A4 CDr00r00              1421 	call	_line
      0005A7 E8 04                 1422 	add	sp, #4
                                   1423 ;main.c:213: moveFishTo(&fishArr[0], 40, 40);
      0005A9 21 28 28              1424 	ld	hl, #0x2828
      0005AC E5                    1425 	push	hl
      0005AD 11r00r00              1426 	ld	de, #_fishArr
      0005B0 D5                    1427 	push	de
      0005B1 CDr14r01              1428 	call	_moveFishTo
      0005B4 E8 04                 1429 	add	sp, #4
                                   1430 ;main.c:215: while(1) {
      0005B6                       1431 00103$:
                                   1432 ;main.c:216: framecounter++;
                                   1433 ;setupPair	HL
      0005B6 21r00r00              1434 	ld	hl, #_framecounter
      0005B9 34                    1435 	inc	(hl)
      0005BA 20 02                 1436 	jr	NZ, 00131$
                                   1437 ;setupPair	HL
      0005BC 23                    1438 	inc	hl
      0005BD 34                    1439 	inc	(hl)
      0005BE                       1440 00131$:
                                   1441 ;main.c:217: UINT8 joydata = joypad();
      0005BE CDr00r00              1442 	call	_joypad
                                   1443 ;main.c:218: handleInput();
      0005C1 CDrBEr04              1444 	call	_handleInput
                                   1445 ;main.c:219: moveFishTo(&fishArr[0], fishArr[0].x + 2, fishArr[0].y);
      0005C4 21r01r00              1446 	ld	hl, #_fishArr + 1
      0005C7 46                    1447 	ld	b, (hl)
      0005C8 FAr00r00              1448 	ld	a, (#_fishArr + 0)
      0005CB C6 02                 1449 	add	a, #0x02
      0005CD C5                    1450 	push	bc
      0005CE 33                    1451 	inc	sp
      0005CF F5                    1452 	push	af
      0005D0 33                    1453 	inc	sp
      0005D1 11r00r00              1454 	ld	de, #_fishArr
      0005D4 D5                    1455 	push	de
      0005D5 CDr14r01              1456 	call	_moveFishTo
      0005D8 E8 04                 1457 	add	sp, #4
                                   1458 ;main.c:220: move_sprite(fishingRod.spriteTile, hookX, fishingRod.yHook);
      0005DA 21r11r00              1459 	ld	hl, #_fishingRod
      0005DD 46                    1460 	ld	b, (hl)
                                   1461 ;setupPair	HL
      0005DE 21r12r01              1462 	ld	hl, #_hookX
      0005E1 4E                    1463 	ld	c, (hl)
      0005E2 11r14r00              1464 	ld	de, #_fishingRod+3
      0005E5 1A                    1465 	ld	a, (de)
                                   1466 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      0005E6 6F                    1467 	ld	l, a
                                   1468 ;	spillPairReg hl
                                   1469 ;	spillPairReg hl
      0005E7 26 00                 1470 	ld	h, #0x00
                                   1471 ;	spillPairReg hl
                                   1472 ;	spillPairReg hl
      0005E9 29                    1473 	add	hl, hl
      0005EA 29                    1474 	add	hl, hl
      0005EB 11r00r00              1475 	ld	de, #_shadow_OAM
      0005EE 19                    1476 	add	hl, de
                                   1477 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      0005EF 78                    1478 	ld	a, b
      0005F0 22                    1479 	ld	(hl+), a
      0005F1 71                    1480 	ld	(hl), c
                                   1481 ;main.c:222: for(UINT8 i =0; i<numCans; i++) {
      0005F2 0E 00                 1482 	ld	c, #0x00
      0005F4                       1483 00111$:
      0005F4 79                    1484 	ld	a, c
      0005F5 D6 03                 1485 	sub	a, #0x03
      0005F7 30 1F                 1486 	jr	NC, 00101$
                                   1487 ;main.c:223: moveCanTo(&canArr[i], canArr[i].x + 2, canArr[i].y);
      0005F9 69                    1488 	ld	l, c
                                   1489 ;	spillPairReg hl
                                   1490 ;	spillPairReg hl
      0005FA 26 00                 1491 	ld	h, #0x00
                                   1492 ;	spillPairReg hl
                                   1493 ;	spillPairReg hl
      0005FC 29                    1494 	add	hl, hl
      0005FD 29                    1495 	add	hl, hl
      0005FE 11r05r00              1496 	ld	de, #_canArr
      000601 19                    1497 	add	hl, de
      000602 5D                    1498 	ld	e, l
      000603 54                    1499 	ld	d, h
      000604 13                    1500 	inc	de
      000605 1A                    1501 	ld	a, (de)
      000606 46                    1502 	ld	b, (hl)
      000607 04                    1503 	inc	b
      000608 04                    1504 	inc	b
      000609 C5                    1505 	push	bc
      00060A F5                    1506 	push	af
      00060B 33                    1507 	inc	sp
      00060C C5                    1508 	push	bc
      00060D 33                    1509 	inc	sp
      00060E E5                    1510 	push	hl
      00060F CDrAEr01              1511 	call	_moveCanTo
      000612 E8 04                 1512 	add	sp, #4
      000614 C1                    1513 	pop	bc
                                   1514 ;main.c:222: for(UINT8 i =0; i<numCans; i++) {
      000615 0C                    1515 	inc	c
      000616 18 DC                 1516 	jr	00111$
      000618                       1517 00101$:
                                   1518 ;main.c:226: set_sprite_tile(scoreLowerDigit, 6 + (score % 10));
                                   1519 ;setupPair	HL
      000618 21r02r00              1520 	ld	hl, #_score
      00061B 4E                    1521 	ld	c, (hl)
      00061C 06 00                 1522 	ld	b, #0x00
      00061E 11 0A 00              1523 	ld	de, #0x000a
      000621 D5                    1524 	push	de
      000622 C5                    1525 	push	bc
      000623 CDr00r00              1526 	call	__modsint
      000626 E8 04                 1527 	add	sp, #4
      000628 7B                    1528 	ld	a, e
      000629 C6 06                 1529 	add	a, #0x06
      00062B 5F                    1530 	ld	e, a
                                   1531 ;setupPair	HL
      00062C 21r10r01              1532 	ld	hl, #_scoreLowerDigit
      00062F 4E                    1533 	ld	c, (hl)
      000630 41                    1534 	ld	b, c
                                   1535 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      000631 68                    1536 	ld	l, b
                                   1537 ;	spillPairReg hl
                                   1538 ;	spillPairReg hl
      000632 26 00                 1539 	ld	h, #0x00
                                   1540 ;	spillPairReg hl
                                   1541 ;	spillPairReg hl
      000634 29                    1542 	add	hl, hl
      000635 29                    1543 	add	hl, hl
      000636 D5                    1544 	push	de
      000637 11r00r00              1545 	ld	de, #_shadow_OAM
      00063A 19                    1546 	add	hl, de
      00063B 23                    1547 	inc	hl
      00063C 23                    1548 	inc	hl
      00063D D1                    1549 	pop	de
      00063E 73                    1550 	ld	(hl), e
                                   1551 ;main.c:227: set_sprite_tile(scoreHigherDigit, 6 + (score / 10));
                                   1552 ;setupPair	HL
      00063F 21r02r00              1553 	ld	hl, #_score
      000642 5E                    1554 	ld	e, (hl)
      000643 16 00                 1555 	ld	d, #0x00
      000645 C5                    1556 	push	bc
      000646 21 0A 00              1557 	ld	hl, #0x000a
      000649 E5                    1558 	push	hl
      00064A D5                    1559 	push	de
      00064B CDr00r00              1560 	call	__divsint
      00064E E8 04                 1561 	add	sp, #4
      000650 C1                    1562 	pop	bc
      000651 7B                    1563 	ld	a, e
      000652 C6 06                 1564 	add	a, #0x06
      000654 5F                    1565 	ld	e, a
                                   1566 ;setupPair	HL
      000655 21r11r01              1567 	ld	hl, #_scoreHigherDigit
                                   1568 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      000658 6E                    1569 	ld	l, (hl)
                                   1570 ;	spillPairReg hl
                                   1571 ;	spillPairReg hl
      000659 26 00                 1572 	ld	h, #0x00
                                   1573 ;	spillPairReg hl
                                   1574 ;	spillPairReg hl
      00065B 29                    1575 	add	hl, hl
      00065C 29                    1576 	add	hl, hl
      00065D D5                    1577 	push	de
      00065E 11r00r00              1578 	ld	de, #_shadow_OAM
      000661 19                    1579 	add	hl, de
      000662 23                    1580 	inc	hl
      000663 23                    1581 	inc	hl
      000664 D1                    1582 	pop	de
      000665 73                    1583 	ld	(hl), e
                                   1584 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      000666 26 00                 1585 	ld	h, #0x00
                                   1586 ;	spillPairReg hl
                                   1587 ;	spillPairReg hl
      000668 69                    1588 	ld	l, c
      000669 29                    1589 	add	hl, hl
      00066A 29                    1590 	add	hl, hl
      00066B 11r00r00              1591 	ld	de, #_shadow_OAM
      00066E 19                    1592 	add	hl, de
                                   1593 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      00066F 3E 14                 1594 	ld	a, #0x14
      000671 22                    1595 	ld	(hl+), a
      000672 36 9F                 1596 	ld	(hl), #0x9f
                                   1597 ;main.c:229: move_sprite(scoreHigherDigit, 150, 20);
                                   1598 ;setupPair	HL
      000674 21r11r01              1599 	ld	hl, #_scoreHigherDigit
      000677 4E                    1600 	ld	c, (hl)
                                   1601 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      000678 26 00                 1602 	ld	h, #0x00
                                   1603 ;	spillPairReg hl
                                   1604 ;	spillPairReg hl
      00067A 69                    1605 	ld	l, c
      00067B 29                    1606 	add	hl, hl
      00067C 29                    1607 	add	hl, hl
      00067D 11r00r00              1608 	ld	de, #_shadow_OAM
      000680 19                    1609 	add	hl, de
                                   1610 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      000681 3E 14                 1611 	ld	a, #0x14
      000683 22                    1612 	ld	(hl+), a
      000684 36 96                 1613 	ld	(hl), #0x96
                                   1614 ;main.c:230: collideWith();
      000686 CDr25r04              1615 	call	_collideWith
                                   1616 ;main.c:231: wait_vbl_done();
      000689 CDr00r00              1617 	call	_wait_vbl_done
                                   1618 ;main.c:233: }
      00068C C3rB6r05              1619 	jp	00103$
      00068F                       1620 ___str_1:
      00068F 20                    1621 	.ascii " "
      000690 0A                    1622 	.db 0x0a
      000691 0A                    1623 	.db 0x0a
      000692 0A                    1624 	.db 0x0a
      000693 0A                    1625 	.db 0x0a
      000694 0A                    1626 	.db 0x0a
      000695 0A                    1627 	.db 0x0a
      000696 0A                    1628 	.db 0x0a
      000697 0A                    1629 	.db 0x0a
      000698 20 20 20 20 50 52 45  1630 	.ascii "    PRESS START!"
             53 53 20 53 54 41 52
             54 21
      0006A8 00                    1631 	.db 0x00
      0006A9                       1632 ___str_3:
      0006A9 0A                    1633 	.db 0x0a
      0006AA 0A                    1634 	.db 0x0a
      0006AB 0A                    1635 	.db 0x0a
      0006AC 0A                    1636 	.db 0x0a
      0006AD 0A                    1637 	.db 0x0a
      0006AE 0A                    1638 	.db 0x0a
      0006AF 0A                    1639 	.db 0x0a
      0006B0 0A                    1640 	.db 0x0a
      0006B1 0A                    1641 	.db 0x0a
      0006B2 0A                    1642 	.db 0x0a
      0006B3 0A                    1643 	.db 0x0a
      0006B4 0A                    1644 	.db 0x0a
      0006B5 0A                    1645 	.db 0x0a
      0006B6 0A                    1646 	.db 0x0a
      0006B7 0A                    1647 	.db 0x0a
      0006B8 0A                    1648 	.db 0x0a
      0006B9 0A                    1649 	.db 0x0a
      0006BA 00                    1650 	.db 0x00
                                   1651 	.area _CODE
                                   1652 	.area _INITIALIZER
      000000                       1653 __xinit__framecounter:
      000000 00 00                 1654 	.dw #0x0000
      000002                       1655 __xinit__score:
      000002 00                    1656 	.db #0x00	; 0
      000003                       1657 __xinit__caughtFishIndex:
      000003 FF                    1658 	.db #0xff	; -1
                                   1659 	.area _CABS (ABS)
