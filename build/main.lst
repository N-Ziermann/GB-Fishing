                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.6 #12439 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _handleInput
                                     13 	.globl _collideWith
                                     14 	.globl _storeFish
                                     15 	.globl _onCatchFish
                                     16 	.globl _doesCollide
                                     17 	.globl _init
                                     18 	.globl _moveCanTo
                                     19 	.globl _moveFishTo
                                     20 	.globl _randomRange
                                     21 	.globl _rand
                                     22 	.globl _initrand
                                     23 	.globl _puts
                                     24 	.globl _color
                                     25 	.globl _gotogxy
                                     26 	.globl _line
                                     27 	.globl _gprintf
                                     28 	.globl _set_sprite_data
                                     29 	.globl _wait_vbl_done
                                     30 	.globl _reset
                                     31 	.globl _waitpad
                                     32 	.globl _joypad
                                     33 	.globl _caughtFishIndex
                                     34 	.globl _score
                                     35 	.globl _framecounter
                                     36 	.globl _seed
                                     37 	.globl _fishingRod
                                     38 	.globl _canArr
                                     39 	.globl _fishArr
                                     40 	.globl _spriteSize
                                     41 	.globl _hookX
                                     42 	.globl _scoreHigherDigit
                                     43 	.globl _scoreLowerDigit
                                     44 	.globl _NUMBERS
                                     45 	.globl _CAN
                                     46 	.globl _ROD
                                     47 	.globl _FISH
                                     48 ;--------------------------------------------------------
                                     49 ; special function registers
                                     50 ;--------------------------------------------------------
                                     51 ;--------------------------------------------------------
                                     52 ; ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area _DATA
      000000                         55 _fishArr::
      000000                         56 	.ds 5
      000005                         57 _canArr::
      000005                         58 	.ds 12
      000011                         59 _fishingRod::
      000011                         60 	.ds 4
      000015                         61 _seed::
      000015                         62 	.ds 2
                                     63 ;--------------------------------------------------------
                                     64 ; ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area _INITIALIZED
      000000                         67 _framecounter::
      000000                         68 	.ds 2
      000002                         69 _score::
      000002                         70 	.ds 1
      000003                         71 _caughtFishIndex::
      000003                         72 	.ds 1
                                     73 ;--------------------------------------------------------
                                     74 ; absolute external ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area _DABS (ABS)
                                     77 ;--------------------------------------------------------
                                     78 ; global & static initialisations
                                     79 ;--------------------------------------------------------
                                     80 	.area _HOME
                                     81 	.area _GSINIT
                                     82 	.area _GSFINAL
                                     83 	.area _GSINIT
                                     84 ;--------------------------------------------------------
                                     85 ; Home
                                     86 ;--------------------------------------------------------
                                     87 	.area _HOME
                                     88 	.area _HOME
                                     89 ;--------------------------------------------------------
                                     90 ; code
                                     91 ;--------------------------------------------------------
                                     92 	.area _CODE
                                     93 ;main.c:53: UINT8 randomRange(UINT8 start, UINT8 end) {
                                     94 ;	---------------------------------
                                     95 ; Function randomRange
                                     96 ; ---------------------------------
      000000                         97 _randomRange::
                                     98 ;main.c:54: return start + ((UINT8)rand()) % (end - start + (UINT8)1);
      000000 CDr00r00                99 	call	_rand
      000003 F8 03                  100 	ldhl	sp,	#3
      000005 3A                     101 	ld	a, (hl-)
      000006 16 00                  102 	ld	d, #0x00
      000008 4E                     103 	ld	c, (hl)
      000009 06 00                  104 	ld	b, #0x00
      00000B 91                     105 	sub	a, c
      00000C 4F                     106 	ld	c, a
      00000D 7A                     107 	ld	a, d
      00000E 98                     108 	sbc	a, b
      00000F 47                     109 	ld	b, a
      000010 03                     110 	inc	bc
      000011 16 00                  111 	ld	d, #0x00
      000013 C5                     112 	push	bc
      000014 D5                     113 	push	de
      000015 CDr00r00               114 	call	__modsint
      000018 E8 04                  115 	add	sp, #4
      00001A F8 02                  116 	ldhl	sp,	#2
      00001C 7E                     117 	ld	a, (hl)
      00001D 83                     118 	add	a, e
      00001E 5F                     119 	ld	e, a
                                    120 ;main.c:55: }
      00001F C9                     121 	ret
      000020                        122 _FISH:
      000020 00                     123 	.db #0x00	; 0
      000021 F0                     124 	.db #0xf0	; 240
      000022 F0                     125 	.db #0xf0	; 240
      000023 0C                     126 	.db #0x0c	; 12
      000024 FC                     127 	.db #0xfc	; 252
      000025 02                     128 	.db #0x02	; 2
      000026 FE                     129 	.db #0xfe	; 254
      000027 05                     130 	.db #0x05	; 5
      000028 FE                     131 	.db #0xfe	; 254
      000029 01                     132 	.db #0x01	; 1
      00002A FC                     133 	.db #0xfc	; 252
      00002B 02                     134 	.db #0x02	; 2
      00002C F0                     135 	.db #0xf0	; 240
      00002D 0C                     136 	.db #0x0c	; 12
      00002E 00                     137 	.db #0x00	; 0
      00002F F0                     138 	.db #0xf0	; 240
      000030 00                     139 	.db #0x00	; 0
      000031 08                     140 	.db #0x08	; 8
      000032 08                     141 	.db #0x08	; 8
      000033 15                     142 	.db #0x15	; 21
      000034 1D                     143 	.db #0x1d	; 29
      000035 22                     144 	.db #0x22	; 34
      000036 1F                     145 	.db #0x1f	; 31
      000037 20                     146 	.db #0x20	; 32
      000038 1F                     147 	.db #0x1f	; 31
      000039 20                     148 	.db #0x20	; 32
      00003A 1D                     149 	.db #0x1d	; 29
      00003B 22                     150 	.db #0x22	; 34
      00003C 08                     151 	.db #0x08	; 8
      00003D 15                     152 	.db #0x15	; 21
      00003E 00                     153 	.db #0x00	; 0
      00003F 08                     154 	.db #0x08	; 8
      000040                        155 _ROD:
      000040 00                     156 	.db #0x00	; 0
      000041 08                     157 	.db #0x08	; 8
      000042 00                     158 	.db #0x00	; 0
      000043 08                     159 	.db #0x08	; 8
      000044 00                     160 	.db #0x00	; 0
      000045 04                     161 	.db #0x04	; 4
      000046 00                     162 	.db #0x00	; 0
      000047 02                     163 	.db #0x02	; 2
      000048 00                     164 	.db #0x00	; 0
      000049 02                     165 	.db #0x02	; 2
      00004A 00                     166 	.db #0x00	; 0
      00004B 02                     167 	.db #0x02	; 2
      00004C 00                     168 	.db #0x00	; 0
      00004D 24                     169 	.db #0x24	; 36
      00004E 00                     170 	.db #0x00	; 0
      00004F 18                     171 	.db #0x18	; 24
      000050 18                     172 	.db #0x18	; 24
      000051 00                     173 	.db #0x00	; 0
      000052 1C                     174 	.db #0x1c	; 28
      000053 08                     175 	.db #0x08	; 8
      000054 1E                     176 	.db #0x1e	; 30
      000055 00                     177 	.db #0x00	; 0
      000056 07                     178 	.db #0x07	; 7
      000057 00                     179 	.db #0x00	; 0
      000058 43                     180 	.db #0x43	; 67	'C'
      000059 00                     181 	.db #0x00	; 0
      00005A E7                     182 	.db #0xe7	; 231
      00005B 00                     183 	.db #0x00	; 0
      00005C 7E                     184 	.db #0x7e	; 126
      00005D 00                     185 	.db #0x00	; 0
      00005E 3C                     186 	.db #0x3c	; 60
      00005F 00                     187 	.db #0x00	; 0
      000060                        188 _CAN:
      000060 00                     189 	.db #0x00	; 0
      000061 01                     190 	.db #0x01	; 1
      000062 00                     191 	.db #0x00	; 0
      000063 02                     192 	.db #0x02	; 2
      000064 00                     193 	.db #0x00	; 0
      000065 12                     194 	.db #0x12	; 18
      000066 10                     195 	.db #0x10	; 16
      000067 2A                     196 	.db #0x2a	; 42
      000068 38                     197 	.db #0x38	; 56	'8'
      000069 44                     198 	.db #0x44	; 68	'D'
      00006A 70                     199 	.db #0x70	; 112	'p'
      00006B 88                     200 	.db #0x88	; 136
      00006C 20                     201 	.db #0x20	; 32
      00006D 50                     202 	.db #0x50	; 80	'P'
      00006E 00                     203 	.db #0x00	; 0
      00006F 20                     204 	.db #0x20	; 32
      000070                        205 _NUMBERS:
      000070 3C                     206 	.db #0x3c	; 60
      000071 3C                     207 	.db #0x3c	; 60
      000072 42                     208 	.db #0x42	; 66	'B'
      000073 42                     209 	.db #0x42	; 66	'B'
      000074 85                     210 	.db #0x85	; 133
      000075 85                     211 	.db #0x85	; 133
      000076 89                     212 	.db #0x89	; 137
      000077 89                     213 	.db #0x89	; 137
      000078 91                     214 	.db #0x91	; 145
      000079 91                     215 	.db #0x91	; 145
      00007A A1                     216 	.db #0xa1	; 161
      00007B A1                     217 	.db #0xa1	; 161
      00007C 42                     218 	.db #0x42	; 66	'B'
      00007D 42                     219 	.db #0x42	; 66	'B'
      00007E 3C                     220 	.db #0x3c	; 60
      00007F 3C                     221 	.db #0x3c	; 60
      000080 18                     222 	.db #0x18	; 24
      000081 18                     223 	.db #0x18	; 24
      000082 28                     224 	.db #0x28	; 40
      000083 28                     225 	.db #0x28	; 40
      000084 08                     226 	.db #0x08	; 8
      000085 08                     227 	.db #0x08	; 8
      000086 08                     228 	.db #0x08	; 8
      000087 08                     229 	.db #0x08	; 8
      000088 08                     230 	.db #0x08	; 8
      000089 08                     231 	.db #0x08	; 8
      00008A 08                     232 	.db #0x08	; 8
      00008B 08                     233 	.db #0x08	; 8
      00008C 08                     234 	.db #0x08	; 8
      00008D 08                     235 	.db #0x08	; 8
      00008E 3E                     236 	.db #0x3e	; 62
      00008F 3E                     237 	.db #0x3e	; 62
      000090 7E                     238 	.db #0x7e	; 126
      000091 7E                     239 	.db #0x7e	; 126
      000092 81                     240 	.db #0x81	; 129
      000093 81                     241 	.db #0x81	; 129
      000094 01                     242 	.db #0x01	; 1
      000095 01                     243 	.db #0x01	; 1
      000096 06                     244 	.db #0x06	; 6
      000097 06                     245 	.db #0x06	; 6
      000098 18                     246 	.db #0x18	; 24
      000099 18                     247 	.db #0x18	; 24
      00009A 60                     248 	.db #0x60	; 96
      00009B 60                     249 	.db #0x60	; 96
      00009C 81                     250 	.db #0x81	; 129
      00009D 81                     251 	.db #0x81	; 129
      00009E FF                     252 	.db #0xff	; 255
      00009F FF                     253 	.db #0xff	; 255
      0000A0 7E                     254 	.db #0x7e	; 126
      0000A1 7E                     255 	.db #0x7e	; 126
      0000A2 81                     256 	.db #0x81	; 129
      0000A3 81                     257 	.db #0x81	; 129
      0000A4 81                     258 	.db #0x81	; 129
      0000A5 81                     259 	.db #0x81	; 129
      0000A6 0E                     260 	.db #0x0e	; 14
      0000A7 0E                     261 	.db #0x0e	; 14
      0000A8 01                     262 	.db #0x01	; 1
      0000A9 01                     263 	.db #0x01	; 1
      0000AA 81                     264 	.db #0x81	; 129
      0000AB 81                     265 	.db #0x81	; 129
      0000AC 81                     266 	.db #0x81	; 129
      0000AD 81                     267 	.db #0x81	; 129
      0000AE 7E                     268 	.db #0x7e	; 126
      0000AF 7E                     269 	.db #0x7e	; 126
      0000B0 06                     270 	.db #0x06	; 6
      0000B1 06                     271 	.db #0x06	; 6
      0000B2 0A                     272 	.db #0x0a	; 10
      0000B3 0A                     273 	.db #0x0a	; 10
      0000B4 12                     274 	.db #0x12	; 18
      0000B5 12                     275 	.db #0x12	; 18
      0000B6 22                     276 	.db #0x22	; 34
      0000B7 22                     277 	.db #0x22	; 34
      0000B8 42                     278 	.db #0x42	; 66	'B'
      0000B9 42                     279 	.db #0x42	; 66	'B'
      0000BA FF                     280 	.db #0xff	; 255
      0000BB FF                     281 	.db #0xff	; 255
      0000BC 02                     282 	.db #0x02	; 2
      0000BD 02                     283 	.db #0x02	; 2
      0000BE 07                     284 	.db #0x07	; 7
      0000BF 07                     285 	.db #0x07	; 7
      0000C0 FF                     286 	.db #0xff	; 255
      0000C1 FF                     287 	.db #0xff	; 255
      0000C2 81                     288 	.db #0x81	; 129
      0000C3 81                     289 	.db #0x81	; 129
      0000C4 80                     290 	.db #0x80	; 128
      0000C5 80                     291 	.db #0x80	; 128
      0000C6 FE                     292 	.db #0xfe	; 254
      0000C7 FE                     293 	.db #0xfe	; 254
      0000C8 01                     294 	.db #0x01	; 1
      0000C9 01                     295 	.db #0x01	; 1
      0000CA 81                     296 	.db #0x81	; 129
      0000CB 81                     297 	.db #0x81	; 129
      0000CC 81                     298 	.db #0x81	; 129
      0000CD 81                     299 	.db #0x81	; 129
      0000CE 7E                     300 	.db #0x7e	; 126
      0000CF 7E                     301 	.db #0x7e	; 126
      0000D0 7E                     302 	.db #0x7e	; 126
      0000D1 7E                     303 	.db #0x7e	; 126
      0000D2 81                     304 	.db #0x81	; 129
      0000D3 81                     305 	.db #0x81	; 129
      0000D4 80                     306 	.db #0x80	; 128
      0000D5 80                     307 	.db #0x80	; 128
      0000D6 FE                     308 	.db #0xfe	; 254
      0000D7 FE                     309 	.db #0xfe	; 254
      0000D8 81                     310 	.db #0x81	; 129
      0000D9 81                     311 	.db #0x81	; 129
      0000DA 81                     312 	.db #0x81	; 129
      0000DB 81                     313 	.db #0x81	; 129
      0000DC 81                     314 	.db #0x81	; 129
      0000DD 81                     315 	.db #0x81	; 129
      0000DE 7E                     316 	.db #0x7e	; 126
      0000DF 7E                     317 	.db #0x7e	; 126
      0000E0 FF                     318 	.db #0xff	; 255
      0000E1 FF                     319 	.db #0xff	; 255
      0000E2 81                     320 	.db #0x81	; 129
      0000E3 81                     321 	.db #0x81	; 129
      0000E4 02                     322 	.db #0x02	; 2
      0000E5 02                     323 	.db #0x02	; 2
      0000E6 04                     324 	.db #0x04	; 4
      0000E7 04                     325 	.db #0x04	; 4
      0000E8 08                     326 	.db #0x08	; 8
      0000E9 08                     327 	.db #0x08	; 8
      0000EA 10                     328 	.db #0x10	; 16
      0000EB 10                     329 	.db #0x10	; 16
      0000EC 10                     330 	.db #0x10	; 16
      0000ED 10                     331 	.db #0x10	; 16
      0000EE 38                     332 	.db #0x38	; 56	'8'
      0000EF 38                     333 	.db #0x38	; 56	'8'
      0000F0 7E                     334 	.db #0x7e	; 126
      0000F1 7E                     335 	.db #0x7e	; 126
      0000F2 81                     336 	.db #0x81	; 129
      0000F3 81                     337 	.db #0x81	; 129
      0000F4 81                     338 	.db #0x81	; 129
      0000F5 81                     339 	.db #0x81	; 129
      0000F6 7E                     340 	.db #0x7e	; 126
      0000F7 7E                     341 	.db #0x7e	; 126
      0000F8 81                     342 	.db #0x81	; 129
      0000F9 81                     343 	.db #0x81	; 129
      0000FA 81                     344 	.db #0x81	; 129
      0000FB 81                     345 	.db #0x81	; 129
      0000FC 81                     346 	.db #0x81	; 129
      0000FD 81                     347 	.db #0x81	; 129
      0000FE 7E                     348 	.db #0x7e	; 126
      0000FF 7E                     349 	.db #0x7e	; 126
      000100 7E                     350 	.db #0x7e	; 126
      000101 7E                     351 	.db #0x7e	; 126
      000102 81                     352 	.db #0x81	; 129
      000103 81                     353 	.db #0x81	; 129
      000104 81                     354 	.db #0x81	; 129
      000105 81                     355 	.db #0x81	; 129
      000106 81                     356 	.db #0x81	; 129
      000107 81                     357 	.db #0x81	; 129
      000108 7F                     358 	.db #0x7f	; 127
      000109 7F                     359 	.db #0x7f	; 127
      00010A 01                     360 	.db #0x01	; 1
      00010B 01                     361 	.db #0x01	; 1
      00010C 81                     362 	.db #0x81	; 129
      00010D 81                     363 	.db #0x81	; 129
      00010E 7E                     364 	.db #0x7e	; 126
      00010F 7E                     365 	.db #0x7e	; 126
      000110                        366 _scoreLowerDigit:
      000110 0A                     367 	.db #0x0a	; 10
      000111                        368 _scoreHigherDigit:
      000111 0B                     369 	.db #0x0b	; 11
      000112                        370 _hookX:
      000112 54                     371 	.db #0x54	; 84	'T'
      000113                        372 _spriteSize:
      000113 08                     373 	.db #0x08	; 8
                                    374 ;main.c:57: void moveFishTo(Fish *f, UINT8 x, UINT8 y) {
                                    375 ;	---------------------------------
                                    376 ; Function moveFishTo
                                    377 ; ---------------------------------
      000114                        378 _moveFishTo::
      000114 E8 FC                  379 	add	sp, #-4
                                    380 ;main.c:58: if(f->index == caughtFishIndex) {
      000116 F8 06                  381 	ldhl	sp,	#6
      000118 2A                     382 	ld	a, (hl+)
      000119 4F                     383 	ld	c, a
      00011A 46                     384 	ld	b, (hl)
      00011B 21 04 00               385 	ld	hl, #0x0004
      00011E 09                     386 	add	hl, bc
      00011F 5E                     387 	ld	e, (hl)
      000120 16 00                  388 	ld	d, #0x00
                                    389 ;setupPair	HL
      000122 FAr03r00               390 	ld	a, (#_caughtFishIndex)
      000125 F8 02                  391 	ldhl	sp,	#2
      000127 22                     392 	ld	(hl+), a
      000128 07                     393 	rlca
      000129 9F                     394 	sbc	a, a
      00012A 77                     395 	ld	(hl), a
                                    396 ;main.c:60: f->y = randomRange(40, 150);
      00012B 69                     397 	ld	l, c
      00012C 60                     398 	ld	h, b
      00012D 23                     399 	inc	hl
      00012E 33                     400 	inc	sp
      00012F 33                     401 	inc	sp
      000130 E5                     402 	push	hl
                                    403 ;main.c:58: if(f->index == caughtFishIndex) {
      000131 F8 02                  404 	ldhl	sp,	#2
      000133 7E                     405 	ld	a, (hl)
      000134 93                     406 	sub	a, e
      000135 20 17                  407 	jr	NZ, 00104$
      000137 23                     408 	inc	hl
      000138 7E                     409 	ld	a, (hl)
      000139 92                     410 	sub	a, d
      00013A 20 12                  411 	jr	NZ, 00104$
                                    412 ;main.c:59: f->x = 0;
      00013C AF                     413 	xor	a, a
      00013D 02                     414 	ld	(bc), a
                                    415 ;main.c:60: f->y = randomRange(40, 150);
      00013E C5                     416 	push	bc
      00013F 21 28 96               417 	ld	hl, #0x9628
      000142 E5                     418 	push	hl
      000143 CDr00r00               419 	call	_randomRange
      000146 E1                     420 	pop	hl
      000147 7B                     421 	ld	a, e
      000148 C1                     422 	pop	bc
      000149 E1                     423 	pop	hl
      00014A E5                     424 	push	hl
      00014B 77                     425 	ld	(hl), a
      00014C 18 1D                  426 	jr	00105$
      00014E                        427 00104$:
                                    428 ;main.c:62: f->x = x;
      00014E F8 08                  429 	ldhl	sp,	#8
                                    430 ;main.c:63: f->y = y;
      000150 2A                     431 	ld	a, (hl+)
      000151 02                     432 	ld	(bc), a
      000152 D1                     433 	pop	de
      000153 D5                     434 	push	de
                                    435 ;main.c:64: if(f->x > 160) {
      000154 3A                     436 	ld	a, (hl-)
      000155 12                     437 	ld	(de), a
      000156 3E A0                  438 	ld	a, #0xa0
      000158 96                     439 	sub	a, (hl)
      000159 30 10                  440 	jr	NC, 00105$
                                    441 ;main.c:65: f->y = randomRange(40, 150);
      00015B C5                     442 	push	bc
      00015C 21 28 96               443 	ld	hl, #0x9628
      00015F E5                     444 	push	hl
      000160 CDr00r00               445 	call	_randomRange
      000163 E1                     446 	pop	hl
      000164 7B                     447 	ld	a, e
      000165 C1                     448 	pop	bc
      000166 E1                     449 	pop	hl
      000167 E5                     450 	push	hl
      000168 77                     451 	ld	(hl), a
                                    452 ;main.c:66: f->x = 0;
      000169 AF                     453 	xor	a, a
      00016A 02                     454 	ld	(bc), a
      00016B                        455 00105$:
                                    456 ;main.c:69: move_sprite(f->sprites[0], f->x, f->y);
      00016B D1                     457 	pop	de
      00016C D5                     458 	push	de
      00016D 1A                     459 	ld	a, (de)
      00016E F8 02                  460 	ldhl	sp,	#2
      000170 22                     461 	ld	(hl+), a
      000171 0A                     462 	ld	a, (bc)
      000172 77                     463 	ld	(hl), a
      000173 69                     464 	ld	l, c
                                    465 ;	spillPairReg hl
                                    466 ;	spillPairReg hl
      000174 60                     467 	ld	h, b
                                    468 ;	spillPairReg hl
                                    469 ;	spillPairReg hl
      000175 23                     470 	inc	hl
      000176 23                     471 	inc	hl
      000177 5E                     472 	ld	e, (hl)
                                    473 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      000178 26 00                  474 	ld	h, #0x00
                                    475 ;	spillPairReg hl
                                    476 ;	spillPairReg hl
      00017A 6B                     477 	ld	l, e
      00017B 29                     478 	add	hl, hl
      00017C 29                     479 	add	hl, hl
      00017D 11r00r00               480 	ld	de, #_shadow_OAM
      000180 19                     481 	add	hl, de
      000181 5D                     482 	ld	e, l
      000182 54                     483 	ld	d, h
                                    484 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      000183 F8 02                  485 	ldhl	sp,	#2
      000185 2A                     486 	ld	a, (hl+)
      000186 12                     487 	ld	(de), a
      000187 13                     488 	inc	de
      000188 7E                     489 	ld	a, (hl)
      000189 12                     490 	ld	(de), a
                                    491 ;main.c:70: move_sprite(f->sprites[1], f->x - spriteSize, f->y);
      00018A D1                     492 	pop	de
      00018B D5                     493 	push	de
      00018C 1A                     494 	ld	a, (de)
      00018D 77                     495 	ld	(hl), a
      00018E 0A                     496 	ld	a, (bc)
                                    497 ;setupPair	HL
      00018F 21r13r01               498 	ld	hl, #_spriteSize
      000192 5E                     499 	ld	e, (hl)
      000193 93                     500 	sub	a, e
      000194 5F                     501 	ld	e, a
      000195 03                     502 	inc	bc
      000196 03                     503 	inc	bc
      000197 03                     504 	inc	bc
      000198 0A                     505 	ld	a, (bc)
                                    506 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      000199 6F                     507 	ld	l, a
      00019A 01r00r00               508 	ld	bc, #_shadow_OAM+0
                                    509 ;	spillPairReg hl
                                    510 ;	spillPairReg hl
      00019D 26 00                  511 	ld	h, #0x00
                                    512 ;	spillPairReg hl
                                    513 ;	spillPairReg hl
      00019F 29                     514 	add	hl, hl
      0001A0 29                     515 	add	hl, hl
      0001A1 09                     516 	add	hl, bc
      0001A2 4D                     517 	ld	c, l
      0001A3 44                     518 	ld	b, h
                                    519 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      0001A4 F8 03                  520 	ldhl	sp,	#3
      0001A6 7E                     521 	ld	a, (hl)
      0001A7 02                     522 	ld	(bc), a
      0001A8 03                     523 	inc	bc
      0001A9 7B                     524 	ld	a, e
      0001AA 02                     525 	ld	(bc), a
                                    526 ;main.c:70: move_sprite(f->sprites[1], f->x - spriteSize, f->y);
                                    527 ;main.c:71: }
      0001AB E8 04                  528 	add	sp, #4
      0001AD C9                     529 	ret
                                    530 ;main.c:73: void moveCanTo(Can *c, UINT8 x, UINT8 y) {
                                    531 ;	---------------------------------
                                    532 ; Function moveCanTo
                                    533 ; ---------------------------------
      0001AE                        534 _moveCanTo::
      0001AE 3B                     535 	dec	sp
                                    536 ;main.c:74: if(framecounter % c->moveEveryXFrames == 0) {
      0001AF F8 03                  537 	ldhl	sp,	#3
      0001B1 2A                     538 	ld	a, (hl+)
      0001B2 4F                     539 	ld	c, a
      0001B3 46                     540 	ld	b, (hl)
      0001B4 69                     541 	ld	l, c
                                    542 ;	spillPairReg hl
                                    543 ;	spillPairReg hl
      0001B5 60                     544 	ld	h, b
                                    545 ;	spillPairReg hl
                                    546 ;	spillPairReg hl
      0001B6 23                     547 	inc	hl
      0001B7 23                     548 	inc	hl
      0001B8 23                     549 	inc	hl
      0001B9 5E                     550 	ld	e, (hl)
      0001BA 16 00                  551 	ld	d, #0x00
      0001BC C5                     552 	push	bc
      0001BD D5                     553 	push	de
                                    554 ;setupPair	HL
      0001BE 21r00r00               555 	ld	hl, #_framecounter
                                    556 ;setupPair	HL
      0001C1 2A                     557 	ld	a, (hl+)
      0001C2 5F                     558 	ld	e, a
      0001C3 56                     559 	ld	d, (hl)
      0001C4 D5                     560 	push	de
      0001C5 CDr00r00               561 	call	__moduint
      0001C8 E8 04                  562 	add	sp, #4
      0001CA C1                     563 	pop	bc
      0001CB 7A                     564 	ld	a, d
      0001CC B3                     565 	or	a, e
      0001CD 20 38                  566 	jr	NZ, 00106$
                                    567 ;main.c:75: c->x = x;
      0001CF F8 05                  568 	ldhl	sp,	#5
                                    569 ;main.c:76: c->y = y;
      0001D1 2A                     570 	ld	a, (hl+)
      0001D2 02                     571 	ld	(bc), a
      0001D3 59                     572 	ld	e, c
      0001D4 50                     573 	ld	d, b
      0001D5 13                     574 	inc	de
                                    575 ;main.c:77: if(c->x > 160) {
      0001D6 3A                     576 	ld	a, (hl-)
      0001D7 12                     577 	ld	(de), a
      0001D8 3E A0                  578 	ld	a, #0xa0
      0001DA 96                     579 	sub	a, (hl)
      0001DB 30 10                  580 	jr	NC, 00102$
                                    581 ;main.c:78: c->y = randomRange(40, 150);
      0001DD C5                     582 	push	bc
      0001DE D5                     583 	push	de
      0001DF 21 28 96               584 	ld	hl, #0x9628
      0001E2 E5                     585 	push	hl
      0001E3 CDr00r00               586 	call	_randomRange
      0001E6 E1                     587 	pop	hl
      0001E7 7B                     588 	ld	a, e
      0001E8 D1                     589 	pop	de
      0001E9 C1                     590 	pop	bc
      0001EA 12                     591 	ld	(de), a
                                    592 ;main.c:79: c->x = 0;
      0001EB AF                     593 	xor	a, a
      0001EC 02                     594 	ld	(bc), a
      0001ED                        595 00102$:
                                    596 ;main.c:81: move_sprite(c->sprite, c->x, c->y);
      0001ED 1A                     597 	ld	a, (de)
      0001EE 5F                     598 	ld	e, a
      0001EF 0A                     599 	ld	a, (bc)
      0001F0 F8 00                  600 	ldhl	sp,	#0
      0001F2 77                     601 	ld	(hl), a
      0001F3 03                     602 	inc	bc
      0001F4 03                     603 	inc	bc
      0001F5 0A                     604 	ld	a, (bc)
                                    605 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      0001F6 6F                     606 	ld	l, a
                                    607 ;	spillPairReg hl
                                    608 ;	spillPairReg hl
      0001F7 26 00                  609 	ld	h, #0x00
                                    610 ;	spillPairReg hl
                                    611 ;	spillPairReg hl
      0001F9 29                     612 	add	hl, hl
      0001FA 29                     613 	add	hl, hl
      0001FB 01r00r00               614 	ld	bc, #_shadow_OAM
      0001FE 09                     615 	add	hl, bc
                                    616 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      0001FF 7B                     617 	ld	a, e
      000200 22                     618 	ld	(hl+), a
      000201 4D                     619 	ld	c, l
      000202 44                     620 	ld	b, h
      000203 F8 00                  621 	ldhl	sp,	#0
      000205 7E                     622 	ld	a, (hl)
      000206 02                     623 	ld	(bc), a
                                    624 ;main.c:81: move_sprite(c->sprite, c->x, c->y);
      000207                        625 00106$:
                                    626 ;main.c:83: }
      000207 33                     627 	inc	sp
      000208 C9                     628 	ret
                                    629 ;main.c:85: void init() {
                                    630 ;	---------------------------------
                                    631 ; Function init
                                    632 ; ---------------------------------
      000209                        633 _init::
                                    634 ;main.c:87: fishArr[0].sprites[0] = 1;
      000209 01r02r00               635 	ld	bc, #_fishArr + 2
      00020C 3E 01                  636 	ld	a, #0x01
      00020E 02                     637 	ld	(bc), a
                                    638 ;main.c:88: fishArr[0].sprites[1] = 2;
      00020F 21r03r00               639 	ld	hl, #(_fishArr + 3)
      000212 36 02                  640 	ld	(hl), #0x02
                                    641 ;main.c:89: fishArr[0].index = 0;
      000214 21r04r00               642 	ld	hl, #(_fishArr + 4)
      000217 36 00                  643 	ld	(hl), #0x00
                                    644 ;main.c:90: set_sprite_data(1, 2, FISH);
      000219 11r20r00               645 	ld	de, #_FISH
      00021C D5                     646 	push	de
      00021D 21 01 02               647 	ld	hl, #0x201
      000220 E5                     648 	push	hl
      000221 CDr00r00               649 	call	_set_sprite_data
      000224 E8 04                  650 	add	sp, #4
                                    651 ;main.c:91: set_sprite_tile(fishArr[0].sprites[0], 1);
      000226 0A                     652 	ld	a, (bc)
      000227 4F                     653 	ld	c, a
                                    654 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      000228 26 00                  655 	ld	h, #0x00
                                    656 ;	spillPairReg hl
                                    657 ;	spillPairReg hl
      00022A 69                     658 	ld	l, c
      00022B 29                     659 	add	hl, hl
      00022C 29                     660 	add	hl, hl
      00022D 11r00r00               661 	ld	de, #_shadow_OAM
      000230 19                     662 	add	hl, de
      000231 23                     663 	inc	hl
      000232 23                     664 	inc	hl
      000233 36 01                  665 	ld	(hl), #0x01
                                    666 ;main.c:92: set_sprite_tile(fishArr[0].sprites[1], 2);
      000235 21r03r00               667 	ld	hl, #(_fishArr + 3)
      000238 4E                     668 	ld	c, (hl)
                                    669 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      000239 26 00                  670 	ld	h, #0x00
                                    671 ;	spillPairReg hl
                                    672 ;	spillPairReg hl
      00023B 69                     673 	ld	l, c
      00023C 29                     674 	add	hl, hl
      00023D 29                     675 	add	hl, hl
      00023E 11r00r00               676 	ld	de, #_shadow_OAM
      000241 19                     677 	add	hl, de
      000242 23                     678 	inc	hl
      000243 23                     679 	inc	hl
      000244 36 02                  680 	ld	(hl), #0x02
                                    681 ;main.c:94: fishingRod.yHook = 20;
      000246 21r11r00               682 	ld	hl, #_fishingRod
      000249 36 14                  683 	ld	(hl), #0x14
                                    684 ;main.c:95: fishingRod.hookSprite = 3;
      00024B 01r12r00               685 	ld	bc, #_fishingRod + 1
      00024E 3E 03                  686 	ld	a, #0x03
      000250 02                     687 	ld	(bc), a
                                    688 ;main.c:96: fishingRod.hookSpriteFish = 4;
      000251 21r13r00               689 	ld	hl, #(_fishingRod + 2)
      000254 36 04                  690 	ld	(hl), #0x04
                                    691 ;main.c:97: fishingRod.spriteTile = 3;
      000256 21r14r00               692 	ld	hl, #(_fishingRod + 3)
      000259 36 03                  693 	ld	(hl), #0x03
                                    694 ;main.c:98: set_sprite_data(3, 4, ROD);
      00025B 11r40r00               695 	ld	de, #_ROD
      00025E D5                     696 	push	de
      00025F 21 03 04               697 	ld	hl, #0x403
      000262 E5                     698 	push	hl
      000263 CDr00r00               699 	call	_set_sprite_data
      000266 E8 04                  700 	add	sp, #4
                                    701 ;main.c:99: set_sprite_tile(fishingRod.spriteTile, fishingRod.hookSprite);
      000268 0A                     702 	ld	a, (bc)
      000269 4F                     703 	ld	c, a
      00026A 21r14r00               704 	ld	hl, #(_fishingRod + 3)
                                    705 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      00026D 6E                     706 	ld	l, (hl)
                                    707 ;	spillPairReg hl
                                    708 ;	spillPairReg hl
      00026E 26 00                  709 	ld	h, #0x00
                                    710 ;	spillPairReg hl
                                    711 ;	spillPairReg hl
      000270 29                     712 	add	hl, hl
      000271 29                     713 	add	hl, hl
      000272 11r00r00               714 	ld	de, #_shadow_OAM
      000275 19                     715 	add	hl, de
      000276 23                     716 	inc	hl
      000277 23                     717 	inc	hl
      000278 71                     718 	ld	(hl), c
                                    719 ;main.c:101: set_sprite_data(5, 5, CAN);
      000279 11r60r00               720 	ld	de, #_CAN
      00027C D5                     721 	push	de
      00027D 21 05 05               722 	ld	hl, #0x505
      000280 E5                     723 	push	hl
      000281 CDr00r00               724 	call	_set_sprite_data
      000284 E8 04                  725 	add	sp, #4
                                    726 ;main.c:102: canArr[0].sprite = 5;
      000286 01r07r00               727 	ld	bc, #_canArr + 2
      000289 3E 05                  728 	ld	a, #0x05
      00028B 02                     729 	ld	(bc), a
                                    730 ;main.c:103: canArr[0].x = 50;
      00028C 21r05r00               731 	ld	hl, #_canArr
      00028F 36 32                  732 	ld	(hl), #0x32
                                    733 ;main.c:104: canArr[0].y = 125;
      000291 21r06r00               734 	ld	hl, #(_canArr + 1)
      000294 36 7D                  735 	ld	(hl), #0x7d
                                    736 ;main.c:105: canArr[0].moveEveryXFrames = 1;
      000296 21r08r00               737 	ld	hl, #(_canArr + 3)
      000299 36 01                  738 	ld	(hl), #0x01
                                    739 ;main.c:106: set_sprite_tile(canArr[0].sprite, 5);
      00029B 0A                     740 	ld	a, (bc)
      00029C 4F                     741 	ld	c, a
                                    742 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      00029D 26 00                  743 	ld	h, #0x00
                                    744 ;	spillPairReg hl
                                    745 ;	spillPairReg hl
      00029F 69                     746 	ld	l, c
      0002A0 29                     747 	add	hl, hl
      0002A1 29                     748 	add	hl, hl
      0002A2 11r00r00               749 	ld	de, #_shadow_OAM
      0002A5 19                     750 	add	hl, de
      0002A6 23                     751 	inc	hl
      0002A7 23                     752 	inc	hl
      0002A8 36 05                  753 	ld	(hl), #0x05
                                    754 ;main.c:107: canArr[1].sprite = 7;
      0002AA 01r0Br00               755 	ld	bc, #_canArr + 6
      0002AD 3E 07                  756 	ld	a, #0x07
      0002AF 02                     757 	ld	(bc), a
                                    758 ;main.c:108: canArr[1].x = 90;
      0002B0 21r09r00               759 	ld	hl, #(_canArr + 4)
      0002B3 36 5A                  760 	ld	(hl), #0x5a
                                    761 ;main.c:109: canArr[1].y = 145;
      0002B5 21r0Ar00               762 	ld	hl, #(_canArr + 5)
      0002B8 36 91                  763 	ld	(hl), #0x91
                                    764 ;main.c:110: canArr[1].moveEveryXFrames = 2;
      0002BA 21r0Cr00               765 	ld	hl, #(_canArr + 7)
      0002BD 36 02                  766 	ld	(hl), #0x02
                                    767 ;main.c:111: set_sprite_tile(canArr[1].sprite, 5);
      0002BF 0A                     768 	ld	a, (bc)
      0002C0 4F                     769 	ld	c, a
                                    770 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      0002C1 26 00                  771 	ld	h, #0x00
                                    772 ;	spillPairReg hl
                                    773 ;	spillPairReg hl
      0002C3 69                     774 	ld	l, c
      0002C4 29                     775 	add	hl, hl
      0002C5 29                     776 	add	hl, hl
      0002C6 11r00r00               777 	ld	de, #_shadow_OAM
      0002C9 19                     778 	add	hl, de
      0002CA 23                     779 	inc	hl
      0002CB 23                     780 	inc	hl
      0002CC 36 05                  781 	ld	(hl), #0x05
                                    782 ;main.c:112: canArr[2].sprite = 8;
      0002CE 01r0Fr00               783 	ld	bc, #_canArr + 10
      0002D1 3E 08                  784 	ld	a, #0x08
      0002D3 02                     785 	ld	(bc), a
                                    786 ;main.c:113: canArr[2].x = 70;
      0002D4 21r0Dr00               787 	ld	hl, #(_canArr + 8)
      0002D7 36 46                  788 	ld	(hl), #0x46
                                    789 ;main.c:114: canArr[2].y = 105;
      0002D9 21r0Er00               790 	ld	hl, #(_canArr + 9)
      0002DC 36 69                  791 	ld	(hl), #0x69
                                    792 ;main.c:115: canArr[2].moveEveryXFrames = 3;
      0002DE 21r10r00               793 	ld	hl, #(_canArr + 11)
      0002E1 36 03                  794 	ld	(hl), #0x03
                                    795 ;main.c:116: set_sprite_tile(canArr[2].sprite, 5);
      0002E3 0A                     796 	ld	a, (bc)
      0002E4 4F                     797 	ld	c, a
                                    798 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      0002E5 26 00                  799 	ld	h, #0x00
                                    800 ;	spillPairReg hl
                                    801 ;	spillPairReg hl
      0002E7 69                     802 	ld	l, c
      0002E8 29                     803 	add	hl, hl
      0002E9 29                     804 	add	hl, hl
      0002EA 11r00r00               805 	ld	de, #_shadow_OAM
      0002ED 19                     806 	add	hl, de
      0002EE 23                     807 	inc	hl
      0002EF 23                     808 	inc	hl
      0002F0 36 05                  809 	ld	(hl), #0x05
                                    810 ;main.c:118: set_sprite_data(6, 15, NUMBERS);
      0002F2 11r70r00               811 	ld	de, #_NUMBERS
      0002F5 D5                     812 	push	de
      0002F6 21 06 0F               813 	ld	hl, #0xf06
      0002F9 E5                     814 	push	hl
      0002FA CDr00r00               815 	call	_set_sprite_data
      0002FD E8 04                  816 	add	sp, #4
                                    817 ;main.c:119: set_sprite_tile(scoreLowerDigit, 6);
                                    818 ;setupPair	HL
      0002FF 21r10r01               819 	ld	hl, #_scoreLowerDigit
      000302 4E                     820 	ld	c, (hl)
                                    821 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      000303 26 00                  822 	ld	h, #0x00
                                    823 ;	spillPairReg hl
                                    824 ;	spillPairReg hl
      000305 69                     825 	ld	l, c
      000306 29                     826 	add	hl, hl
      000307 29                     827 	add	hl, hl
      000308 11r00r00               828 	ld	de, #_shadow_OAM
      00030B 19                     829 	add	hl, de
      00030C 23                     830 	inc	hl
      00030D 23                     831 	inc	hl
      00030E 36 06                  832 	ld	(hl), #0x06
                                    833 ;main.c:120: set_sprite_tile(scoreHigherDigit, 6);
                                    834 ;setupPair	HL
      000310 21r11r01               835 	ld	hl, #_scoreHigherDigit
      000313 4E                     836 	ld	c, (hl)
                                    837 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      000314 26 00                  838 	ld	h, #0x00
                                    839 ;	spillPairReg hl
                                    840 ;	spillPairReg hl
      000316 69                     841 	ld	l, c
      000317 29                     842 	add	hl, hl
      000318 29                     843 	add	hl, hl
      000319 11r00r00               844 	ld	de, #_shadow_OAM
      00031C 19                     845 	add	hl, de
      00031D 23                     846 	inc	hl
      00031E 23                     847 	inc	hl
      00031F 36 06                  848 	ld	(hl), #0x06
                                    849 ;main.c:122: DISPLAY_ON;
      000321 F0r00                  850 	ldh	a, (_LCDC_REG + 0)
      000323 F6 80                  851 	or	a, #0x80
      000325 E0r00                  852 	ldh	(_LCDC_REG + 0), a
                                    853 ;main.c:123: SHOW_SPRITES;
      000327 F0r00                  854 	ldh	a, (_LCDC_REG + 0)
      000329 F6 02                  855 	or	a, #0x02
      00032B E0r00                  856 	ldh	(_LCDC_REG + 0), a
                                    857 ;main.c:124: }
      00032D C9                     858 	ret
                                    859 ;main.c:126: bool doesCollide(UINT8 x1, UINT8 y1, UINT8 x2, UINT8 y2) {
                                    860 ;	---------------------------------
                                    861 ; Function doesCollide
                                    862 ; ---------------------------------
      00032E                        863 _doesCollide::
      00032E E8 FA                  864 	add	sp, #-6
                                    865 ;main.c:127: if (x1 < x2 + spriteSize &&
      000330 F8 0A                  866 	ldhl	sp,	#10
      000332 7E                     867 	ld	a, (hl)
      000333 F8 02                  868 	ldhl	sp,	#2
      000335 22                     869 	ld	(hl+), a
      000336 36 00                  870 	ld	(hl), #0x00
                                    871 ;setupPair	HL
      000338 FAr13r01               872 	ld	a, (#_spriteSize)
      00033B F8 00                  873 	ldhl	sp,	#0
      00033D 22                     874 	ld	(hl+), a
      00033E AF                     875 	xor	a, a
      00033F 22                     876 	ld	(hl+), a
      000340 D1                     877 	pop	de
      000341 D5                     878 	push	de
      000342 2A                     879 	ld	a,	(hl+)
      000343 66                     880 	ld	h, (hl)
      000344 6F                     881 	ld	l, a
      000345 19                     882 	add	hl, de
      000346 E5                     883 	push	hl
      000347 7D                     884 	ld	a, l
      000348 F8 06                  885 	ldhl	sp,	#6
      00034A 77                     886 	ld	(hl), a
      00034B E1                     887 	pop	hl
      00034C 7C                     888 	ld	a, h
      00034D F8 05                  889 	ldhl	sp,	#5
      00034F 77                     890 	ld	(hl), a
      000350 F8 08                  891 	ldhl	sp,	#8
      000352 4E                     892 	ld	c, (hl)
      000353 06 00                  893 	ld	b, #0x00
      000355 F8 04                  894 	ldhl	sp,	#4
      000357 79                     895 	ld	a, c
      000358 96                     896 	sub	a, (hl)
      000359 23                     897 	inc	hl
      00035A 78                     898 	ld	a, b
      00035B 9E                     899 	sbc	a, (hl)
      00035C 78                     900 	ld	a, b
      00035D 57                     901 	ld	d, a
      00035E CB 7E                  902 	bit	7, (hl)
      000360 28 07                  903 	jr	Z, 00128$
      000362 CB 7A                  904 	bit	7, d
      000364 20 08                  905 	jr	NZ, 00129$
      000366 BF                     906 	cp	a, a
      000367 18 05                  907 	jr	00129$
      000369                        908 00128$:
      000369 CB 7A                  909 	bit	7, d
      00036B 28 01                  910 	jr	Z, 00129$
      00036D 37                     911 	scf
      00036E                        912 00129$:
      00036E 30 7A                  913 	jr	NC, 00102$
                                    914 ;main.c:128: x1 + spriteSize > x2 &&
      000370 E1                     915 	pop	hl
      000371 E5                     916 	push	hl
      000372 09                     917 	add	hl, bc
      000373 4D                     918 	ld	c, l
      000374 44                     919 	ld	b, h
      000375 F8 02                  920 	ldhl	sp,	#2
      000377 2A                     921 	ld	a, (hl+)
      000378 91                     922 	sub	a, c
      000379 7E                     923 	ld	a, (hl)
      00037A 98                     924 	sbc	a, b
      00037B 56                     925 	ld	d, (hl)
      00037C 78                     926 	ld	a, b
      00037D CB 7F                  927 	bit	7,a
      00037F 28 07                  928 	jr	Z, 00130$
      000381 CB 7A                  929 	bit	7, d
      000383 20 08                  930 	jr	NZ, 00131$
      000385 BF                     931 	cp	a, a
      000386 18 05                  932 	jr	00131$
      000388                        933 00130$:
      000388 CB 7A                  934 	bit	7, d
      00038A 28 01                  935 	jr	Z, 00131$
      00038C 37                     936 	scf
      00038D                        937 00131$:
      00038D 30 5B                  938 	jr	NC, 00102$
                                    939 ;main.c:129: y1 < y2 + spriteSize &&
      00038F F8 0B                  940 	ldhl	sp,	#11
      000391 7E                     941 	ld	a, (hl)
      000392 F8 02                  942 	ldhl	sp,	#2
      000394 22                     943 	ld	(hl+), a
      000395 AF                     944 	xor	a, a
      000396 32                     945 	ld	(hl-), a
      000397 2A                     946 	ld	a, (hl+)
      000398 5F                     947 	ld	e, a
      000399 56                     948 	ld	d, (hl)
      00039A E1                     949 	pop	hl
      00039B E5                     950 	push	hl
      00039C 19                     951 	add	hl, de
      00039D E5                     952 	push	hl
      00039E 7D                     953 	ld	a, l
      00039F F8 06                  954 	ldhl	sp,	#6
      0003A1 77                     955 	ld	(hl), a
      0003A2 E1                     956 	pop	hl
      0003A3 7C                     957 	ld	a, h
      0003A4 F8 05                  958 	ldhl	sp,	#5
      0003A6 77                     959 	ld	(hl), a
      0003A7 F8 09                  960 	ldhl	sp,	#9
      0003A9 4E                     961 	ld	c, (hl)
      0003AA 06 00                  962 	ld	b, #0x00
      0003AC F8 04                  963 	ldhl	sp,	#4
      0003AE 79                     964 	ld	a, c
      0003AF 96                     965 	sub	a, (hl)
      0003B0 23                     966 	inc	hl
      0003B1 78                     967 	ld	a, b
      0003B2 9E                     968 	sbc	a, (hl)
      0003B3 78                     969 	ld	a, b
      0003B4 57                     970 	ld	d, a
      0003B5 CB 7E                  971 	bit	7, (hl)
      0003B7 28 07                  972 	jr	Z, 00132$
      0003B9 CB 7A                  973 	bit	7, d
      0003BB 20 08                  974 	jr	NZ, 00133$
      0003BD BF                     975 	cp	a, a
      0003BE 18 05                  976 	jr	00133$
      0003C0                        977 00132$:
      0003C0 CB 7A                  978 	bit	7, d
      0003C2 28 01                  979 	jr	Z, 00133$
      0003C4 37                     980 	scf
      0003C5                        981 00133$:
      0003C5 30 23                  982 	jr	NC, 00102$
                                    983 ;main.c:130: y1 + spriteSize > y2) {
      0003C7 E1                     984 	pop	hl
      0003C8 E5                     985 	push	hl
      0003C9 09                     986 	add	hl, bc
      0003CA 4D                     987 	ld	c, l
      0003CB 44                     988 	ld	b, h
      0003CC F8 02                  989 	ldhl	sp,	#2
      0003CE 2A                     990 	ld	a, (hl+)
      0003CF 91                     991 	sub	a, c
      0003D0 7E                     992 	ld	a, (hl)
      0003D1 98                     993 	sbc	a, b
      0003D2 56                     994 	ld	d, (hl)
      0003D3 78                     995 	ld	a, b
      0003D4 CB 7F                  996 	bit	7,a
      0003D6 28 07                  997 	jr	Z, 00134$
      0003D8 CB 7A                  998 	bit	7, d
      0003DA 20 08                  999 	jr	NZ, 00135$
      0003DC BF                    1000 	cp	a, a
      0003DD 18 05                 1001 	jr	00135$
      0003DF                       1002 00134$:
      0003DF CB 7A                 1003 	bit	7, d
      0003E1 28 01                 1004 	jr	Z, 00135$
      0003E3 37                    1005 	scf
      0003E4                       1006 00135$:
      0003E4 30 04                 1007 	jr	NC, 00102$
                                   1008 ;main.c:131: return true;
      0003E6 1E 01                 1009 	ld	e, #0x01
      0003E8 18 02                 1010 	jr	00106$
      0003EA                       1011 00102$:
                                   1012 ;main.c:133: return false;
      0003EA 1E 00                 1013 	ld	e, #0x00
      0003EC                       1014 00106$:
                                   1015 ;main.c:134: }
      0003EC E8 06                 1016 	add	sp, #6
      0003EE C9                    1017 	ret
                                   1018 ;main.c:137: void onCatchFish(){
                                   1019 ;	---------------------------------
                                   1020 ; Function onCatchFish
                                   1021 ; ---------------------------------
      0003EF                       1022 _onCatchFish::
                                   1023 ;main.c:138: set_sprite_tile(fishingRod.spriteTile, fishingRod.hookSpriteFish);
      0003EF 21r13r00              1024 	ld	hl, #_fishingRod + 2
      0003F2 4E                    1025 	ld	c, (hl)
      0003F3 21r14r00              1026 	ld	hl, #_fishingRod + 3
                                   1027 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      0003F6 6E                    1028 	ld	l, (hl)
      0003F7 11r00r00              1029 	ld	de, #_shadow_OAM+0
                                   1030 ;	spillPairReg hl
                                   1031 ;	spillPairReg hl
      0003FA 26 00                 1032 	ld	h, #0x00
                                   1033 ;	spillPairReg hl
                                   1034 ;	spillPairReg hl
      0003FC 29                    1035 	add	hl, hl
      0003FD 29                    1036 	add	hl, hl
      0003FE 19                    1037 	add	hl, de
      0003FF 23                    1038 	inc	hl
      000400 23                    1039 	inc	hl
      000401 71                    1040 	ld	(hl), c
                                   1041 ;main.c:138: set_sprite_tile(fishingRod.spriteTile, fishingRod.hookSpriteFish);
                                   1042 ;main.c:139: }
      000402 C9                    1043 	ret
                                   1044 ;main.c:141: void storeFish(){
                                   1045 ;	---------------------------------
                                   1046 ; Function storeFish
                                   1047 ; ---------------------------------
      000403                       1048 _storeFish::
                                   1049 ;main.c:143: if(caughtFishIndex != -1) {
                                   1050 ;setupPair	HL
      000403 FAr03r00              1051 	ld	a, (#_caughtFishIndex)
      000406 3C                    1052 	inc	a
      000407 C8                    1053 	ret	Z
                                   1054 ;main.c:144: set_sprite_tile(fishingRod.spriteTile, fishingRod.hookSprite);
      000408 21r12r00              1055 	ld	hl, #(_fishingRod + 1)
      00040B 4E                    1056 	ld	c, (hl)
      00040C 21r14r00              1057 	ld	hl, #(_fishingRod + 3)
                                   1058 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      00040F 6E                    1059 	ld	l, (hl)
                                   1060 ;	spillPairReg hl
                                   1061 ;	spillPairReg hl
      000410 26 00                 1062 	ld	h, #0x00
                                   1063 ;	spillPairReg hl
                                   1064 ;	spillPairReg hl
      000412 29                    1065 	add	hl, hl
      000413 29                    1066 	add	hl, hl
      000414 11r00r00              1067 	ld	de, #_shadow_OAM
      000417 19                    1068 	add	hl, de
      000418 23                    1069 	inc	hl
      000419 23                    1070 	inc	hl
      00041A 71                    1071 	ld	(hl), c
                                   1072 ;main.c:145: caughtFishIndex = -1;
                                   1073 ;setupPair	HL
      00041B 21r03r00              1074 	ld	hl, #_caughtFishIndex
      00041E 36 FF                 1075 	ld	(hl), #0xff
                                   1076 ;main.c:146: score++;
                                   1077 ;setupPair	HL
      000420 21r02r00              1078 	ld	hl, #_score
      000423 34                    1079 	inc	(hl)
                                   1080 ;main.c:148: }
      000424 C9                    1081 	ret
                                   1082 ;main.c:150: void collideWith() {
                                   1083 ;	---------------------------------
                                   1084 ; Function collideWith
                                   1085 ; ---------------------------------
      000425                       1086 _collideWith::
      000425 3B                    1087 	dec	sp
      000426 3B                    1088 	dec	sp
                                   1089 ;main.c:152: for(UINT8 i = 0; i < numFish; i++) {
      000427 06 00                 1090 	ld	b, #0x00
      000429                       1091 00110$:
      000429 78                    1092 	ld	a, b
      00042A D6 01                 1093 	sub	a, #0x01
      00042C 30 40                 1094 	jr	NC, 00103$
                                   1095 ;main.c:153: if( doesCollide(hookX + 1, fishingRod.yHook, fishArr[i].x, fishArr[i].y) ) {
      00042E 58                    1096 	ld	e, b
      00042F 16 00                 1097 	ld	d, #0x00
      000431 6B                    1098 	ld	l, e
      000432 62                    1099 	ld	h, d
      000433 29                    1100 	add	hl, hl
      000434 29                    1101 	add	hl, hl
      000435 19                    1102 	add	hl, de
      000436 11r00r00              1103 	ld	de, #_fishArr
      000439 19                    1104 	add	hl, de
      00043A 5D                    1105 	ld	e, l
      00043B 54                    1106 	ld	d, h
      00043C 13                    1107 	inc	de
      00043D 1A                    1108 	ld	a, (de)
      00043E 4F                    1109 	ld	c, a
      00043F 7E                    1110 	ld	a, (hl)
      000440 F8 01                 1111 	ldhl	sp,	#1
      000442 77                    1112 	ld	(hl), a
      000443 FAr11r00              1113 	ld	a, (#_fishingRod + 0)
                                   1114 ;setupPair	HL
      000446 21r12r01              1115 	ld	hl, #_hookX
      000449 56                    1116 	ld	d, (hl)
      00044A 14                    1117 	inc	d
      00044B C5                    1118 	push	bc
      00044C 61                    1119 	ld	h, c
                                   1120 ;	spillPairReg hl
                                   1121 ;	spillPairReg hl
      00044D E5                    1122 	push	hl
      00044E 33                    1123 	inc	sp
      00044F F8 04                 1124 	ldhl	sp,	#4
      000451 66                    1125 	ld	h, (hl)
                                   1126 ;	spillPairReg hl
                                   1127 ;	spillPairReg hl
      000452 E5                    1128 	push	hl
      000453 33                    1129 	inc	sp
      000454 F5                    1130 	push	af
      000455 33                    1131 	inc	sp
      000456 D5                    1132 	push	de
      000457 33                    1133 	inc	sp
      000458 CDr2Er03              1134 	call	_doesCollide
      00045B E8 04                 1135 	add	sp, #4
      00045D 7B                    1136 	ld	a, e
      00045E C1                    1137 	pop	bc
      00045F B7                    1138 	or	a, a
      000460 28 09                 1139 	jr	Z, 00111$
                                   1140 ;main.c:154: onCatchFish();
      000462 C5                    1141 	push	bc
      000463 CDrEFr03              1142 	call	_onCatchFish
      000466 C1                    1143 	pop	bc
                                   1144 ;main.c:155: caughtFishIndex = i;
                                   1145 ;setupPair	HL
      000467 21r03r00              1146 	ld	hl, #_caughtFishIndex
      00046A 70                    1147 	ld	(hl), b
      00046B                       1148 00111$:
                                   1149 ;main.c:152: for(UINT8 i = 0; i < numFish; i++) {
      00046B 04                    1150 	inc	b
      00046C 18 BB                 1151 	jr	00110$
      00046E                       1152 00103$:
                                   1153 ;main.c:158: for(UINT8 i=0; i < numCans; i++) {
      00046E 0E 00                 1154 	ld	c, #0x00
      000470                       1155 00113$:
      000470 79                    1156 	ld	a, c
      000471 D6 03                 1157 	sub	a, #0x03
      000473 30 65                 1158 	jr	NC, 00115$
                                   1159 ;main.c:159: if(canArr[i].x != NULL) {
      000475 69                    1160 	ld	l, c
                                   1161 ;	spillPairReg hl
                                   1162 ;	spillPairReg hl
      000476 26 00                 1163 	ld	h, #0x00
                                   1164 ;	spillPairReg hl
                                   1165 ;	spillPairReg hl
      000478 29                    1166 	add	hl, hl
      000479 29                    1167 	add	hl, hl
      00047A 5D                    1168 	ld	e, l
      00047B 54                    1169 	ld	d, h
      00047C 21r05r00              1170 	ld	hl, #_canArr
      00047F 19                    1171 	add	hl, de
      000480 33                    1172 	inc	sp
      000481 33                    1173 	inc	sp
      000482 5D                    1174 	ld	e, l
      000483 54                    1175 	ld	d, h
      000484 D5                    1176 	push	de
      000485 1A                    1177 	ld	a, (de)
      000486 47                    1178 	ld	b, a
      000487 B7                    1179 	or	a, a
      000488 28 4D                 1180 	jr	Z, 00114$
                                   1181 ;main.c:160: if( doesCollide(hookX + 1, fishingRod.yHook, canArr[i].x, canArr[i].y) ) {
      00048A D1                    1182 	pop	de
      00048B D5                    1183 	push	de
      00048C 13                    1184 	inc	de
      00048D 1A                    1185 	ld	a, (de)
      00048E F8 01                 1186 	ldhl	sp,	#1
      000490 77                    1187 	ld	(hl), a
      000491 FAr11r00              1188 	ld	a, (#_fishingRod + 0)
                                   1189 ;setupPair	HL
      000494 21r12r01              1190 	ld	hl, #_hookX
      000497 5E                    1191 	ld	e, (hl)
      000498 1C                    1192 	inc	e
      000499 C5                    1193 	push	bc
      00049A F8 03                 1194 	ldhl	sp,	#3
      00049C 66                    1195 	ld	h, (hl)
                                   1196 ;	spillPairReg hl
                                   1197 ;	spillPairReg hl
      00049D 68                    1198 	ld	l, b
      00049E E5                    1199 	push	hl
      00049F 57                    1200 	ld	d,a
      0004A0 D5                    1201 	push	de
      0004A1 CDr2Er03              1202 	call	_doesCollide
      0004A4 E8 04                 1203 	add	sp, #4
      0004A6 7B                    1204 	ld	a, e
      0004A7 C1                    1205 	pop	bc
      0004A8 B7                    1206 	or	a, a
      0004A9 28 2C                 1207 	jr	Z, 00114$
                                   1208 ;main.c:161: color(BLACK,WHITE,SOLID);
      0004AB C5                    1209 	push	bc
      0004AC AF                    1210 	xor	a, a
      0004AD 0F                    1211 	rrca
      0004AE F5                    1212 	push	af
      0004AF AF                    1213 	xor	a, a
      0004B0 3E 03                 1214 	ld	a, #0x03
      0004B2 F5                    1215 	push	af
      0004B3 33                    1216 	inc	sp
      0004B4 CDr00r00              1217 	call	_color
      0004B7 E8 03                 1218 	add	sp, #3
      0004B9 21 05 08              1219 	ld	hl, #0x805
      0004BC E5                    1220 	push	hl
      0004BD CDr00r00              1221 	call	_gotogxy
      0004C0 E1                    1222 	pop	hl
      0004C1 11rDDr04              1223 	ld	de, #___str_0
      0004C4 D5                    1224 	push	de
      0004C5 CDr00r00              1225 	call	_gprintf
      0004C8 E1                    1226 	pop	hl
      0004C9 C1                    1227 	pop	bc
                                   1228 ;main.c:164: waitpad(J_START);
      0004CA 3E 80                 1229 	ld	a, #0x80
      0004CC F5                    1230 	push	af
      0004CD 33                    1231 	inc	sp
      0004CE CDr00r00              1232 	call	_waitpad
      0004D1 33                    1233 	inc	sp
                                   1234 ;main.c:165: reset();
      0004D2 C5                    1235 	push	bc
      0004D3 CDr00r00              1236 	call	_reset
      0004D6 C1                    1237 	pop	bc
      0004D7                       1238 00114$:
                                   1239 ;main.c:158: for(UINT8 i=0; i < numCans; i++) {
      0004D7 0C                    1240 	inc	c
      0004D8 18 96                 1241 	jr	00113$
      0004DA                       1242 00115$:
                                   1243 ;main.c:169: }
      0004DA 33                    1244 	inc	sp
      0004DB 33                    1245 	inc	sp
      0004DC C9                    1246 	ret
      0004DD                       1247 ___str_0:
      0004DD 47 41 4D 45 20 4F 56  1248 	.ascii "GAME OVER!"
             45 52 21
      0004E7 00                    1249 	.db 0x00
                                   1250 ;main.c:171: void handleInput(){
                                   1251 ;	---------------------------------
                                   1252 ; Function handleInput
                                   1253 ; ---------------------------------
      0004E8                       1254 _handleInput::
                                   1255 ;main.c:172: switch(joypad()) {
      0004E8 CDr00r00              1256 	call	_joypad
      0004EB 7B                    1257 	ld	a, e
      0004EC FE 04                 1258 	cp	a, #0x04
      0004EE 28 12                 1259 	jr	Z, 00104$
      0004F0 FE 08                 1260 	cp	a, #0x08
      0004F2 28 3F                 1261 	jr	Z, 00107$
      0004F4 D6 10                 1262 	sub	a, #0x10
      0004F6 C0                    1263 	ret	NZ
                                   1264 ;main.c:175: if(fishingRod.yHook<=30) {
      0004F7 21r11r00              1265 	ld	hl, #_fishingRod
      0004FA 4E                    1266 	ld	c, (hl)
      0004FB 3E 1E                 1267 	ld	a, #0x1e
      0004FD 91                    1268 	sub	a, c
      0004FE D8                    1269 	ret	C
                                   1270 ;main.c:176: storeFish();
                                   1271 ;main.c:178: break;
      0004FF C3r03r04              1272 	jp	_storeFish
                                   1273 ;main.c:180: case J_UP:
      000502                       1274 00104$:
                                   1275 ;main.c:181: if(fishingRod.yHook > 20) {
      000502 01r11r00              1276 	ld	bc, #_fishingRod+0
      000505 0A                    1277 	ld	a, (bc)
      000506 5F                    1278 	ld	e, a
      000507 3E 14                 1279 	ld	a, #0x14
      000509 93                    1280 	sub	a, e
      00050A D0                    1281 	ret	NC
                                   1282 ;main.c:182: fishingRod.yHook -= 1;
      00050B 7B                    1283 	ld	a, e
      00050C 3D                    1284 	dec	a
      00050D 02                    1285 	ld	(bc), a
                                   1286 ;main.c:184: color(WHITE, WHITE, SOLID);
      00050E C5                    1287 	push	bc
      00050F AF                    1288 	xor	a, a
      000510 0F                    1289 	rrca
      000511 F5                    1290 	push	af
      000512 AF                    1291 	xor	a, a
      000513 F5                    1292 	push	af
      000514 33                    1293 	inc	sp
      000515 CDr00r00              1294 	call	_color
      000518 E8 03                 1295 	add	sp, #3
      00051A C1                    1296 	pop	bc
                                   1297 ;main.c:181: if(fishingRod.yHook > 20) {
      00051B 0A                    1298 	ld	a, (bc)
                                   1299 ;main.c:185: line(80, fishingRod.yHook - 16, 80, fishingRod.yHook - 14);
      00051C 4F                    1300 	ld	c, a
      00051D C6 F2                 1301 	add	a, #0xf2
      00051F 47                    1302 	ld	b, a
      000520 79                    1303 	ld	a, c
      000521 C6 F0                 1304 	add	a, #0xf0
      000523 C5                    1305 	push	bc
      000524 33                    1306 	inc	sp
      000525 26 50                 1307 	ld	h, #0x50
                                   1308 ;	spillPairReg hl
                                   1309 ;	spillPairReg hl
      000527 E5                    1310 	push	hl
      000528 33                    1311 	inc	sp
      000529 67                    1312 	ld	h, a
      00052A 2E 50                 1313 	ld	l, #0x50
      00052C E5                    1314 	push	hl
      00052D CDr00r00              1315 	call	_line
      000530 E8 04                 1316 	add	sp, #4
                                   1317 ;main.c:187: break;
      000532 C9                    1318 	ret
                                   1319 ;main.c:189: case J_DOWN:
      000533                       1320 00107$:
                                   1321 ;main.c:190: if(fishingRod.yHook<152) {
      000533 FAr11r00              1322 	ld	a, (#_fishingRod + 0)
      000536 FE 98                 1323 	cp	a, #0x98
      000538 D0                    1324 	ret	NC
                                   1325 ;main.c:191: fishingRod.yHook += 1;
      000539 3C                    1326 	inc	a
      00053A EAr11r00              1327 	ld	(#_fishingRod),a
                                   1328 ;main.c:192: color(BLACK, BLACK, SOLID);
      00053D AF                    1329 	xor	a, a
      00053E 67                    1330 	ld	h, a
      00053F 2E 03                 1331 	ld	l, #0x03
      000541 E5                    1332 	push	hl
      000542 3E 03                 1333 	ld	a, #0x03
      000544 F5                    1334 	push	af
      000545 33                    1335 	inc	sp
      000546 CDr00r00              1336 	call	_color
      000549 E8 03                 1337 	add	sp, #3
                                   1338 ;main.c:190: if(fishingRod.yHook<152) {
      00054B FAr11r00              1339 	ld	a, (#_fishingRod + 0)
                                   1340 ;main.c:193: line(80, fishingRod.yHook - 16, 80, fishingRod.yHook - 17);
      00054E 4F                    1341 	ld	c, a
      00054F C6 EF                 1342 	add	a, #0xef
      000551 47                    1343 	ld	b, a
      000552 79                    1344 	ld	a, c
      000553 C6 F0                 1345 	add	a, #0xf0
      000555 C5                    1346 	push	bc
      000556 33                    1347 	inc	sp
      000557 26 50                 1348 	ld	h, #0x50
                                   1349 ;	spillPairReg hl
                                   1350 ;	spillPairReg hl
      000559 E5                    1351 	push	hl
      00055A 33                    1352 	inc	sp
      00055B 67                    1353 	ld	h, a
      00055C 2E 50                 1354 	ld	l, #0x50
      00055E E5                    1355 	push	hl
      00055F CDr00r00              1356 	call	_line
      000562 E8 04                 1357 	add	sp, #4
                                   1358 ;main.c:196: }
                                   1359 ;main.c:197: }
      000564 C9                    1360 	ret
                                   1361 ;main.c:199: void main() {
                                   1362 ;	---------------------------------
                                   1363 ; Function main
                                   1364 ; ---------------------------------
      000565                       1365 _main::
                                   1366 ;main.c:200: init();
      000565 CDr09r02              1367 	call	_init
                                   1368 ;main.c:202: printf(" \n\n\n\n\n\n\n\n    PRESS START!\n");
      000568 11rB9r06              1369 	ld	de, #___str_2
      00056B D5                    1370 	push	de
      00056C CDr00r00              1371 	call	_puts
      00056F E1                    1372 	pop	hl
                                   1373 ;main.c:203: waitpad(J_START);
      000570 3E 80                 1374 	ld	a, #0x80
      000572 F5                    1375 	push	af
      000573 33                    1376 	inc	sp
      000574 CDr00r00              1377 	call	_waitpad
      000577 33                    1378 	inc	sp
                                   1379 ;main.c:204: seed = LY_REG;
      000578 F0r00                 1380 	ldh	a, (_LY_REG + 0)
                                   1381 ;setupPair	HL
      00057A 21r15r00              1382 	ld	hl, #_seed
                                   1383 ;setupPair	HL
      00057D 22                    1384 	ld	(hl+), a
                                   1385 ;main.c:205: seed |= (UINT16)DIV_REG << 8;
                                   1386 ;setupPair	HL
      00057E AF                    1387 	xor	a, a
      00057F 32                    1388 	ld	(hl-), a
      000580 F0r00                 1389 	ldh	a, (_DIV_REG + 0)
      000582 4F                    1390 	ld	c, a
      000583 AF                    1391 	xor	a, a
      000584 B6                    1392 	or	a, (hl)
                                   1393 ;setupPair	HL
                                   1394 ;setupPair	HL
      000585 22                    1395 	ld	(hl+), a
      000586 79                    1396 	ld	a, c
      000587 B6                    1397 	or	a, (hl)
                                   1398 ;setupPair	HL
                                   1399 ;main.c:206: initrand(seed);
                                   1400 ;setupPair	HL
      000588 32                    1401 	ld	(hl-), a
                                   1402 ;setupPair	HL
      000589 2A                    1403 	ld	a, (hl+)
      00058A 4F                    1404 	ld	c, a
      00058B 46                    1405 	ld	b, (hl)
      00058C C5                    1406 	push	bc
      00058D CDr00r00              1407 	call	_initrand
      000590 E1                    1408 	pop	hl
                                   1409 ;main.c:208: printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
      000591 11rD3r06              1410 	ld	de, #___str_4
      000594 D5                    1411 	push	de
      000595 CDr00r00              1412 	call	_puts
      000598 E1                    1413 	pop	hl
                                   1414 ;main.c:210: line(80, 0, 80, fishingRod.yHook - 16);
      000599 FAr11r00              1415 	ld	a, (#_fishingRod + 0)
      00059C C6 F0                 1416 	add	a, #0xf0
      00059E 67                    1417 	ld	h, a
      00059F 2E 50                 1418 	ld	l, #0x50
      0005A1 E5                    1419 	push	hl
      0005A2 21 50 00              1420 	ld	hl, #0x50
      0005A5 E5                    1421 	push	hl
      0005A6 CDr00r00              1422 	call	_line
      0005A9 E8 04                 1423 	add	sp, #4
                                   1424 ;main.c:212: color(LTGREY, LTGREY, SOLID);
      0005AB AF                    1425 	xor	a, a
      0005AC 67                    1426 	ld	h, a
      0005AD 2E 01                 1427 	ld	l, #0x01
      0005AF E5                    1428 	push	hl
      0005B0 3E 01                 1429 	ld	a, #0x01
      0005B2 F5                    1430 	push	af
      0005B3 33                    1431 	inc	sp
      0005B4 CDr00r00              1432 	call	_color
      0005B7 E8 03                 1433 	add	sp, #3
                                   1434 ;main.c:213: line(0, 20, 70, 20);
      0005B9 21 46 14              1435 	ld	hl, #0x1446
      0005BC E5                    1436 	push	hl
      0005BD 21 00 14              1437 	ld	hl, #0x1400
      0005C0 E5                    1438 	push	hl
      0005C1 CDr00r00              1439 	call	_line
      0005C4 E8 04                 1440 	add	sp, #4
                                   1441 ;main.c:214: line(90, 20, 159, 20);
      0005C6 21 9F 14              1442 	ld	hl, #0x149f
      0005C9 E5                    1443 	push	hl
      0005CA 21 5A 14              1444 	ld	hl, #0x145a
      0005CD E5                    1445 	push	hl
      0005CE CDr00r00              1446 	call	_line
      0005D1 E8 04                 1447 	add	sp, #4
                                   1448 ;main.c:216: moveFishTo(&fishArr[0], 40, 40);
      0005D3 21 28 28              1449 	ld	hl, #0x2828
      0005D6 E5                    1450 	push	hl
      0005D7 11r00r00              1451 	ld	de, #_fishArr
      0005DA D5                    1452 	push	de
      0005DB CDr14r01              1453 	call	_moveFishTo
      0005DE E8 04                 1454 	add	sp, #4
                                   1455 ;main.c:218: while(1) {
      0005E0                       1456 00103$:
                                   1457 ;main.c:219: framecounter++;
                                   1458 ;setupPair	HL
      0005E0 21r00r00              1459 	ld	hl, #_framecounter
      0005E3 34                    1460 	inc	(hl)
      0005E4 20 02                 1461 	jr	NZ, 00131$
                                   1462 ;setupPair	HL
      0005E6 23                    1463 	inc	hl
      0005E7 34                    1464 	inc	(hl)
      0005E8                       1465 00131$:
                                   1466 ;main.c:220: UINT8 joydata = joypad();
      0005E8 CDr00r00              1467 	call	_joypad
                                   1468 ;main.c:221: handleInput();
      0005EB CDrE8r04              1469 	call	_handleInput
                                   1470 ;main.c:222: moveFishTo(&fishArr[0], fishArr[0].x + 2, fishArr[0].y);
      0005EE 21r01r00              1471 	ld	hl, #_fishArr + 1
      0005F1 46                    1472 	ld	b, (hl)
      0005F2 FAr00r00              1473 	ld	a, (#_fishArr + 0)
      0005F5 C6 02                 1474 	add	a, #0x02
      0005F7 C5                    1475 	push	bc
      0005F8 33                    1476 	inc	sp
      0005F9 F5                    1477 	push	af
      0005FA 33                    1478 	inc	sp
      0005FB 11r00r00              1479 	ld	de, #_fishArr
      0005FE D5                    1480 	push	de
      0005FF CDr14r01              1481 	call	_moveFishTo
      000602 E8 04                 1482 	add	sp, #4
                                   1483 ;main.c:223: move_sprite(fishingRod.spriteTile, hookX, fishingRod.yHook);
      000604 21r11r00              1484 	ld	hl, #_fishingRod
      000607 46                    1485 	ld	b, (hl)
                                   1486 ;setupPair	HL
      000608 21r12r01              1487 	ld	hl, #_hookX
      00060B 4E                    1488 	ld	c, (hl)
      00060C 11r14r00              1489 	ld	de, #_fishingRod+3
      00060F 1A                    1490 	ld	a, (de)
                                   1491 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      000610 6F                    1492 	ld	l, a
                                   1493 ;	spillPairReg hl
                                   1494 ;	spillPairReg hl
      000611 26 00                 1495 	ld	h, #0x00
                                   1496 ;	spillPairReg hl
                                   1497 ;	spillPairReg hl
      000613 29                    1498 	add	hl, hl
      000614 29                    1499 	add	hl, hl
      000615 11r00r00              1500 	ld	de, #_shadow_OAM
      000618 19                    1501 	add	hl, de
                                   1502 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      000619 78                    1503 	ld	a, b
      00061A 22                    1504 	ld	(hl+), a
      00061B 71                    1505 	ld	(hl), c
                                   1506 ;main.c:225: for(UINT8 i =0; i<numCans; i++) {
      00061C 0E 00                 1507 	ld	c, #0x00
      00061E                       1508 00111$:
      00061E 79                    1509 	ld	a, c
      00061F D6 03                 1510 	sub	a, #0x03
      000621 30 1F                 1511 	jr	NC, 00101$
                                   1512 ;main.c:226: moveCanTo(&canArr[i], canArr[i].x + 2, canArr[i].y);
      000623 69                    1513 	ld	l, c
                                   1514 ;	spillPairReg hl
                                   1515 ;	spillPairReg hl
      000624 26 00                 1516 	ld	h, #0x00
                                   1517 ;	spillPairReg hl
                                   1518 ;	spillPairReg hl
      000626 29                    1519 	add	hl, hl
      000627 29                    1520 	add	hl, hl
      000628 11r05r00              1521 	ld	de, #_canArr
      00062B 19                    1522 	add	hl, de
      00062C 5D                    1523 	ld	e, l
      00062D 54                    1524 	ld	d, h
      00062E 13                    1525 	inc	de
      00062F 1A                    1526 	ld	a, (de)
      000630 46                    1527 	ld	b, (hl)
      000631 04                    1528 	inc	b
      000632 04                    1529 	inc	b
      000633 C5                    1530 	push	bc
      000634 F5                    1531 	push	af
      000635 33                    1532 	inc	sp
      000636 C5                    1533 	push	bc
      000637 33                    1534 	inc	sp
      000638 E5                    1535 	push	hl
      000639 CDrAEr01              1536 	call	_moveCanTo
      00063C E8 04                 1537 	add	sp, #4
      00063E C1                    1538 	pop	bc
                                   1539 ;main.c:225: for(UINT8 i =0; i<numCans; i++) {
      00063F 0C                    1540 	inc	c
      000640 18 DC                 1541 	jr	00111$
      000642                       1542 00101$:
                                   1543 ;main.c:229: set_sprite_tile(scoreLowerDigit, 6 + (score % 10));
                                   1544 ;setupPair	HL
      000642 21r02r00              1545 	ld	hl, #_score
      000645 4E                    1546 	ld	c, (hl)
      000646 06 00                 1547 	ld	b, #0x00
      000648 11 0A 00              1548 	ld	de, #0x000a
      00064B D5                    1549 	push	de
      00064C C5                    1550 	push	bc
      00064D CDr00r00              1551 	call	__modsint
      000650 E8 04                 1552 	add	sp, #4
      000652 7B                    1553 	ld	a, e
      000653 C6 06                 1554 	add	a, #0x06
      000655 5F                    1555 	ld	e, a
                                   1556 ;setupPair	HL
      000656 21r10r01              1557 	ld	hl, #_scoreLowerDigit
      000659 4E                    1558 	ld	c, (hl)
      00065A 41                    1559 	ld	b, c
                                   1560 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      00065B 68                    1561 	ld	l, b
                                   1562 ;	spillPairReg hl
                                   1563 ;	spillPairReg hl
      00065C 26 00                 1564 	ld	h, #0x00
                                   1565 ;	spillPairReg hl
                                   1566 ;	spillPairReg hl
      00065E 29                    1567 	add	hl, hl
      00065F 29                    1568 	add	hl, hl
      000660 D5                    1569 	push	de
      000661 11r00r00              1570 	ld	de, #_shadow_OAM
      000664 19                    1571 	add	hl, de
      000665 23                    1572 	inc	hl
      000666 23                    1573 	inc	hl
      000667 D1                    1574 	pop	de
      000668 73                    1575 	ld	(hl), e
                                   1576 ;main.c:230: set_sprite_tile(scoreHigherDigit, 6 + (score / 10));
                                   1577 ;setupPair	HL
      000669 21r02r00              1578 	ld	hl, #_score
      00066C 5E                    1579 	ld	e, (hl)
      00066D 16 00                 1580 	ld	d, #0x00
      00066F C5                    1581 	push	bc
      000670 21 0A 00              1582 	ld	hl, #0x000a
      000673 E5                    1583 	push	hl
      000674 D5                    1584 	push	de
      000675 CDr00r00              1585 	call	__divsint
      000678 E8 04                 1586 	add	sp, #4
      00067A C1                    1587 	pop	bc
      00067B 7B                    1588 	ld	a, e
      00067C C6 06                 1589 	add	a, #0x06
      00067E 5F                    1590 	ld	e, a
                                   1591 ;setupPair	HL
      00067F 21r11r01              1592 	ld	hl, #_scoreHigherDigit
                                   1593 ;c:/gbdk/include/gb/gb.h:1174: shadow_OAM[nb].tile=tile;
      000682 6E                    1594 	ld	l, (hl)
                                   1595 ;	spillPairReg hl
                                   1596 ;	spillPairReg hl
      000683 26 00                 1597 	ld	h, #0x00
                                   1598 ;	spillPairReg hl
                                   1599 ;	spillPairReg hl
      000685 29                    1600 	add	hl, hl
      000686 29                    1601 	add	hl, hl
      000687 D5                    1602 	push	de
      000688 11r00r00              1603 	ld	de, #_shadow_OAM
      00068B 19                    1604 	add	hl, de
      00068C 23                    1605 	inc	hl
      00068D 23                    1606 	inc	hl
      00068E D1                    1607 	pop	de
      00068F 73                    1608 	ld	(hl), e
                                   1609 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      000690 26 00                 1610 	ld	h, #0x00
                                   1611 ;	spillPairReg hl
                                   1612 ;	spillPairReg hl
      000692 69                    1613 	ld	l, c
      000693 29                    1614 	add	hl, hl
      000694 29                    1615 	add	hl, hl
      000695 11r00r00              1616 	ld	de, #_shadow_OAM
      000698 19                    1617 	add	hl, de
                                   1618 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      000699 3E 14                 1619 	ld	a, #0x14
      00069B 22                    1620 	ld	(hl+), a
      00069C 36 9F                 1621 	ld	(hl), #0x9f
                                   1622 ;main.c:232: move_sprite(scoreHigherDigit, 150, 20);
                                   1623 ;setupPair	HL
      00069E 21r11r01              1624 	ld	hl, #_scoreHigherDigit
      0006A1 4E                    1625 	ld	c, (hl)
                                   1626 ;c:/gbdk/include/gb/gb.h:1247: OAM_item_t * itm = &shadow_OAM[nb];
      0006A2 26 00                 1627 	ld	h, #0x00
                                   1628 ;	spillPairReg hl
                                   1629 ;	spillPairReg hl
      0006A4 69                    1630 	ld	l, c
      0006A5 29                    1631 	add	hl, hl
      0006A6 29                    1632 	add	hl, hl
      0006A7 11r00r00              1633 	ld	de, #_shadow_OAM
      0006AA 19                    1634 	add	hl, de
                                   1635 ;c:/gbdk/include/gb/gb.h:1248: itm->y=y, itm->x=x;
      0006AB 3E 14                 1636 	ld	a, #0x14
      0006AD 22                    1637 	ld	(hl+), a
      0006AE 36 96                 1638 	ld	(hl), #0x96
                                   1639 ;main.c:233: collideWith();
      0006B0 CDr25r04              1640 	call	_collideWith
                                   1641 ;main.c:234: wait_vbl_done();
      0006B3 CDr00r00              1642 	call	_wait_vbl_done
                                   1643 ;main.c:236: }
      0006B6 C3rE0r05              1644 	jp	00103$
      0006B9                       1645 ___str_2:
      0006B9 20                    1646 	.ascii " "
      0006BA 0A                    1647 	.db 0x0a
      0006BB 0A                    1648 	.db 0x0a
      0006BC 0A                    1649 	.db 0x0a
      0006BD 0A                    1650 	.db 0x0a
      0006BE 0A                    1651 	.db 0x0a
      0006BF 0A                    1652 	.db 0x0a
      0006C0 0A                    1653 	.db 0x0a
      0006C1 0A                    1654 	.db 0x0a
      0006C2 20 20 20 20 50 52 45  1655 	.ascii "    PRESS START!"
             53 53 20 53 54 41 52
             54 21
      0006D2 00                    1656 	.db 0x00
      0006D3                       1657 ___str_4:
      0006D3 0A                    1658 	.db 0x0a
      0006D4 0A                    1659 	.db 0x0a
      0006D5 0A                    1660 	.db 0x0a
      0006D6 0A                    1661 	.db 0x0a
      0006D7 0A                    1662 	.db 0x0a
      0006D8 0A                    1663 	.db 0x0a
      0006D9 0A                    1664 	.db 0x0a
      0006DA 0A                    1665 	.db 0x0a
      0006DB 0A                    1666 	.db 0x0a
      0006DC 0A                    1667 	.db 0x0a
      0006DD 0A                    1668 	.db 0x0a
      0006DE 0A                    1669 	.db 0x0a
      0006DF 0A                    1670 	.db 0x0a
      0006E0 0A                    1671 	.db 0x0a
      0006E1 0A                    1672 	.db 0x0a
      0006E2 0A                    1673 	.db 0x0a
      0006E3 0A                    1674 	.db 0x0a
      0006E4 00                    1675 	.db 0x00
                                   1676 	.area _CODE
                                   1677 	.area _INITIALIZER
      000000                       1678 __xinit__framecounter:
      000000 00 00                 1679 	.dw #0x0000
      000002                       1680 __xinit__score:
      000002 00                    1681 	.db #0x00	; 0
      000003                       1682 __xinit__caughtFishIndex:
      000003 FF                    1683 	.db #0xff	; -1
                                   1684 	.area _CABS (ABS)
